
/* A Bison parser, made by GNU Bison 2.4.1.  */

/* Skeleton implementation for Bison GLR parsers in C
   
      Copyright (C) 2002, 2003, 2004, 2005, 2006 Free Software Foundation, Inc.
   
   This program is free software: you can redistribute it and/or modify
   it under the terms of the GNU General Public License as published by
   the Free Software Foundation, either version 3 of the License, or
   (at your option) any later version.
   
   This program is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   GNU General Public License for more details.
   
   You should have received a copy of the GNU General Public License
   along with this program.  If not, see <http://www.gnu.org/licenses/>.  */

/* As a special exception, you may create a larger work that contains
   part or all of the Bison parser skeleton and distribute that work
   under terms of your choice, so long as that work isn't itself a
   parser generator using the skeleton or a modified version thereof
   as a parser skeleton.  Alternatively, if you modify or redistribute
   the parser skeleton itself, you may (at your option) remove this
   special exception, which will cause the skeleton and the resulting
   Bison output files to be licensed under the GNU General Public
   License without this special exception.
   
   This special exception was added by the Free Software Foundation in
   version 2.2 of Bison.  */

/* C GLR parser skeleton written by Paul Hilfinger.  */

/* Identify Bison output.  */
#define YYBISON 1

/* Bison version.  */
#define YYBISON_VERSION "2.4.1"

/* Skeleton name.  */
#define YYSKELETON_NAME "glr.c"

/* Pure parsers.  */
#define YYPURE 0

/* Using locations.  */
#define YYLSP_NEEDED 1


/* Substitute the variable and function names.  */
#define yyparse c_parse
#define yylex   c_lex
#define yyerror c_error
#define yylval  c_lval
#define yychar  c_char
#define yydebug c_debug
#define yynerrs c_nerrs
#define yylloc  c_lloc

/* Copy the first part of user declarations.  */

/* Line 172 of glr.c  */
#line 33 "c:\\.Trash-1000\\doxygen-svn\\src\\\\..\\src\\verilogparser.y"


#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include "verilogdocgen.h"
#include "membergroup.h"
//#include "verilogparser.hpp"
#include "vhdldocgen.h"
#include "doxygen.h"
#include "searchindex.h"
#include "verilogscanner.h"
#include "commentscan.h"
#include "arguments.h"
#define YYMAXDEPTH 15000

static MyParserConv* myconv=0;

static int CurrState;
static bool generateItem=false;
static int          currVerilogType;
static Entry*       current=0;
static Entry*		current_rootVerilog  ;
static Entry*		currentVerilog=0  ;
static Entry*       currentFunctionVerilog=0;
static Entry*       lastModule=0;



static Entry        prevDocEntryVerilog;

static bool         parseCode=FALSE; 

static QCString     currVerilogClass;
static QCString     identVerilog; // last written word
static QCString     currVerilogInst;
static QCString     prevName; // stores the last parsed word
static QCString     moduleParamName; // stores name of  module xxx#(paramList) xxx ();
static int          moduleLine=0;

static int briefLine;
static QCString briefString;

int c_lex (void);
void c_error (char const *);


// functions for  verilog parser ---------------------

static void parseString();
static void writeDigit();
static void initVerilogParser();
static void parseModule();
static void parseFunction(Entry* e);
static void parseReg(Entry* e);
static void parsePortDir(Entry* e,int type);
static void parseParam(Entry* e);
static void parseListOfPorts();
static void parseAlways(bool b=false);
static void parseModuleInst(QCString& first,QCString& sec);


bool findExtendsComponent(QList<BaseInfo> *extend,QCString& compName);
void addSubEntry(Entry* root, Entry* e);


/* Line 172 of glr.c  */
#line 134 "c:\\.Trash-1000\\doxygen-svn\\src\\\\..\\src\\verilogparser.cpp"



#include "verilogparser.hpp"

/* Enabling traces.  */
#ifndef YYDEBUG
# define YYDEBUG 1
#endif

/* Enabling verbose error messages.  */
#ifdef YYERROR_VERBOSE
# undef YYERROR_VERBOSE
# define YYERROR_VERBOSE 1
#else
# define YYERROR_VERBOSE 0
#endif

/* Enabling the token table.  */
#ifndef YYTOKEN_TABLE
# define YYTOKEN_TABLE 0
#endif

/* Default (constant) value used for initialization for null
   right-hand sides.  Unlike the standard yacc.c template,
   here we set the default value of $$ to a zeroed-out value.
   Since the default value is undefined, this behavior is
   technically correct.  */
static YYSTYPE yyval_default;

/* Copy the second part of user declarations.  */


/* Line 243 of glr.c  */
#line 169 "c:\\.Trash-1000\\doxygen-svn\\src\\\\..\\src\\verilogparser.cpp"

#include <stdio.h>
#include <stdlib.h>
#include <string.h>

#ifndef YY_
# if YYENABLE_NLS
#  if ENABLE_NLS
#   include <libintl.h> /* INFRINGES ON USER NAME SPACE */
#   define YY_(msgid) dgettext ("bison-runtime", msgid)
#  endif
# endif
# ifndef YY_
#  define YY_(msgid) msgid
# endif
#endif

/* Suppress unused-variable warnings by "using" E.  */
#if ! defined lint || defined __GNUC__
# define YYUSE(e) ((void) (e))
#else
# define YYUSE(e) /* empty */
#endif

/* Identity function, used to suppress warnings about constant conditions.  */
#ifndef lint
# define YYID(n) (n)
#else
#if (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
static int
YYID (int i)
#else
static int
YYID (i)
    int i;
#endif
{
  return i;
}
#endif

#ifndef YYFREE
# define YYFREE free
#endif
#ifndef YYMALLOC
# define YYMALLOC malloc
#endif
#ifndef YYREALLOC
# define YYREALLOC realloc
#endif

#define YYSIZEMAX ((size_t) -1)

#ifdef __cplusplus
   typedef bool yybool;
#else
   typedef unsigned char yybool;
#endif
#define yytrue 1
#define yyfalse 0

#ifndef YYSETJMP
# include <setjmp.h>
# define YYJMP_BUF jmp_buf
# define YYSETJMP(env) setjmp (env)
# define YYLONGJMP(env, val) longjmp (env, val)
#endif

/*-----------------.
| GCC extensions.  |
`-----------------*/

#ifndef __attribute__
/* This feature is available in gcc versions 2.5 and later.  */
# if (! defined __GNUC__ || __GNUC__ < 2 \
      || (__GNUC__ == 2 && __GNUC_MINOR__ < 5) || __STRICT_ANSI__)
#  define __attribute__(Spec) /* empty */
# endif
#endif

#define YYOPTIONAL_LOC(Name) Name

#ifndef YYASSERT
# define YYASSERT(condition) ((void) ((condition) || (abort (), 0)))
#endif

/* YYFINAL -- State number of the termination state.  */
#define YYFINAL  4
/* YYLAST -- Last index in YYTABLE.  */
#define YYLAST   5118

/* YYNTOKENS -- Number of terminals.  */
#define YYNTOKENS  136
/* YYNNTS -- Number of nonterminals.  */
#define YYNNTS  320
/* YYNRULES -- Number of rules.  */
#define YYNRULES  802
/* YYNRULES -- Number of states.  */
#define YYNSTATES  1754
/* YYMAXRHS -- Maximum number of symbols on right-hand side of rule.  */
#define YYMAXRHS 25
/* YYMAXLEFT -- Maximum number of symbols to the left of a handle
   accessed by $0, $-1, etc., in any rule.  */
#define YYMAXLEFT 1

/* YYTRANSLATE(X) -- Bison symbol number corresponding to X.  */
#define YYUNDEFTOK  2
#define YYMAXUTOK   390

#define YYTRANSLATE(YYX)						\
  ((unsigned int) (YYX) <= YYMAXUTOK ? yytranslate[YYX] : YYUNDEFTOK)

/* YYTRANSLATE[YYLEX] -- Bison symbol number corresponding to YYLEX.  */
static const unsigned char yytranslate[] =
{
       0,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     1,     2,     3,     4,
       5,     6,     7,     8,     9,    10,    11,    12,    13,    14,
      15,    16,    17,    18,    19,    20,    21,    22,    23,    24,
      25,    26,    27,    28,    29,    30,    31,    32,    33,    34,
      35,    36,    37,    38,    39,    40,    41,    42,    43,    44,
      45,    46,    47,    48,    49,    50,    51,    52,    53,    54,
      55,    56,    57,    58,    59,    60,    61,    62,    63,    64,
      65,    66,    67,    68,    69,    70,    71,    72,    73,    74,
      75,    76,    77,    78,    79,    80,    81,    82,    83,    84,
      85,    86,    87,    88,    89,    90,    91,    92,    93,    94,
      95,    96,    97,    98,    99,   100,   101,   102,   103,   104,
     105,   106,   107,   108,   109,   110,   111,   112,   113,   114,
     115,   116,   117,   118,   119,   120,   121,   122,   123,   124,
     125,   126,   127,   128,   129,   130,   131,   132,   133,   134,
     135
};

#if YYDEBUG
/* YYPRHS[YYN] -- Index of the first RHS symbol of rule number YYN in
   YYRHS.  */
static const unsigned short int yyprhs[] =
{
       0,     0,     3,     5,     6,     9,    12,    14,    16,    18,
      20,    23,    25,    27,    33,    37,    44,    50,    56,    58,
      62,    66,    68,    71,    75,    79,    83,    87,    91,    93,
      96,    99,   102,   104,   107,   111,   112,   115,   117,   119,
     121,   127,   132,   139,   146,   153,   160,   167,   175,   183,
     191,   193,   195,   197,   200,   201,   204,   206,   209,   210,
     216,   221,   222,   227,   228,   235,   236,   238,   240,   243,
     244,   249,   253,   257,   259,   263,   265,   270,   276,   278,
     282,   286,   288,   290,   292,   297,   302,   305,   308,   311,
     314,   316,   319,   323,   326,   329,   332,   335,   338,   341,
     344,   347,   350,   353,   356,   359,   362,   364,   366,   368,
     370,   372,   374,   376,   378,   380,   382,   383,   388,   392,
     393,   399,   400,   406,   407,   412,   413,   419,   420,   427,
     431,   432,   437,   438,   444,   445,   452,   453,   459,   460,
     466,   470,   475,   479,   483,   484,   490,   491,   498,   504,
     511,   512,   518,   519,   526,   532,   539,   540,   545,   546,
     550,   551,   554,   559,   563,   569,   574,   576,   578,   580,
     582,   584,   586,   589,   592,   595,   597,   601,   605,   609,
     613,   617,   621,   628,   635,   643,   651,   660,   668,   676,
     684,   693,   701,   705,   706,   708,   710,   712,   716,   720,
     721,   726,   730,   736,   741,   745,   746,   751,   755,   757,
     760,   766,   772,   776,   780,   784,   788,   793,   796,   798,
     802,   804,   806,   808,   810,   812,   816,   819,   824,   826,
     830,   832,   836,   838,   840,   844,   846,   850,   853,   855,
     857,   861,   863,   867,   871,   875,   879,   885,   891,   901,
     914,   926,   930,   932,   933,   935,   937,   939,   941,   943,
     944,   946,   947,   949,   951,   954,   956,   959,   962,   966,
     974,   981,   992,  1002,  1006,  1008,  1011,  1013,  1016,  1018,
    1020,  1023,  1025,  1029,  1031,  1037,  1041,  1046,  1053,  1061,
    1062,  1064,  1065,  1067,  1068,  1070,  1074,  1078,  1082,  1086,
    1088,  1092,  1097,  1103,  1107,  1111,  1118,  1126,  1132,  1136,
    1138,  1140,  1142,  1144,  1147,  1150,  1153,  1156,  1159,  1162,
    1165,  1168,  1173,  1179,  1183,  1185,  1189,  1191,  1194,  1199,
    1203,  1208,  1214,  1218,  1222,  1224,  1228,  1230,  1234,  1241,
    1247,  1252,  1256,  1259,  1261,  1263,  1265,  1266,  1267,  1274,
    1275,  1280,  1282,  1286,  1291,  1297,  1299,  1301,  1303,  1307,
    1309,  1311,  1315,  1321,  1326,  1331,  1336,  1340,  1343,  1345,
    1347,  1349,  1353,  1356,  1358,  1362,  1365,  1366,  1371,  1375,
    1377,  1380,  1382,  1384,  1386,  1388,  1390,  1392,  1394,  1400,
    1408,  1415,  1417,  1420,  1424,  1428,  1431,  1445,  1449,  1455,
    1459,  1463,  1469,  1480,  1491,  1493,  1495,  1499,  1503,  1505,
    1509,  1513,  1515,  1518,  1521,  1524,  1527,  1530,  1534,  1539,
    1546,  1550,  1554,  1558,  1562,  1566,  1568,  1572,  1576,  1581,
    1586,  1588,  1591,  1596,  1603,  1609,  1613,  1615,  1617,  1619,
    1622,  1625,  1629,  1634,  1639,  1641,  1643,  1645,  1647,  1649,
    1651,  1653,  1655,  1661,  1666,  1670,  1672,  1676,  1683,  1689,
    1691,  1697,  1702,  1706,  1711,  1713,  1717,  1721,  1724,  1728,
    1729,  1733,  1737,  1742,  1746,  1750,  1753,  1759,  1764,  1769,
    1772,  1775,  1778,  1781,  1784,  1788,  1790,  1793,  1797,  1804,
    1810,  1815,  1818,  1820,  1823,  1827,  1831,  1838,  1844,  1847,
    1852,  1856,  1857,  1862,  1868,  1873,  1876,  1880,  1884,  1887,
    1889,  1892,  1896,  1899,  1902,  1905,  1908,  1911,  1915,  1918,
    1922,  1925,  1928,  1931,  1934,  1936,  1938,  1942,  1945,  1948,
    1951,  1954,  1957,  1960,  1962,  1965,  1968,  1973,  1975,  1977,
    1978,  1985,  1989,  1992,  1997,  2000,  2005,  2009,  2014,  2016,
    2019,  2022,  2024,  2028,  2032,  2035,  2041,  2047,  2055,  2063,
    2068,  2074,  2082,  2087,  2094,  2101,  2108,  2112,  2119,  2123,
    2125,  2128,  2132,  2136,  2139,  2142,  2148,  2154,  2164,  2167,
    2173,  2179,  2189,  2195,  2201,  2204,  2206,  2210,  2213,  2215,
    2219,  2222,  2226,  2228,  2231,  2233,  2235,  2237,  2239,  2241,
    2245,  2249,  2253,  2257,  2261,  2265,  2268,  2271,  2274,  2278,
    2285,  2291,  2298,  2300,  2304,  2306,  2310,  2314,  2316,  2321,
    2326,  2328,  2332,  2334,  2340,  2348,  2362,  2388,  2390,  2394,
    2398,  2405,  2411,  2422,  2432,  2438,  2446,  2448,  2450,  2452,
    2458,  2464,  2467,  2469,  2471,  2473,  2475,  2477,  2479,  2481,
    2483,  2485,  2487,  2489,  2491,  2493,  2505,  2515,  2527,  2537,
    2551,  2563,  2575,  2585,  2590,  2602,  2612,  2616,  2630,  2642,
    2654,  2664,  2676,  2686,  2698,  2708,  2720,  2734,  2746,  2754,
    2762,  2772,  2774,  2778,  2780,  2782,  2784,  2786,  2791,  2794,
    2798,  2800,  2802,  2804,  2806,  2808,  2813,  2816,  2819,  2822,
    2825,  2827,  2831,  2833,  2835,  2839,  2846,  2850,  2852,  2856,
    2861,  2866,  2870,  2872,  2874,  2878,  2883,  2887,  2892,  2894,
    2898,  2903,  2908,  2910,  2914,  2917,  2922,  2928,  2930,  2933,
    2937,  2939,  2941,  2943,  2945,  2948,  2952,  2954,  2958,  2963,
    2969,  2971,  2977,  2979,  2981,  2983,  2985,  2987,  2989,  2991,
    2994,  2996,  2998,  3001,  3003,  3005,  3007,  3009,  3012,  3016,
    3019,  3023,  3025,  3027,  3029,  3031,  3034,  3037,  3040,  3043,
    3045,  3047,  3049,  3051,  3053,  3055,  3057,  3059,  3062,  3066,
    3070,  3075,  3078,  3080,  3082,  3084,  3086,  3088,  3090,  3093,
    3097,  3101,  3102,  3106,  3110,  3112,  3116,  3120,  3122,  3124,
    3128,  3130,  3132
};

/* YYRHS -- A `-1'-separated list of the rules' RHS.  */
static const short int yyrhs[] =
{
     137,     0,    -1,   138,    -1,    -1,   139,   156,    -1,   138,
     156,    -1,   141,    -1,   144,    -1,   142,    -1,   145,    -1,
     109,    10,    -1,   453,    -1,     7,    -1,   112,    23,   143,
      24,    10,    -1,   112,     1,    10,    -1,   110,   146,    10,
     147,   148,   111,    -1,   110,   146,    10,   147,   111,    -1,
     110,   146,    10,     1,   111,    -1,   454,    -1,   127,   150,
      10,    -1,   127,     1,    10,    -1,   149,    -1,   148,   149,
      -1,    82,   153,    10,    -1,   151,   153,    10,    -1,   151,
     154,    10,    -1,   152,   153,    10,    -1,   152,   154,    10,
      -1,   453,    -1,   150,   453,    -1,   117,   453,    -1,   118,
     453,    -1,   116,    -1,   116,   150,    -1,   115,   453,   155,
      -1,    -1,    15,   110,    -1,   157,    -1,   310,    -1,   140,
      -1,   450,   160,    10,   163,   161,    -1,   450,   160,    10,
     161,    -1,   450,   160,   164,    10,   163,   161,    -1,   450,
     160,   170,    10,   163,   161,    -1,   450,   160,   172,    10,
     163,   161,    -1,   450,   160,   172,    10,     1,   161,    -1,
     450,   160,   170,    10,     1,   161,    -1,   450,   160,    16,
      17,    10,   163,   161,    -1,   450,   160,   164,   170,    10,
     163,   161,    -1,   450,   160,   164,   172,    10,   163,   161,
      -1,   454,    -1,    52,    -1,    54,    -1,   159,   158,    -1,
      -1,   162,    53,    -1,   179,    -1,   163,   179,    -1,    -1,
      29,    16,   165,   166,    17,    -1,    29,    16,     1,    17,
      -1,    -1,    38,   167,   169,   241,    -1,    -1,   166,    98,
      38,   168,   169,   241,    -1,    -1,   244,    -1,   446,    -1,
     446,   244,    -1,    -1,    16,   171,   173,    17,    -1,    16,
       1,    17,    -1,    16,   258,    17,    -1,   174,    -1,   173,
      98,   174,    -1,   175,    -1,    11,   175,    16,    17,    -1,
      11,   175,    16,   175,    17,    -1,   177,    -1,    37,   176,
      36,    -1,   176,    98,   177,    -1,   177,    -1,   454,    -1,
       8,    -1,   454,    18,   438,    19,    -1,   454,    18,   434,
      19,    -1,   450,   197,    -1,   450,   200,    -1,   450,   203,
      -1,     1,    10,    -1,   180,    -1,   178,    10,    -1,   178,
       1,    10,    -1,   450,   298,    -1,   450,   184,    -1,   450,
     190,    -1,   450,   378,    -1,   450,   196,    -1,   450,   181,
      -1,   450,   182,    -1,   450,   336,    -1,   450,   272,    -1,
     450,   332,    -1,   450,   279,    -1,   450,   339,    -1,   450,
     340,    -1,   213,    -1,   219,    -1,   212,    -1,   216,    -1,
     220,    -1,   217,    -1,   210,    -1,   211,    -1,   253,    -1,
     245,    -1,    -1,    51,   183,   235,    10,    -1,    51,     1,
      10,    -1,    -1,   103,   244,   185,   235,    10,    -1,    -1,
     103,   267,   186,   235,    10,    -1,    -1,   103,   187,   235,
      10,    -1,    -1,   103,   446,   188,   235,    10,    -1,    -1,
     103,   446,   244,   189,   235,    10,    -1,   103,     1,    10,
      -1,    -1,    38,   191,   235,    10,    -1,    -1,    38,   267,
     192,   235,    10,    -1,    -1,    38,   446,   244,   193,   235,
      10,    -1,    -1,    38,   244,   194,   235,    10,    -1,    -1,
      38,   446,   195,   235,    10,    -1,    38,     1,    10,    -1,
      87,   244,   238,    10,    -1,    87,   238,    10,    -1,    87,
       1,    10,    -1,    -1,    40,   249,   262,   198,   454,    -1,
      -1,    40,   209,   249,   262,   199,   454,    -1,   197,    98,
     249,   262,   454,    -1,   197,    98,   209,   249,   262,   454,
      -1,    -1,   101,   249,   262,   201,   454,    -1,    -1,   101,
     209,   249,   262,   202,   454,    -1,   200,    98,   249,   262,
     454,    -1,   200,    98,   209,   249,   262,   454,    -1,    -1,
      39,   208,   204,   454,    -1,    -1,    39,   205,   454,    -1,
      -1,    39,   206,    -1,   203,    98,    39,   338,    -1,   203,
      98,   454,    -1,   203,    98,    39,   208,   454,    -1,   203,
      98,    39,   454,    -1,    47,    -1,   104,    -1,   209,    -1,
     244,    -1,   446,    -1,    46,    -1,   208,   102,    -1,   208,
     244,    -1,   208,   207,    -1,     3,    -1,    49,   229,    10,
      -1,    49,     1,    10,    -1,   108,   232,    10,    -1,   108,
       1,    10,    -1,   104,   239,    10,    -1,   104,     1,    10,
      -1,     3,   214,   249,   262,   234,    10,    -1,     3,   214,
     249,   262,   233,    10,    -1,     3,   214,   249,   262,   225,
     233,    10,    -1,     3,   214,   249,   262,   225,   234,    10,
      -1,     3,   223,   214,   249,   262,   225,   233,    10,    -1,
       3,   223,   214,   249,   262,   233,    10,    -1,     3,   223,
     214,   249,   262,   234,    10,    -1,     3,   224,   214,   249,
     262,   234,    10,    -1,     3,   224,   214,   249,   262,   225,
     234,    10,    -1,     3,   224,   214,   249,   262,   233,    10,
      -1,     3,     1,    10,    -1,    -1,   215,    -1,    44,    -1,
      45,    -1,    48,   239,    10,    -1,    48,     1,    10,    -1,
      -1,   126,   218,   239,    10,    -1,   126,     1,    10,    -1,
      46,   249,   244,   239,    10,    -1,    46,   249,   239,    10,
      -1,    46,     1,    10,    -1,    -1,    47,   221,   239,    10,
      -1,    47,     1,    10,    -1,   243,    -1,   222,   243,    -1,
      16,     4,    98,     5,    17,    -1,    16,     5,    98,     4,
      17,    -1,    16,     1,    17,    -1,    16,    41,    17,    -1,
      16,    42,    17,    -1,    16,    43,    17,    -1,    29,    16,
     226,    17,    -1,    29,   228,    -1,   228,    -1,   226,    98,
     228,    -1,   225,    -1,   439,    -1,   230,    -1,   231,    -1,
     454,    -1,   230,    98,   454,    -1,   454,   222,    -1,   231,
      98,   454,   222,    -1,   454,    -1,   232,    98,   454,    -1,
     240,    -1,   233,    98,   240,    -1,   229,    -1,   241,    -1,
     235,    98,   241,    -1,   454,    -1,   454,    22,   438,    -1,
     454,   222,    -1,   236,    -1,   242,    -1,   238,    98,   242,
      -1,   237,    -1,   239,    98,   237,    -1,   454,    22,   438,
      -1,   453,    22,   438,    -1,   454,    22,   439,    -1,    18,
     433,    15,   433,    19,    -1,    18,   441,    15,   440,    19,
      -1,    63,   248,   249,   247,   246,    10,   250,   357,    64,
      -1,    63,   248,   249,   247,   246,    16,   252,    17,    10,
     255,   357,    64,    -1,    63,   248,   249,   247,   246,    16,
     252,    17,    10,   357,    64,    -1,    63,     1,    64,    -1,
     454,    -1,    -1,   244,    -1,   104,    -1,    48,    -1,    47,
      -1,   126,    -1,    -1,   100,    -1,    -1,   102,    -1,   251,
      -1,   250,   251,    -1,   268,    -1,   265,    10,    -1,   450,
     266,    -1,   252,    98,   266,    -1,    61,   248,   254,    10,
     256,   354,    62,    -1,    61,   248,   254,    10,   354,    62,
      -1,    61,   248,   254,    16,   258,    17,    10,   255,   354,
      62,    -1,    61,   248,   254,    16,   258,    17,    10,   354,
      62,    -1,    61,     1,    62,    -1,   454,    -1,   255,   268,
      -1,   268,    -1,   256,   257,    -1,   257,    -1,   268,    -1,
     259,    10,    -1,   259,    -1,   258,    98,   259,    -1,   260,
      -1,   264,   249,   261,   262,   454,    -1,   264,   267,   454,
      -1,   260,    98,   267,   454,    -1,   260,    98,   249,   261,
     262,   454,    -1,   260,    98,   264,   249,   261,   262,   454,
      -1,    -1,    46,    -1,    -1,   244,    -1,    -1,     3,    -1,
     450,    40,   263,    -1,   450,    39,   263,    -1,   450,   101,
     263,    -1,   264,    98,   454,    -1,   266,    -1,   265,    98,
     266,    -1,   101,   249,   262,   454,    -1,   101,    46,   249,
     262,   454,    -1,   101,   267,   454,    -1,   266,    98,   454,
      -1,   266,    98,   101,   249,   262,   454,    -1,   266,    98,
     101,    46,   249,   262,   454,    -1,   266,    98,   101,   267,
     454,    -1,   101,     1,    10,    -1,    47,    -1,    48,    -1,
     126,    -1,   104,    -1,   450,   269,    -1,   450,   210,    -1,
     450,   212,    -1,   450,   184,    -1,   450,   190,    -1,   450,
     216,    -1,   450,   217,    -1,   450,   220,    -1,    46,   244,
     270,    10,    -1,    46,   446,   244,   270,    10,    -1,    46,
     270,    10,    -1,   271,    -1,   270,    98,   271,    -1,   454,
      -1,   454,   222,    -1,     6,   225,   274,    10,    -1,     6,
     274,    10,    -1,     6,   223,   274,    10,    -1,     6,   223,
     225,   274,    10,    -1,     6,   273,    10,    -1,     6,     1,
      10,    -1,   276,    -1,   273,    98,   276,    -1,   275,    -1,
     274,    98,   275,    -1,   277,    16,   278,    98,   435,    17,
      -1,    16,   278,    98,   435,    17,    -1,   277,    16,   278,
      17,    -1,    16,   278,    17,    -1,   454,   244,    -1,   454,
      -1,   445,    -1,   280,    -1,    -1,    -1,   454,   281,   285,
     284,   282,    10,    -1,    -1,   454,   284,   283,    10,    -1,
     291,    -1,   284,    98,   291,    -1,    29,    16,   286,    17,
      -1,    29,    16,     1,    17,    10,    -1,   287,    -1,   289,
      -1,   288,    -1,   287,    98,   288,    -1,   438,    -1,   290,
      -1,   289,    98,   290,    -1,    11,   454,    16,   438,    17,
      -1,    11,   454,    16,    17,    -1,   292,    16,   293,    17,
      -1,   292,    16,     1,    17,    -1,   292,    16,    17,    -1,
     454,   262,    -1,   294,    -1,   296,    -1,   295,    -1,   294,
      98,   295,    -1,   450,   438,    -1,   297,    -1,   296,    98,
     297,    -1,   450,   290,    -1,    -1,   106,   299,   300,   107,
      -1,   106,     1,   107,    -1,   302,    -1,   300,   302,    -1,
     302,    -1,    10,    -1,   303,    -1,   304,    -1,   307,    -1,
     309,    -1,   180,    -1,    65,    16,   438,    17,   301,    -1,
      65,    16,   438,    17,   301,    79,   301,    -1,    66,    16,
     438,    17,   305,    80,    -1,   306,    -1,   305,   306,    -1,
     435,    15,   301,    -1,    82,    15,   301,    -1,    82,   301,
      -1,    71,    16,   308,    10,   438,    10,   308,    17,    81,
      15,   454,   300,    84,    -1,   454,    22,   438,    -1,    81,
      15,   454,   300,    84,    -1,    81,   300,    84,    -1,    81,
       1,    84,    -1,    81,    15,   454,     1,    84,    -1,   450,
      56,   311,    16,   312,    17,    10,   315,   320,    55,    -1,
     450,    56,   311,    16,   313,    17,    10,   315,   320,    55,
      -1,   454,    -1,   454,    -1,   312,    98,   454,    -1,   317,
      98,   314,    -1,   318,    -1,   314,    98,   318,    -1,   314,
      98,   454,    -1,   316,    -1,   315,   316,    -1,   317,    10,
      -1,   318,    10,    -1,   319,    10,    -1,   316,    10,    -1,
     450,    39,   454,    -1,   450,    39,    46,   454,    -1,   450,
      39,    46,   454,    22,   438,    -1,   317,    98,   454,    -1,
     450,   101,   454,    -1,   318,    98,   454,    -1,   450,    46,
     454,    -1,   319,    98,   454,    -1,   321,    -1,    58,   322,
      59,    -1,    58,     1,    59,    -1,   324,    58,   322,    59,
      -1,   324,    58,     1,    59,    -1,   323,    -1,   322,   323,
      -1,   326,    15,   330,    10,    -1,   326,    15,   328,    15,
     329,    10,    -1,    57,   454,    22,   325,    10,    -1,    57,
       1,    10,    -1,     8,    -1,   327,    -1,   331,    -1,   326,
     327,    -1,   326,   331,    -1,    16,   331,    17,    -1,    16,
     331,   331,    17,    -1,   327,    16,   331,    17,    -1,   331,
      -1,   330,    -1,    14,    -1,   331,    -1,     8,    -1,    99,
      -1,    26,    -1,    12,    -1,   454,   223,   227,   333,    10,
      -1,   454,   223,   333,    10,    -1,   454,   333,    10,    -1,
     334,    -1,   333,    98,   334,    -1,   335,    16,   278,    98,
     435,    17,    -1,    16,   278,    98,   435,    17,    -1,   292,
      -1,    50,   223,   225,   337,    10,    -1,    50,   225,   337,
      10,    -1,    50,   337,    10,    -1,    50,   223,   337,    10,
      -1,   338,    -1,   337,    98,   338,    -1,   445,    22,   438,
      -1,    57,   355,    -1,    57,     1,    84,    -1,    -1,    60,
     341,   355,    -1,   340,     1,    84,    -1,   445,    22,   360,
     438,    -1,   445,    22,   438,    -1,   445,    22,   360,    -1,
     342,     1,    -1,   445,    23,    22,   360,   438,    -1,   445,
      23,    22,   438,    -1,   445,    23,    22,   360,    -1,   343,
       1,    -1,    50,   349,    -1,    76,   445,    -1,    74,   338,
      -1,    75,   445,    -1,   445,    22,   438,    -1,   357,    -1,
     450,    10,    -1,    81,   354,    84,    -1,    81,    15,   454,
     255,   354,    84,    -1,    81,    15,   454,   348,    84,    -1,
      81,   255,   354,    84,    -1,    81,    84,    -1,   357,    -1,
     348,   357,    -1,   445,    22,   438,    -1,    83,   354,    72,
      -1,    83,    15,   454,   255,   354,    72,    -1,    83,    15,
     454,   354,    72,    -1,    83,    72,    -1,    83,    15,     1,
      72,    -1,    83,     1,    72,    -1,    -1,    81,   352,   354,
      84,    -1,    81,   353,   255,   354,    84,    -1,    81,   353,
     354,    84,    -1,    81,    84,    -1,    81,   353,    84,    -1,
      81,     1,    84,    -1,    15,   454,    -1,   355,    -1,   354,
     355,    -1,   450,   342,    10,    -1,   450,   371,    -1,   450,
     369,    -1,   450,   362,    -1,   450,   364,    -1,   450,   375,
      -1,   450,   343,    10,    -1,   450,   350,    -1,   450,   344,
      10,    -1,   450,   367,    -1,   450,   351,    -1,   450,   376,
      -1,   450,   368,    -1,   355,    -1,    10,    -1,   450,   345,
      10,    -1,   450,   358,    -1,   450,   370,    -1,   450,   374,
      -1,   450,   347,    -1,   450,   362,    -1,   450,   376,    -1,
     371,    -1,    29,     8,    -1,    29,    12,    -1,    29,    16,
     439,    17,    -1,   359,    -1,   363,    -1,    -1,    70,    16,
     438,   361,    17,   363,    -1,    77,   454,    10,    -1,    31,
     454,    -1,    31,    16,   366,    17,    -1,    31,    26,    -1,
      31,    16,    26,    17,    -1,    31,   128,    17,    -1,    14,
      24,   454,    10,    -1,   438,    -1,    95,   438,    -1,    96,
     438,    -1,   365,    -1,   366,    98,   365,    -1,   366,     6,
     365,    -1,   360,   356,    -1,    73,    16,   438,    17,   356,
      -1,    65,    16,   438,    17,   356,    -1,    65,    16,   438,
      17,   356,    79,   356,    -1,    65,    16,   438,    17,     1,
      79,   356,    -1,    65,    16,     1,    17,    -1,    65,    16,
     438,    17,   346,    -1,    65,    16,   438,    17,   346,    79,
     346,    -1,    65,    16,     1,    17,    -1,    66,    16,   438,
      17,   372,    80,    -1,    66,    16,   438,    17,     1,    80,
      -1,    68,    16,   438,    17,   372,    80,    -1,    68,     1,
      80,    -1,    67,    16,   438,    17,   372,    80,    -1,    67,
       1,    80,    -1,   373,    -1,   372,   373,    -1,   435,    15,
     356,    -1,    82,    15,   356,    -1,    82,   356,    -1,    69,
     357,    -1,    70,    16,   438,    17,   357,    -1,    78,    16,
     438,    17,   357,    -1,    71,    16,   349,    10,   438,    10,
     349,    17,   357,    -1,    69,   355,    -1,    70,    16,   438,
      17,   355,    -1,    78,    16,   438,    17,   355,    -1,    71,
      16,   349,    10,   438,    10,   349,    17,   355,    -1,   453,
      16,   377,    17,    10,    -1,   453,    16,     1,    17,    10,
      -1,   453,    10,    -1,   438,    -1,   377,    98,   438,    -1,
     377,    98,    -1,    98,    -1,    85,   379,    86,    -1,    85,
      86,    -1,    85,     1,    86,    -1,   380,    -1,   379,   380,
      -1,   196,    -1,   383,    -1,   401,    -1,   381,    -1,   382,
      -1,   113,   387,    10,    -1,   114,   387,    10,    -1,   114,
       1,    10,    -1,   119,   387,    10,    -1,   120,   387,    10,
      -1,   120,     1,    10,    -1,   384,    10,    -1,   393,    10,
      -1,   399,    10,    -1,   385,    22,   390,    -1,    16,   389,
      22,    24,   389,    17,    -1,    16,   386,   388,   387,    17,
      -1,    16,   386,    26,    24,   387,    17,    -1,   389,    -1,
     386,    98,   389,    -1,   386,    -1,   400,    22,    24,    -1,
     400,    26,    24,    -1,   454,    -1,   454,    18,   434,    19,
      -1,   454,    18,   438,    19,    -1,   391,    -1,    16,   391,
      17,    -1,   392,    -1,    16,   392,    98,   392,    17,    -1,
      16,   392,    98,   392,    98,   392,    17,    -1,    16,   392,
      98,   392,    98,   392,    98,   392,    98,   392,    98,   392,
      17,    -1,    16,   392,    98,   392,    98,   392,    98,   392,
      98,   392,    98,   392,    98,   392,    98,   392,    98,   392,
      98,   392,    98,   392,    98,   392,    17,    -1,   439,    -1,
     394,    22,   390,    -1,   395,    22,   390,    -1,    16,   398,
     389,    22,    24,   396,    -1,    16,   389,    22,    24,   396,
      -1,    16,   398,   386,    26,    24,   387,   447,    15,   397,
      17,    -1,    16,   386,    26,    24,   387,   447,    15,   397,
      17,    -1,   389,   447,    15,   397,    17,    -1,    16,   389,
     447,    15,   397,    17,    17,    -1,   438,    -1,    95,    -1,
      96,    -1,    65,    16,   438,    17,   384,    -1,    65,    16,
     438,    17,   393,    -1,   125,   384,    -1,   447,    -1,   405,
      -1,   406,    -1,   407,    -1,   408,    -1,   409,    -1,   410,
      -1,   413,    -1,   412,    -1,   411,    -1,   404,    -1,   402,
      -1,   403,    -1,   122,    16,   417,    98,   418,    98,   416,
      98,   414,    17,    10,    -1,   122,    16,   417,    98,   418,
      98,   416,    17,    10,    -1,   123,    16,   417,    98,   418,
      98,   416,    98,   414,    17,    10,    -1,   123,    16,   417,
      98,   418,    98,   416,    17,    10,    -1,   124,    16,   419,
      98,   419,    98,   416,    98,   416,    98,   414,    17,    10,
      -1,   124,    16,   419,    98,   419,    98,   416,    98,   416,
      17,    10,    -1,    88,    16,   417,    98,   418,    98,   416,
      98,   414,    17,    10,    -1,    88,    16,   417,    98,   418,
      98,   416,    17,    10,    -1,    88,    16,     1,    17,    -1,
      89,    16,   417,    98,   418,    98,   416,    98,   414,    17,
      10,    -1,    89,    16,   417,    98,   418,    98,   416,    17,
      10,    -1,    89,     1,    10,    -1,    94,    16,   419,    98,
     419,    98,   416,    98,   416,    98,   414,    17,    10,    -1,
      94,    16,   419,    98,   419,    98,   416,    98,   416,    17,
      10,    -1,    93,    16,   417,    98,   418,    98,   416,    98,
     414,    17,    10,    -1,    93,    16,   417,    98,   418,    98,
     416,    17,    10,    -1,   121,    16,   417,    98,   418,    98,
     416,    98,   414,    17,    10,    -1,   121,    16,   417,    98,
     418,    98,   416,    17,    10,    -1,    92,    16,   417,    98,
     418,    98,   416,    98,   414,    17,    10,    -1,    92,    16,
     417,    98,   418,    98,   416,    17,    10,    -1,   105,    16,
     419,    98,   419,    98,   439,    98,   439,    17,    10,    -1,
     105,    16,   419,    98,   419,    98,   439,    98,   439,    98,
     414,    17,    10,    -1,    90,    16,   420,    98,   416,    98,
     438,    98,   414,    17,    10,    -1,    90,    16,   420,    98,
     416,    17,    10,    -1,    91,    16,   420,    98,   416,    17,
      10,    -1,    91,    16,   420,    98,   416,    98,   414,    17,
      10,    -1,   415,    -1,   414,    98,   415,    -1,   438,    -1,
     438,    -1,   419,    -1,   419,    -1,   421,   425,   134,   426,
      -1,   421,   425,    -1,   425,   134,   426,    -1,   425,    -1,
     419,    -1,    95,    -1,    96,    -1,   422,    -1,    97,    18,
     424,    19,    -1,     1,    19,    -1,     8,     8,    -1,     8,
      12,    -1,    12,     8,    -1,   423,    -1,   424,    98,   423,
      -1,   389,    -1,   439,    -1,    37,   435,    36,    -1,    37,
     438,    37,   435,    36,    36,    -1,    37,   429,    36,    -1,
     430,    -1,   429,    98,   430,    -1,   454,    18,   434,    19,
      -1,   454,    18,   438,    19,    -1,   454,   432,   434,    -1,
     428,    -1,   454,    -1,    16,   435,    17,    -1,   449,    16,
     435,    17,    -1,    18,   438,    19,    -1,   432,    18,   438,
      19,    -1,   438,    -1,   438,    15,   440,    -1,   438,    13,
      15,   442,    -1,   438,    14,    15,   442,    -1,   438,    -1,
     435,    98,   438,    -1,   453,   432,    -1,   453,    18,   434,
      19,    -1,   453,   432,    18,   434,    19,    -1,   453,    -1,
     453,   431,    -1,    16,   439,    17,    -1,   427,    -1,   448,
      -1,   436,    -1,     7,    -1,   443,   436,    -1,   443,   449,
     436,    -1,   437,    -1,   438,   444,   437,    -1,   438,   444,
     449,   437,    -1,   438,    99,   438,    15,   437,    -1,   438,
      -1,   438,    15,   438,    15,   439,    -1,   438,    -1,   438,
      -1,   438,    -1,    35,    -1,    20,    -1,    25,    -1,    34,
      -1,    34,    20,    -1,   132,    -1,    21,    -1,    34,    21,
      -1,   447,    -1,   133,    -1,    27,    -1,   447,    -1,    22,
      22,    -1,    22,    22,    22,    -1,    35,    22,    -1,    35,
      22,    22,    -1,   131,    -1,   130,    -1,    24,    -1,    23,
      -1,    23,    23,    -1,    23,    22,    -1,    24,    22,    -1,
      24,    24,    -1,    26,    -1,    28,    -1,    25,    -1,    20,
      -1,    21,    -1,    34,    -1,   132,    -1,   133,    -1,    26,
      26,    -1,    23,    23,    23,    -1,    24,    24,    24,    -1,
     454,    18,   434,    19,    -1,   454,   432,    -1,   428,    -1,
     453,    -1,   102,    -1,    14,    -1,    13,    -1,     8,    -1,
     447,     8,    -1,   128,   451,   129,    -1,   128,     1,   129,
      -1,    -1,   128,   451,   129,    -1,   128,     1,   129,    -1,
     452,    -1,   451,    98,   452,    -1,   454,    22,   438,    -1,
     454,    -1,   454,    -1,   453,    11,   454,    -1,   455,    -1,
      12,    -1,    32,   455,    -1
};

/* YYRLINE[YYN] -- source line where rule number YYN was defined.  */
static const unsigned short int yyrline[] =
{
       0,   138,   138,   140,   140,   141,   150,   152,   153,   154,
     157,   170,   171,   174,   175,   181,   182,   183,   186,   196,
     197,   202,   203,   207,   208,   209,   210,   211,   215,   216,
     220,   223,   227,   228,   231,   234,   235,   242,   243,   246,
     250,   251,   252,   254,   255,   256,   257,   258,   259,   260,
     265,   268,   269,   271,   290,   290,   298,   299,   306,   306,
     307,   310,   310,   311,   311,   314,   315,   316,   317,   320,
     320,   321,   325,   329,   330,   333,   334,   335,   338,   339,
     342,   343,   346,   347,   348,   349,   352,   353,   354,   355,
     362,   363,   364,   365,   366,   367,   368,   369,   373,   374,
     375,   376,   377,   378,   379,   380,   383,   384,   385,   386,
     387,   388,   389,   390,   391,   392,   396,   396,   397,   405,
     405,   406,   406,   407,   407,   408,   408,   409,   409,   410,
     413,   413,   414,   414,   415,   415,   416,   416,   417,   417,
     418,   421,   422,   423,   430,   430,   431,   431,   432,   433,
     436,   436,   437,   437,   438,   439,   444,   444,   445,   445,
     447,   447,   449,   450,   451,   452,   460,   461,   465,   466,
     467,   468,   469,   470,   471,   476,   480,   481,   484,   485,
     488,   489,   493,   494,   495,   496,   497,   498,   499,   500,
     501,   502,   503,   507,   508,   512,   513,   516,   517,   519,
     519,   520,   523,   524,   525,   528,   528,   529,   532,   533,
     540,   541,   542,   547,   548,   549,   558,   559,   562,   563,
     566,   569,   576,   577,   580,   581,   585,   586,   590,   591,
     594,   595,   598,   601,   602,   607,   608,   609,   612,   616,
     617,   620,   623,   631,   633,   640,   648,   651,   659,   667,
     671,   674,   678,   691,   692,   693,   694,   695,   696,   700,
     701,   704,   705,   708,   709,   713,   714,   718,   719,   727,
     729,   731,   733,   735,   738,   750,   751,   754,   755,   759,
     760,   764,   765,   770,   774,   779,   783,   788,   793,   801,
     802,   804,   805,   807,   808,   811,   812,   813,   814,   818,
     819,   822,   823,   824,   825,   826,   827,   828,   829,   833,
     834,   835,   836,   843,   844,   845,   846,   847,   848,   849,
     850,   853,   854,   855,   859,   860,   863,   864,   871,   872,
     873,   874,   875,   876,   879,   880,   883,   884,   889,   890,
     895,   896,   899,   900,   908,   915,   918,   921,   918,   922,
     922,   926,   927,   930,   931,   933,   934,   937,   938,   941,
     944,   945,   949,   950,   954,   955,   956,   959,   977,   978,
     981,   982,   985,   989,   990,   993,  1003,  1003,  1004,  1007,
    1008,  1012,  1013,  1017,  1018,  1019,  1020,  1021,  1024,  1025,
    1028,  1031,  1032,  1035,  1036,  1037,  1041,  1044,  1047,  1048,
    1049,  1050,  1058,  1060,  1065,  1087,  1088,  1090,  1093,  1094,
    1095,  1098,  1099,  1102,  1103,  1104,  1106,  1109,  1110,  1111,
    1112,  1115,  1116,  1118,  1119,  1125,  1129,  1130,  1131,  1132,
    1136,  1137,  1140,  1141,  1146,  1147,  1150,  1154,  1155,  1156,
    1157,  1160,  1161,  1162,  1166,  1168,  1169,  1172,  1175,  1176,
    1177,  1178,  1186,  1187,  1188,  1191,  1192,  1195,  1196,  1199,
    1207,  1208,  1209,  1210,  1213,  1214,  1217,  1220,  1221,  1224,
    1224,  1236,  1240,  1241,  1242,  1243,  1246,  1247,  1248,  1249,
    1256,  1257,  1258,  1259,  1262,  1266,  1267,  1275,  1276,  1277,
    1278,  1279,  1284,  1285,  1288,  1291,  1292,  1293,  1294,  1295,
    1296,  1301,  1300,  1303,  1304,  1305,  1306,  1307,  1310,  1319,
    1320,  1328,  1329,  1330,  1331,  1332,  1333,  1334,  1335,  1336,
    1337,  1338,  1339,  1340,  1343,  1344,  1348,  1349,  1350,  1351,
    1352,  1353,  1354,  1357,  1363,  1364,  1365,  1368,  1369,  1370,
    1370,  1373,  1376,  1377,  1378,  1379,  1380,  1383,  1386,  1387,
    1388,  1391,  1392,  1393,  1396,  1398,  1404,  1405,  1406,  1407,
    1410,  1411,  1412,  1418,  1419,  1420,  1421,  1422,  1423,  1427,
    1428,  1432,  1433,  1434,  1441,  1442,  1443,  1444,  1448,  1449,
    1450,  1451,  1459,  1460,  1461,  1464,  1465,  1466,  1467,  1474,
    1475,  1476,  1480,  1481,  1485,  1486,  1487,  1488,  1489,  1493,
    1494,  1495,  1499,  1500,  1501,  1508,  1509,  1510,  1514,  1519,
    1520,  1521,  1524,  1525,  1528,  1531,  1532,  1542,  1543,  1544,
    1548,  1549,  1553,  1554,  1555,  1556,  1557,  1565,  1568,  1569,
    1573,  1574,  1578,  1580,  1586,  1587,  1591,  1593,  1594,  1598,
    1599,  1600,  1604,  1613,  1614,  1615,  1616,  1617,  1618,  1619,
    1620,  1621,  1622,  1623,  1624,  1628,  1629,  1632,  1633,  1637,
    1638,  1642,  1643,  1644,  1647,  1648,  1649,  1653,  1654,  1657,
    1658,  1660,  1661,  1665,  1666,  1669,  1670,  1673,  1674,  1678,
    1679,  1682,  1683,  1686,  1694,  1696,  1699,  1702,  1703,  1704,
    1705,  1708,  1712,  1713,  1714,  1717,  1718,  1721,  1722,  1723,
    1726,  1727,  1730,  1734,  1742,  1743,  1748,  1750,  1751,  1754,
    1755,  1756,  1757,  1758,  1767,  1768,  1776,  1777,  1782,  1786,
    1787,  1788,  1791,  1792,  1800,  1801,  1802,  1803,  1804,  1805,
    1806,  1808,  1812,  1813,  1814,  1815,  1818,  1819,  1820,  1821,
    1824,  1825,  1828,  1830,  1832,  1839,  1840,  1841,  1842,  1843,
    1844,  1845,  1846,  1847,  1848,  1852,  1853,  1855,  1856,  1857,
    1858,  1859,  1860,  1861,  1862,  1863,  1864,  1865,  1866,  1867,
    1868,  1869,  1870,  1871,  1872,  1873,  1874,  1875,  1876,  1877,
    1885,  1886,  1887,  1888,  1894,  1897,  1898,  1902,  1903,  1914,
    1915,  1918,  1919,  1920,  1923,  1924,  1927,  1928,  1931,  1932,
    1936,  1939,  1944
};
#endif

#if YYDEBUG || YYERROR_VERBOSE || YYTOKEN_TABLE
/* YYTNAME[SYMBOL-NUM] -- String name of the symbol SYMBOL-NUM.
   First, the terminals, then, starting at YYNTOKENS, nonterminals.  */
static const char *const yytname[] =
{
  "$end", "error", "$undefined", "NET_TOK", "STR0_TOK", "STR1_TOK",
  "GATE_TOK", "STRING_TOK", "DIGIT_TOK", "UNDERSCORE_TOK", "SEM_TOK",
  "DOT_TOK", "LETTER_TOK", "PLUS_TOK", "MINUS_TOK", "COLON_TOK",
  "LBRACE_TOK", "RBRACE_TOK", "LBRACKET_TOK", "RBRACKET_TOK", "AND_TOK",
  "OR_TOK", "EQU_TOK", "GT_TOK", "LT_TOK", "NOT_TOK", "MULT_TOK",
  "PERCENTAL_TOK", "ENV_TOK", "PARA_TOK", "CHAR_TOK", "AT_TOK",
  "DOLLAR_TOK", "BASE_TOK", "SN_TOK", "EXCLAMATION_TOK", "RRAM_TOK",
  "LRAM_TOK", "PARAMETER_TOK", "OUTPUT_TOK", "INOUT_TOK", "SMALL_TOK",
  "MEDIUM_TOK", "LARGE_TOK", "VEC_TOK", "SCALAR_TOK", "REG_TOK",
  "TIME_TOK", "REAL_TOK", "EVENT_TOK", "ASSIGN_TOK", "DEFPARAM_TOK",
  "MODUL_TOK", "ENDMODUL_TOK", "MACRO_MODUL_TOK", "ENDPRIMITIVE_TOK",
  "PRIMITIVE_TOK", "INITIAL_TOK", "TABLE_TOK", "ENDTABLE_TOK",
  "ALWAYS_TOK", "TASK_TOK", "ENDTASK_TOK", "FUNC_TOK", "ENDFUNC_TOK",
  "IF_TOK", "CASE_TOK", "CASEX_TOK", "CASEZ_TOK", "FOREVER_TOK",
  "REPEAT_TOK", "FOR_TOK", "JOIN_TOK", "WAIT_TOK", "FORCE_TOK",
  "RELEASE_TOK", "DEASSIGN_TOK", "DISABLE_TOK", "WHILE_TOK", "ELSE_TOK",
  "ENDCASE_TOK", "BEGIN_TOK", "DEFAULT_TOK", "FORK_TOK", "END_TOK",
  "SPECIFY_TOK", "ENDSPECIFY_TOK", "SPECPARAM_TOK", "DSETUP_TOK",
  "DHOLD_TOK", "DWIDTH_TOK", "DPERIOD_TOK", "DSKEW_TOK", "DRECOVERY_TOK",
  "DSETUPHOLD_TOK", "POSEDGE_TOK", "NEGEDGE_TOK", "EDGE_TOK", "COMMA_TOK",
  "QUESTION_TOK", "AUTO_TOK", "INPUT_TOK", "SIGNED_TOK", "LOCALPARAM_TOK",
  "INTEGER_TOK", "NOCHANGE_TOK", "GENERATE_TOK", "ENDGENERATE_TOK",
  "GENVAR_TOK", "LIBRARY_TOK", "CONFIG_TOK", "ENDCONFIG_TOK",
  "INCLUDE_TOK", "PULSEON_DETECT_TOK", "PULSEONE_EVENT_TOK", "USE_TOK",
  "LIBLIST_TOK", "INSTANCE_TOK", "CELL_TOK", "SHOWCANCEL_TOK",
  "NOSHOWCANCEL_TOK", "REMOVAL_TOK", "FULLSKEW_TOK", "TIMESKEW_TOK",
  "RECREM_TOK", "IFNONE_TOK", "REALTIME_TOK", "DESIGN_TOK", "ATL_TOK",
  "ATR_TOK", "OOR_TOK", "AAND_TOK", "SNNOT_TOK", "NOTSN_TOK", "AAAND_TOK",
  "DEFINE_TOK", "$accept", "file", "lines", "$@1", "library_text",
  "library_descriptions", "library_declaration", "file_path_spec",
  "include_statement", "config_declaration", "identifier_conf",
  "design_statement", "config_rule_statement_list",
  "config_rule_statement", "aidentifier_list", "inst_clause",
  "cell_clause", "liblist_clause", "use_clause", "config", "description",
  "module_declaration", "name_of_module", "module_type", "module_keyword",
  "end_mod", "$@2", "module_option", "module_parameter_port_list", "$@3",
  "parameter_declaration_list", "$@4", "$@5", "signed_range",
  "list_of_ports", "$@6", "list_of_port_declarations", "port_list", "port",
  "port_expression", "port_reference_list", "port_reference",
  "port_declaration", "module_item", "module_or_generate_item",
  "module_or_generate_item_declaration", "parameter_override", "$@7",
  "local_parameter_declaration", "$@8", "$@9", "$@10", "$@11", "$@12",
  "parameter_declaration", "$@13", "$@14", "$@15", "$@16", "$@17",
  "specparam_declaration", "inout_declaration", "$@18", "$@19",
  "input_declaration", "$@20", "$@21", "output_declaration", "$@22",
  "$@23", "$@24", "output_var_type", "s_type", "net_type",
  "event_declaration", "genvar_declaration", "integer_declaration",
  "net_declaration", "xscalared", "scalared", "real_declaration",
  "realtime_declaration", "$@25", "reg_declaration", "time_declaration",
  "$@26", "dimension_list", "drive_strength", "charge_strength", "delay3",
  "delay_value_list", "delay2", "delay_value", "list_of_event_identifiers",
  "list_of_event_lists", "dim_list", "list_of_genvar_identifiers",
  "list_of_net_decl_assignments", "list_of_net_identifiers",
  "list_of_param_assignments", "real_type", "variable_type",
  "list_of_specparam_assignments", "list_of_variable_identifiers",
  "net_decl_assignment", "param_assignment", "specparam_assignment",
  "dimension", "range", "function_declaration", "name_of_function",
  "range_or_type", "automatic", "xsigned",
  "function_item_declaration_list", "function_item_declaration",
  "function_port_list", "task_declaration", "name_of_task",
  "block_item_declaration_list", "task_item_declaration_list",
  "task_item_declaration", "task_port_list", "task_port_item",
  "tf_port_declaration", "xreg", "xrange", "xnettype", "tf_port_dir",
  "tf_input_declaration_list", "tf_input_declaration", "task_port_type",
  "block_item_declaration", "block_reg_declaration",
  "list_of_block_variable_identifiers", "block_variable_type",
  "gate_instantiation", "pull_gate_instance_list",
  "cmos_switch_instance_list", "cmos_switch_instance",
  "pull_gate_instance", "name_of_gate_instance", "output_terminal",
  "module_instantiation", "module_identifier", "$@27", "$@28", "$@29",
  "module_instance_list", "parameter_value_assignment",
  "list_of_parameter_assignments", "ordered_parameter_assignment_list",
  "ordered_parameter_assignment", "named_parameter_assignment_list",
  "named_parameter_assignment", "module_instance", "identifier11",
  "list_of_port_connections", "ordered_port_connection_list",
  "ordered_port_connection", "named_port_connection_list",
  "named_port_connection", "generated_instantiation", "$@30",
  "generate_item_list", "generate_item_or_null", "generate_item",
  "generate_conditional_statement", "generate_case_statement",
  "genvar_module_case_item_list", "genvar_case_item",
  "generate_loop_statement", "genvar_assignment", "generate_block",
  "udp_declaration", "name_of_udp", "udp_port_list",
  "udp_declaration_port_list", "udp_input_declaration_list",
  "udp_port_declaration_list", "udp_port_declaration",
  "udp_output_declaration", "udp_input_declaration", "udp_reg_declaration",
  "udp_body", "combinational_body", "combinational_entry_list",
  "combinational_entry", "udp_initial_statement", "init_val",
  "edge_input_list", "edge_indicator", "current_state", "next_state",
  "output_symbol", "level_symbol", "udp_instantiation",
  "udp_instance_list", "udp_instance", "name_of_instance",
  "continuous_assign", "list_of_net_assignments", "net_assignment",
  "initial_construct", "always_construct", "$@31", "blocking_assignment",
  "nonblocking_assignment", "procedural_continuous_assignments",
  "function_blocking_assignment", "function_statement_or_null",
  "function_seq_block", "function_statement_list", "variable_assignment",
  "par_block", "seq_block", "$@32", "always_label", "statement_list",
  "statement", "statement_or_null", "function_statement",
  "function_case_statement", "delay_control", "delay_or_event_control",
  "$@33", "disable_statement", "event_control", "event_trigger",
  "event_expression", "event_expression_list",
  "procedural_timing_control_statement", "wait_statement",
  "conditional_statement", "function_conditional_statement",
  "case_statement", "case_item_list", "case_item",
  "function_loop_statement", "loop_statement", "system_task_enable",
  "expression_list_null", "specify_block", "specify_item_list",
  "specify_item", "pulsestyle_declaration", "showcancelled_declaration",
  "path_declaration", "simple_path_declaration",
  "parallel_path_description", "list_of_path_inputs",
  "list_of_path_outputs", "connection",
  "specify_input_terminal_descriptor", "path_delay_value",
  "list_of_path_delay_expressions", "path_delay_expression",
  "edge_sensitive_path_declaration",
  "parallel_edge_sensitive_path_description",
  "full_edge_sensitive_path_description", "example",
  "data_source_expression", "edge_identifier",
  "state_dependent_path_declaration", "polarity_operator",
  "system_timing_check", "fullskew_timing_check",
  "timingskew_timing_check", "recrem_timing_check", "setup_timing_check",
  "hold_timing_check", "setuphold_timing_check", "recovery_timing_check",
  "removal_timing_check", "skew_timing_check", "nochange_timing_check",
  "width_timing_check", "period_timing_check", "notify_register_list",
  "notify_register", "timing_check_limit", "data_event", "reference_event",
  "timing_check_event", "controlled_timing_check_event",
  "timing_check_event_control", "edge_control_specifier",
  "edge_descriptor", "edge_descriptor_list", "specify_terminal_descriptor",
  "timing_check_condition", "concatenation", "net_concatenation",
  "net_concatenation_value_list", "net_concatenation_value",
  "function_call", "expression_bracket_list",
  "dimension_constant_expression", "range_expression", "expression_list",
  "primary", "unprim", "expression", "mintypemax_expression",
  "lsb_constant_expression", "msb_constant_expression",
  "width_constant_expression", "unary_operator", "binary_operator",
  "net_lvalue", "signed", "pol_op", "number", "attribute_instance11",
  "attribute_instance", "attr_spec_list", "attr_spec", "simple_identifier",
  "identifier", "ident", 0
};
#endif

/* YYR1[YYN] -- Symbol number of symbol that rule YYN derives.  */
static const unsigned short int yyr1[] =
{
       0,   136,   137,   139,   138,   138,   140,   141,   141,   141,
     142,   143,   143,   144,   144,   145,   145,   145,   146,   147,
     147,   148,   148,   149,   149,   149,   149,   149,   150,   150,
     151,   152,   153,   153,   154,   155,   155,   156,   156,   156,
     157,   157,   157,   157,   157,   157,   157,   157,   157,   157,
     158,   159,   159,   160,   162,   161,   163,   163,   165,   164,
     164,   167,   166,   168,   166,   169,   169,   169,   169,   171,
     170,   170,   172,   173,   173,   174,   174,   174,   175,   175,
     176,   176,   177,   177,   177,   177,   178,   178,   178,   178,
     179,   179,   179,   179,   179,   179,   179,   179,   180,   180,
     180,   180,   180,   180,   180,   180,   181,   181,   181,   181,
     181,   181,   181,   181,   181,   181,   183,   182,   182,   185,
     184,   186,   184,   187,   184,   188,   184,   189,   184,   184,
     191,   190,   192,   190,   193,   190,   194,   190,   195,   190,
     190,   196,   196,   196,   198,   197,   199,   197,   197,   197,
     201,   200,   202,   200,   200,   200,   204,   203,   205,   203,
     206,   203,   203,   203,   203,   203,   207,   207,   208,   208,
     208,   208,   208,   208,   208,   209,   210,   210,   211,   211,
     212,   212,   213,   213,   213,   213,   213,   213,   213,   213,
     213,   213,   213,   214,   214,   215,   215,   216,   216,   218,
     217,   217,   219,   219,   219,   221,   220,   220,   222,   222,
     223,   223,   223,   224,   224,   224,   225,   225,   226,   226,
     227,   228,   229,   229,   230,   230,   231,   231,   232,   232,
     233,   233,   234,   235,   235,   236,   236,   236,   237,   238,
     238,   239,   239,   240,   241,   242,   243,   244,   245,   245,
     245,   245,   246,   247,   247,   247,   247,   247,   247,   248,
     248,   249,   249,   250,   250,   251,   251,   252,   252,   253,
     253,   253,   253,   253,   254,   255,   255,   256,   256,   257,
     257,   258,   258,   259,   260,   260,   260,   260,   260,   261,
     261,   262,   262,   263,   263,   264,   264,   264,   264,   265,
     265,   266,   266,   266,   266,   266,   266,   266,   266,   267,
     267,   267,   267,   268,   268,   268,   268,   268,   268,   268,
     268,   269,   269,   269,   270,   270,   271,   271,   272,   272,
     272,   272,   272,   272,   273,   273,   274,   274,   275,   275,
     276,   276,   277,   277,   278,   279,   281,   282,   280,   283,
     280,   284,   284,   285,   285,   286,   286,   287,   287,   288,
     289,   289,   290,   290,   291,   291,   291,   292,   293,   293,
     294,   294,   295,   296,   296,   297,   299,   298,   298,   300,
     300,   301,   301,   302,   302,   302,   302,   302,   303,   303,
     304,   305,   305,   306,   306,   306,   307,   308,   309,   309,
     309,   309,   310,   310,   311,   312,   312,   313,   314,   314,
     314,   315,   315,   316,   316,   316,   316,   317,   317,   317,
     317,   318,   318,   319,   319,   320,   321,   321,   321,   321,
     322,   322,   323,   323,   324,   324,   325,   326,   326,   326,
     326,   327,   327,   327,   328,   329,   329,   330,   331,   331,
     331,   331,   332,   332,   332,   333,   333,   334,   334,   335,
     336,   336,   336,   336,   337,   337,   338,   339,   339,   341,
     340,   340,   342,   342,   342,   342,   343,   343,   343,   343,
     344,   344,   344,   344,   345,   346,   346,   347,   347,   347,
     347,   347,   348,   348,   349,   350,   350,   350,   350,   350,
     350,   352,   351,   351,   351,   351,   351,   351,   353,   354,
     354,   355,   355,   355,   355,   355,   355,   355,   355,   355,
     355,   355,   355,   355,   356,   356,   357,   357,   357,   357,
     357,   357,   357,   358,   359,   359,   359,   360,   360,   361,
     360,   362,   363,   363,   363,   363,   363,   364,   365,   365,
     365,   366,   366,   366,   367,   368,   369,   369,   369,   369,
     370,   370,   370,   371,   371,   371,   371,   371,   371,   372,
     372,   373,   373,   373,   374,   374,   374,   374,   375,   375,
     375,   375,   376,   376,   376,   377,   377,   377,   377,   378,
     378,   378,   379,   379,   380,   380,   380,   380,   380,   381,
     381,   381,   382,   382,   382,   383,   383,   383,   384,   385,
     385,   385,   386,   386,   387,   388,   388,   389,   389,   389,
     390,   390,   391,   391,   391,   391,   391,   392,   393,   393,
     394,   394,   395,   395,   396,   396,   397,   398,   398,   399,
     399,   399,   400,   401,   401,   401,   401,   401,   401,   401,
     401,   401,   401,   401,   401,   402,   402,   403,   403,   404,
     404,   405,   405,   405,   406,   406,   406,   407,   407,   408,
     408,   409,   409,   410,   410,   411,   411,   412,   412,   413,
     413,   414,   414,   415,   416,   417,   418,   419,   419,   419,
     419,   420,   421,   421,   421,   422,   422,   423,   423,   423,
     424,   424,   425,   426,   427,   427,   428,   429,   429,   430,
     430,   430,   430,   430,   431,   431,   432,   432,   433,   434,
     434,   434,   435,   435,   436,   436,   436,   436,   436,   436,
     436,   436,   437,   437,   437,   437,   438,   438,   438,   438,
     439,   439,   440,   441,   442,   443,   443,   443,   443,   443,
     443,   443,   443,   443,   443,   444,   444,   444,   444,   444,
     444,   444,   444,   444,   444,   444,   444,   444,   444,   444,
     444,   444,   444,   444,   444,   444,   444,   444,   444,   444,
     445,   445,   445,   445,   446,   447,   447,   448,   448,   449,
     449,   450,   450,   450,   451,   451,   452,   452,   453,   453,
     454,   455,   455
};

/* YYR2[YYN] -- Number of symbols composing right hand side of rule YYN.  */
static const unsigned char yyr2[] =
{
       0,     2,     1,     0,     2,     2,     1,     1,     1,     1,
       2,     1,     1,     5,     3,     6,     5,     5,     1,     3,
       3,     1,     2,     3,     3,     3,     3,     3,     1,     2,
       2,     2,     1,     2,     3,     0,     2,     1,     1,     1,
       5,     4,     6,     6,     6,     6,     6,     7,     7,     7,
       1,     1,     1,     2,     0,     2,     1,     2,     0,     5,
       4,     0,     4,     0,     6,     0,     1,     1,     2,     0,
       4,     3,     3,     1,     3,     1,     4,     5,     1,     3,
       3,     1,     1,     1,     4,     4,     2,     2,     2,     2,
       1,     2,     3,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     0,     4,     3,     0,
       5,     0,     5,     0,     4,     0,     5,     0,     6,     3,
       0,     4,     0,     5,     0,     6,     0,     5,     0,     5,
       3,     4,     3,     3,     0,     5,     0,     6,     5,     6,
       0,     5,     0,     6,     5,     6,     0,     4,     0,     3,
       0,     2,     4,     3,     5,     4,     1,     1,     1,     1,
       1,     1,     2,     2,     2,     1,     3,     3,     3,     3,
       3,     3,     6,     6,     7,     7,     8,     7,     7,     7,
       8,     7,     3,     0,     1,     1,     1,     3,     3,     0,
       4,     3,     5,     4,     3,     0,     4,     3,     1,     2,
       5,     5,     3,     3,     3,     3,     4,     2,     1,     3,
       1,     1,     1,     1,     1,     3,     2,     4,     1,     3,
       1,     3,     1,     1,     3,     1,     3,     2,     1,     1,
       3,     1,     3,     3,     3,     3,     5,     5,     9,    12,
      11,     3,     1,     0,     1,     1,     1,     1,     1,     0,
       1,     0,     1,     1,     2,     1,     2,     2,     3,     7,
       6,    10,     9,     3,     1,     2,     1,     2,     1,     1,
       2,     1,     3,     1,     5,     3,     4,     6,     7,     0,
       1,     0,     1,     0,     1,     3,     3,     3,     3,     1,
       3,     4,     5,     3,     3,     6,     7,     5,     3,     1,
       1,     1,     1,     2,     2,     2,     2,     2,     2,     2,
       2,     4,     5,     3,     1,     3,     1,     2,     4,     3,
       4,     5,     3,     3,     1,     3,     1,     3,     6,     5,
       4,     3,     2,     1,     1,     1,     0,     0,     6,     0,
       4,     1,     3,     4,     5,     1,     1,     1,     3,     1,
       1,     3,     5,     4,     4,     4,     3,     2,     1,     1,
       1,     3,     2,     1,     3,     2,     0,     4,     3,     1,
       2,     1,     1,     1,     1,     1,     1,     1,     5,     7,
       6,     1,     2,     3,     3,     2,    13,     3,     5,     3,
       3,     5,    10,    10,     1,     1,     3,     3,     1,     3,
       3,     1,     2,     2,     2,     2,     2,     3,     4,     6,
       3,     3,     3,     3,     3,     1,     3,     3,     4,     4,
       1,     2,     4,     6,     5,     3,     1,     1,     1,     2,
       2,     3,     4,     4,     1,     1,     1,     1,     1,     1,
       1,     1,     5,     4,     3,     1,     3,     6,     5,     1,
       5,     4,     3,     4,     1,     3,     3,     2,     3,     0,
       3,     3,     4,     3,     3,     2,     5,     4,     4,     2,
       2,     2,     2,     2,     3,     1,     2,     3,     6,     5,
       4,     2,     1,     2,     3,     3,     6,     5,     2,     4,
       3,     0,     4,     5,     4,     2,     3,     3,     2,     1,
       2,     3,     2,     2,     2,     2,     2,     3,     2,     3,
       2,     2,     2,     2,     1,     1,     3,     2,     2,     2,
       2,     2,     2,     1,     2,     2,     4,     1,     1,     0,
       6,     3,     2,     4,     2,     4,     3,     4,     1,     2,
       2,     1,     3,     3,     2,     5,     5,     7,     7,     4,
       5,     7,     4,     6,     6,     6,     3,     6,     3,     1,
       2,     3,     3,     2,     2,     5,     5,     9,     2,     5,
       5,     9,     5,     5,     2,     1,     3,     2,     1,     3,
       2,     3,     1,     2,     1,     1,     1,     1,     1,     3,
       3,     3,     3,     3,     3,     2,     2,     2,     3,     6,
       5,     6,     1,     3,     1,     3,     3,     1,     4,     4,
       1,     3,     1,     5,     7,    13,    25,     1,     3,     3,
       6,     5,    10,     9,     5,     7,     1,     1,     1,     5,
       5,     2,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,    11,     9,    11,     9,    13,
      11,    11,     9,     4,    11,     9,     3,    13,    11,    11,
       9,    11,     9,    11,     9,    11,    13,    11,     7,     7,
       9,     1,     3,     1,     1,     1,     1,     4,     2,     3,
       1,     1,     1,     1,     1,     4,     2,     2,     2,     2,
       1,     3,     1,     1,     3,     6,     3,     1,     3,     4,
       4,     3,     1,     1,     3,     4,     3,     4,     1,     3,
       4,     4,     1,     3,     2,     4,     5,     1,     2,     3,
       1,     1,     1,     1,     2,     3,     1,     3,     4,     5,
       1,     5,     1,     1,     1,     1,     1,     1,     1,     2,
       1,     1,     2,     1,     1,     1,     1,     2,     3,     2,
       3,     1,     1,     1,     1,     2,     2,     2,     2,     1,
       1,     1,     1,     1,     1,     1,     1,     2,     3,     3,
       4,     2,     1,     1,     1,     1,     1,     1,     2,     3,
       3,     0,     3,     3,     1,     3,     3,     1,     1,     3,
       1,     1,     2
};

/* YYDPREC[RULE-NUM] -- Dynamic precedence of rule #RULE-NUM (0 if none).  */
static const unsigned char yydprec[] =
{
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0
};

/* YYMERGER[RULE-NUM] -- Index of merging function for rule #RULE-NUM.  */
static const unsigned char yymerger[] =
{
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0
};

/* YYDEFACT[S] -- default rule to reduce with in state S when YYTABLE
   doesn't specify something else to do.  Zero means the default is an
   error.  */
static const unsigned short int yydefact[] =
{
       3,     0,   791,   791,     1,     0,     0,     0,     0,    39,
       6,     8,     7,     9,     5,    37,    38,     0,     4,    10,
     801,     0,     0,    18,   800,     0,     0,     0,     0,   794,
     797,    51,    52,     0,     0,     0,   802,     0,    14,    12,
       0,    11,   798,   793,     0,   792,     0,     0,   404,    53,
      50,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   795,   733,   787,   786,   785,     0,   746,   751,
     747,   748,   745,     0,   750,   754,   730,   732,   736,   796,
       0,   753,   731,   727,   791,     0,    41,     0,     0,     0,
      56,    90,     0,     0,     0,     0,     0,   281,   283,   261,
       0,     0,     0,     0,     0,     0,     0,     0,    17,     0,
       0,    28,     0,    16,     0,     0,     0,    21,     0,     0,
      13,   799,   740,     0,   749,   752,     0,   722,   772,   773,
       0,   764,   763,   771,   769,   755,   770,   774,     0,     0,
     762,   761,   775,   776,     0,   756,     0,   734,     0,     0,
     788,     0,     0,   728,   724,     0,     0,     0,     0,     0,
     405,    89,    55,    40,    57,     0,    91,     0,     0,     0,
     160,   261,     0,     0,     0,     0,     0,     0,     0,   469,
       0,     0,     0,     0,   261,     0,     0,     0,     0,     0,
      98,    99,    94,    95,    97,    86,    87,    88,   112,   113,
     108,   106,   109,   111,   107,   110,   115,   114,   101,   103,
     345,    93,   102,   100,   104,     0,    96,   346,    71,     0,
      83,     0,     0,     0,    73,    75,    78,    82,    72,   791,
     261,   309,   310,     0,   262,   312,   311,   289,     0,   293,
     293,   293,     0,     0,     0,     0,     0,    54,     0,    54,
       0,    20,    19,    29,    32,     0,    30,    31,    15,    22,
       0,     0,     0,     0,     0,     0,   729,   704,     0,     0,
     757,   766,   765,   767,   768,   777,   759,     0,   737,     0,
       0,     0,   735,     0,   722,     0,     0,     0,     0,     0,
       0,     0,   791,     0,    92,     0,     0,   195,   196,   261,
     194,   193,   193,     0,     0,     0,     0,     0,     0,     0,
     336,   334,     0,   343,     0,     0,   784,     0,   136,   132,
     138,   175,   171,     0,   161,   156,   168,   169,   170,   261,
     291,     0,     0,     0,     0,     0,   238,   241,     0,   235,
       0,     0,   222,   223,   224,     0,     0,     0,     0,     0,
     464,   782,     0,   783,   798,     0,     0,     0,   467,     0,
     791,     0,   260,     0,     0,   261,     0,     0,     0,   590,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   594,     0,   592,
     597,   598,   595,     0,     0,     0,     0,     0,     0,   596,
     653,   654,   652,   643,   644,   645,   646,   647,   648,   651,
     650,   649,     0,     0,   239,     0,     0,   261,   291,     0,
       0,   119,   121,   125,     0,     0,     0,   791,     0,     0,
     228,     0,     0,   261,   261,     0,     0,     0,     0,     0,
     349,   351,     0,     0,   455,     0,   291,     0,     0,     0,
      81,    70,     0,     0,   282,   289,   261,     0,   298,   290,
     291,   285,   294,   296,   295,   297,    60,    61,     0,    42,
       0,     0,    46,    43,    45,    44,    33,    23,    35,    24,
      25,    26,    27,     0,   723,     0,   758,   778,   779,   760,
       0,   738,   790,   789,   714,   725,   786,   785,     0,   716,
       0,     0,     0,   791,   406,   791,   407,   408,     0,   420,
       0,   417,   192,     0,     0,     0,     0,     0,     0,   291,
     261,   261,   333,     0,   344,     0,   217,   221,     0,     0,
       0,     0,     0,   332,     0,   329,     0,     0,   342,   140,
     743,     0,     0,   233,     0,     0,     0,     0,   134,   159,
     166,   172,   167,     0,   174,   173,   291,   292,   144,   204,
       0,     0,   207,     0,   198,   197,     0,     0,     0,   237,
     208,   177,   176,     0,     0,   226,   712,     0,   707,   713,
       0,     0,     0,   462,     0,     0,     0,   781,   118,     0,
     468,     0,     0,     0,     0,     0,     0,     0,     0,   791,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   518,   521,   537,   791,   514,   538,   515,
     520,   523,   513,   512,   516,   522,     0,   783,   470,   273,
       0,   274,   251,   253,   591,   637,   638,     0,   612,     0,
     617,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   614,     0,   612,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   641,   589,   593,   605,     0,   606,
       0,     0,   607,   143,   142,     0,     0,     0,   291,   150,
     129,     0,     0,     0,     0,   127,   181,   180,   378,     0,
       0,     0,     0,   387,   791,   379,   383,   384,   385,   386,
       0,   179,   178,     0,   201,     0,   261,   291,   261,   291,
       0,   163,   471,     0,     0,   220,     0,   459,     0,     0,
       0,     0,     0,     0,   454,     0,     0,   367,    47,     0,
      79,     0,    74,     0,     0,   291,   289,   286,     0,    65,
      59,     0,    48,    49,     0,    34,     0,     0,   739,     0,
       0,   742,   719,   726,   717,   715,   791,   411,     0,     0,
       0,     0,   791,   791,     0,     0,   418,   212,     0,     0,
     213,   214,   215,     0,   291,   291,   341,     0,     0,   218,
     221,     0,     0,   330,     0,   328,     0,   335,     0,   337,
       0,     0,   131,     0,     0,     0,     0,     0,     0,   157,
     146,     0,   203,     0,   206,   242,     0,   718,   236,   209,
     225,     0,   706,     0,     0,     0,     0,   463,   461,   465,
     466,     0,     0,   117,     0,   534,   535,     0,     0,   544,
       0,   542,   480,     0,     0,     0,     0,     0,     0,     0,
     578,     0,     0,     0,   482,   483,   481,     0,     0,     0,
       0,   505,   791,   791,     0,     0,   498,   791,   509,   475,
     511,   479,   517,   519,   525,   524,   554,     0,     0,   584,
       0,   791,   791,   257,   256,   255,   258,   254,     0,     0,
       0,     0,     0,   642,     0,     0,   612,     0,     0,     0,
     692,   693,     0,   702,     0,   685,     0,   694,   690,   666,
       0,     0,   691,     0,     0,     0,     0,     0,     0,   599,
     601,   600,   602,   604,   603,     0,     0,     0,     0,     0,
     612,     0,   608,   620,   622,   627,   628,   629,   240,   141,
     245,   152,     0,   124,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   791,   377,   380,   229,   200,   291,     0,
     291,     0,     0,   162,   165,     0,     0,   453,     0,   347,
       0,   352,   350,     0,   366,     0,   368,   370,   369,   373,
       0,   456,     0,    76,     0,    80,    85,    84,     0,   291,
     284,     0,    66,    67,    63,    36,   741,   705,   744,   720,
     721,     0,     0,   412,     0,   425,     0,   416,   413,     0,
     414,   415,     0,     0,     0,   409,   410,   422,   421,     0,
       0,     0,     0,   232,     0,     0,   230,   224,     0,     0,
       0,   216,     0,   331,     0,     0,     0,   340,     0,     0,
     234,   244,   137,   133,   139,     0,     0,   145,   202,     0,
     227,   708,     0,     0,   711,     0,   460,   780,     0,     0,
       0,     0,     0,     0,   551,     0,   548,   546,     0,     0,
       0,     0,   568,     0,   566,     0,     0,     0,     0,   541,
       0,   507,   508,   791,   506,   791,   276,   791,     0,   500,
       0,   791,   495,   510,     0,   474,   473,     0,     0,   588,
       0,   585,   791,   278,     0,   279,   791,     0,     0,     0,
     252,     0,   613,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   663,   696,     0,     0,   688,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   622,   627,     0,   151,   120,   122,   126,
       0,     0,     0,     0,     0,   400,     0,   399,     0,   148,
       0,   154,   164,     0,   452,     0,     0,     0,   355,   357,
     356,   360,   359,     0,   365,   364,   791,   791,   375,   372,
       0,    77,   287,     0,    62,    68,    65,     0,     0,     0,
     448,   451,     0,   450,   449,     0,   430,     0,   437,   438,
     402,     0,   424,   423,   403,   419,   210,   211,     0,     0,
     183,     0,   182,     0,     0,     0,     0,     0,     0,     0,
     339,   219,     0,     0,   247,   135,   147,     0,   709,   716,
     547,   536,   545,   549,   550,     0,   543,     0,   494,   559,
       0,     0,     0,     0,   791,     0,     0,   791,   791,   502,
     275,   791,   504,     0,   316,   317,   314,   315,   318,   319,
     320,   313,   499,   791,   791,     0,   472,   478,   477,     0,
       0,   587,   277,   791,   280,   270,     0,   791,   791,     0,
     610,   615,   616,     0,     0,   631,     0,     0,   618,   619,
     639,   640,     0,     0,   700,     0,     0,   686,     0,   689,
     703,     0,     0,   684,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   621,     0,   153,   128,
     791,     0,     0,     0,     0,   791,   149,   155,   458,     0,
       0,   353,     0,     0,   348,   371,     0,   374,     0,     0,
     288,     0,   435,     0,   427,     0,   426,   431,     0,   439,
     440,     0,     0,     0,   184,   185,   231,     0,   243,     0,
     187,   188,     0,   191,   189,   338,   246,   553,   552,     0,
     556,     0,   791,     0,   569,     0,     0,     0,   579,     0,
       0,   555,   580,   503,     0,     0,   324,     0,   326,   791,
     497,   539,   476,   583,   582,   586,   269,   791,     0,   791,
     263,     0,   299,   265,     0,     0,     0,   611,     0,     0,
     609,     0,     0,     0,   630,   697,   698,   699,   695,     0,
       0,   687,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   382,   388,
     381,   791,     0,   391,     0,     0,   397,   401,   398,   354,
       0,   358,   361,   457,    64,   436,     0,   441,     0,     0,
       0,   444,     0,   429,   428,   186,   190,   791,   791,   564,
     791,   573,   563,   570,   791,   567,   565,   540,     0,     0,
     323,     0,     0,   327,   496,   791,   791,     0,   261,   291,
       0,   264,     0,     0,   266,     0,     0,     0,     0,   267,
       0,     0,     0,     0,   701,     0,     0,   678,     0,   679,
       0,   681,   683,     0,     0,     0,     0,     0,     0,     0,
       0,   623,     0,   791,   791,   395,   390,   392,   791,     0,
     363,     0,   434,   442,     0,   432,   443,   558,   557,   572,
     571,     0,   321,   325,     0,   791,   272,   308,   291,     0,
     303,   248,     0,   791,     0,     0,     0,   791,     0,   530,
     527,   531,   528,   533,   529,   532,     0,   300,   261,   304,
     791,   268,     0,   636,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   389,   394,
     393,     0,   362,   446,     0,   445,   447,   791,   322,   271,
       0,   301,     0,   574,     0,     0,     0,     0,     0,   491,
     791,   791,   526,     0,   261,   291,     0,   791,     0,   633,
       0,   634,     0,   662,     0,   665,     0,     0,   680,   682,
     674,     0,   670,     0,     0,     0,   672,     0,   656,     0,
     658,     0,     0,   624,     0,     0,   433,   581,   302,     0,
       0,     0,     0,     0,   791,   791,   487,   484,   291,     0,
     307,     0,   250,     0,   632,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   562,   791,   791,     0,   791,   791,   791,   492,   490,
       0,   305,   249,   635,   661,   664,   677,   673,   669,   668,
       0,   675,     0,   671,   655,   657,   660,     0,     0,     0,
     560,   485,     0,   575,     0,   576,   791,   489,   493,   306,
       0,     0,     0,     0,   791,   791,   486,     0,   488,   667,
     676,   659,     0,   791,   561,     0,     0,   396,   791,   625,
       0,   577,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   626
};

/* YYPDEFGOTO[NTERM-NUM].  */
static const short int yydefgoto[] =
{
      -1,     1,     2,     3,     9,    10,    11,    40,    12,    13,
      22,    59,   116,   117,   110,   118,   119,   255,   262,   745,
      14,    15,    49,    34,    35,    86,    87,    88,    54,   243,
     468,   739,  1176,   981,    55,    95,    56,   223,   224,   225,
     449,   226,    89,    90,    91,   190,   191,   356,  1244,   682,
     683,   420,   684,   937,  1245,   317,   546,   798,   545,   547,
     387,   195,   801,  1036,   196,   932,  1135,   197,   553,   323,
     324,   554,   325,   326,  1246,   199,  1247,   201,   299,   300,
    1248,  1249,   432,   204,  1250,   334,   575,   301,   302,   307,
     778,   716,   526,  1013,   342,   343,   429,  1014,  1015,   542,
     336,   337,   413,   338,  1016,   543,   414,   570,   557,   206,
    1099,   878,   363,   237,  1389,  1390,  1395,   207,   630,  1075,
    1092,  1093,    96,    97,    98,   460,   558,   463,    99,  1391,
    1392,   238,  1076,  1251,  1375,  1376,   208,   308,   309,   310,
     311,   531,   713,   209,   210,   439,  1163,   722,   440,   720,
    1157,  1158,  1159,  1160,  1168,   441,   717,   965,   966,   967,
     968,   969,   211,   427,   694,  1429,  1430,   696,   697,  1432,
    1433,   698,  1143,   699,    16,    47,   156,   157,   506,   756,
     757,   758,   759,   760,   994,   995,  1185,  1186,   996,  1446,
    1187,  1188,  1449,  1594,  1450,  1189,   212,   443,   444,   445,
     213,   349,   350,   214,   215,   360,   610,   611,   612,  1548,
    1710,  1549,  1687,   832,   613,   614,   852,   853,   857,   858,
     866,  1711,  1550,   615,   616,  1235,   617,   618,   619,  1054,
    1055,   620,   621,   622,  1552,   623,  1363,  1364,  1554,   624,
     625,  1090,   216,   388,   389,   390,   391,   392,   393,   394,
     651,   652,   881,   893,   922,   923,   924,   395,   396,   397,
    1275,  1562,   639,   398,   882,   399,   400,   401,   402,   403,
     404,   405,   406,   407,   408,   409,   410,   411,  1500,  1501,
    1292,   894,  1286,   895,   903,   896,   897,  1284,  1285,   898,
    1289,    76,   351,   577,   578,   153,   587,   806,   285,  1365,
      77,    78,   122,   925,   752,   541,   989,    80,   144,   524,
     328,    81,    82,   149,   359,    28,    29,    83,    42,    24
};

/* YYPACT[STATE-NUM] -- Index in YYTABLE of the portion describing
   STATE-NUM.  */
#define YYPACT_NINF -1421
static const short int yypact[] =
{
   -1421,   110,   173,  1485, -1421,   143,   977,   345,  1221, -1421,
   -1421, -1421, -1421, -1421, -1421, -1421, -1421,  1693, -1421, -1421,
   -1421,   977,   157, -1421, -1421,   175,  1320,   133,   538, -1421,
     299, -1421, -1421,   977,   977,  1086, -1421,    74, -1421, -1421,
     348,   369, -1421, -1421,   977, -1421,  3488,   359, -1421, -1421,
   -1421,  2112,   785,   435,   337,   351,   463,   383,  1263,  1120,
     492,   977, -1421, -1421, -1421, -1421, -1421,  3488, -1421, -1421,
   -1421,   991, -1421,  3488, -1421, -1421, -1421, -1421, -1421,  4787,
     396,   535, -1421,   117,    71,   557, -1421,   686,  2112,   378,
   -1421, -1421,  3627,   666,   771,  1706,   153, -1421,   713,  1316,
     837,   508,  2218,   820,   827,   864,  2571,  2675, -1421,   885,
    1237,   369,   784, -1421,   977,   977,  1277, -1421,   927,   927,
   -1421, -1421,  3992,   978, -1421, -1421,   106,  4034, -1421, -1421,
     902,  1040,   494, -1421,   999, -1421, -1421, -1421,  1008,  3488,
   -1421, -1421, -1421, -1421,  3281, -1421,  1440, -1421,   535,  1619,
   -1421,  3488,  3488, -1421,  1032,  1073,   394,  1074,  1001,  1062,
   -1421, -1421, -1421, -1421, -1421,  1122, -1421,  1216,  1282,   932,
     431,   112,   313,  1446,  1448,  1469,  1697,  1483,  2862, -1421,
     108,   802,  1582,  1177,   112,  1037,  1505,  2983,  1532,  1567,
   -1421, -1421, -1421, -1421, -1421,  1064,  1079,  1085, -1421, -1421,
   -1421, -1421, -1421, -1421, -1421, -1421, -1421, -1421, -1421, -1421,
   -1421, -1421, -1421, -1421, -1421,  1956, -1421,  1358, -1421,  2218,
   -1421,  1218,  1321,   468, -1421, -1421, -1421,  1167, -1421,  1006,
     944, -1421, -1421,   977, -1421, -1421, -1421,  1152,   977,  1210,
    1210,  1210,  1201,  1244,  2112,  2218,  2218,   557,  2112,   557,
    2112, -1421, -1421,   369,   977,  1274,   369,   369, -1421, -1421,
     977,  1280,  1286,  1291,  1309,  3488, -1421, -1421,  3488,  3488,
    1304, -1421,  1332, -1421,  1313, -1421,  1346,  4062, -1421,  3488,
    1247,   648, -1421,   548,  4787,  1364,  3847,  3488,  3488,  1415,
     977,  1429,    71,  1071, -1421,  1453,  1330, -1421, -1421,  1311,
   -1421,  1075,  1075,  1457,  1422,  3519,  1174,  1403,   109,   120,
   -1421, -1421,  1466,  1467,  1487,  3488, -1421,   977, -1421, -1421,
    1467, -1421, -1421,   977, -1421,   690, -1421, -1421, -1421,  1311,
    1467,  1489,   170,  1513,   977,  1517, -1421, -1421,   121,   931,
    1536,  1551,  1486,  1498,  1549,  1401,  1349,  1028,  1349,   244,
   -1421, -1421,  1592,   369,  1600,  1614,   977,  1553, -1421,  5035,
    1006,  1578, -1421,   977,  1585,  1311,  1556,   657,  1637, -1421,
    1638,   577,  1642,  1649,  1650,  1651,  1661,  1663,   977,  1568,
     977,  1569,  1670,  1673,  1674,  1675,  1681, -1421,  4760, -1421,
   -1421, -1421, -1421,  1689,  1678,  1700,  1694,  1702,  1701, -1421,
   -1421, -1421, -1421, -1421, -1421, -1421, -1421, -1421, -1421, -1421,
   -1421, -1421,  1709,   254, -1421,   977,  1705,  1311,  1467,  1718,
     977, -1421, -1421,  1467,  1722,   257,  1626,  1116,  1725,   271,
   -1421,  1730,   977,   112,   112,   488,  1662,  1422,  1432,  1723,
    1655, -1421,  1742,   278, -1421,  1744,  1467,  2112,  1745,   115,
   -1421, -1421,  1706,  3488, -1421,  1152,  1072,   977, -1421, -1421,
    1467, -1421, -1421, -1421, -1421, -1421, -1421, -1421,   671, -1421,
    2112,  2112, -1421, -1421, -1421, -1421,   977, -1421,  1241, -1421,
   -1421, -1421, -1421,  4114,  4787,   118, -1421, -1421, -1421, -1421,
    3488, -1421, -1421, -1421, -1421, -1421,  1751,  1754,  3488, -1421,
    1753,  3892,   682,  1006, -1421,  1006,  1672,  1683,  1686, -1421,
     977, -1421, -1421,  1756,  1684,  1690,  1757,  1762,  1767,  1467,
    1311,  1311, -1421,   701, -1421,  3488, -1421, -1421,  1349,  1403,
     279,  1774,   295, -1421,  1561, -1421,  1403,  1349, -1421, -1421,
    4787,  1777,   303, -1421,   504,   977,   977,   977, -1421, -1421,
   -1421, -1421, -1421,   977, -1421, -1421,  1467, -1421, -1421, -1421,
     308,   977, -1421,   323, -1421, -1421,   977,  3488,  3488,  1549,
   -1421, -1421, -1421,   977,   977,  1549, -1421,   350, -1421,  1782,
    1349,   333,   363, -1421,  1349,  3488,  3488,  1786, -1421,   364,
   -1421,  1771,  1308,   129,  1349,  1791,  1793,   628,   799,  1006,
    1795,  1797,  1800,  1349,  1349,  1349,   977,  1801,  1273,  2453,
     730,  1135,  1808, -1421, -1421, -1421,    67, -1421, -1421, -1421,
   -1421, -1421, -1421, -1421, -1421, -1421,  1454,  1368, -1421, -1421,
     907, -1421, -1421,   111, -1421, -1421, -1421,   749,  1798,   977,
    1805,  3488,   478,  1815,   559,   559,   559,   559,   559,   559,
     559,  1726,  1819, -1421,  1821,  1822,  1826,  1827,  1830,   559,
     559,   559,   559,   977, -1421, -1421, -1421, -1421,  3550, -1421,
    3550,  3550, -1421, -1421, -1421,   977,   380,  3488,  1467, -1421,
   -1421,   389,   977,   977,   977, -1421, -1421, -1421, -1421,  1829,
    1831,  1834,  2910, -1421,  1372, -1421, -1421, -1421, -1421, -1421,
    3784, -1421, -1421,   977, -1421,   406,  1311,  1467,  1311,  1467,
     733, -1421, -1421,  1761,  1349, -1421,  1666, -1421,   414,  1836,
     977,   977,  1832,  1609, -1421,  1666,  1349, -1421, -1421,  1759,
   -1421,  1321, -1421,  1824,  3909,  1467,  1152, -1421,   977,   103,
   -1421,  1823, -1421, -1421,  1750, -1421,  3488,  1828, -1421,  3488,
    3488,  4787, -1421, -1421, -1421, -1421,   783,  1852,   427,   440,
     447,  1036,   783,    71,   977,   977,  1841, -1421,  1860,  1862,
   -1421, -1421, -1421,  1433,  1467,  1467, -1421,  3488,   709, -1421,
     978,  1769,   470, -1421,  1349, -1421,  1349, -1421,  1855, -1421,
     768,  3488, -1421,   977,  3488,   519,   534,   540,   977, -1421,
   -1421,   977, -1421,   541, -1421, -1421,  1858,  4787,  4787, -1421,
   -1421,  1549, -1421,  1349,  3488,  3324,   542, -1421, -1421, -1421,
    4787,  1861,  3488, -1421,   977, -1421, -1421,  3488,  1396, -1421,
    1857, -1421, -1421,  1859,  1900,  3488,  1799,  3488,  1802,  3488,
   -1421,  3488,  1349,  3488, -1421, -1421, -1421,  1867,  3488,  1803,
     977, -1421,  1006,   587,  1811,  1570, -1421,   434, -1421, -1421,
   -1421, -1421, -1421, -1421, -1421, -1421, -1421,  2340,  1863, -1421,
    1159,  1006,  1006, -1421, -1421, -1421, -1421, -1421,   977,  1864,
     977,   977,  1166, -1421,  1865,    66,  1868,  3488,  4155,   791,
   -1421, -1421,  1866, -1421,  1788, -1421,   977, -1421,  1758, -1421,
    1872,  1796, -1421,  1804,  1806,  1807,  1817,  1820,  1825, -1421,
   -1421, -1421, -1421, -1421, -1421,  1833,  1835,  1838,  1840,   816,
    1871,  3590, -1421, -1421, -1421, -1421, -1421, -1421, -1421, -1421,
   -1421, -1421,   977, -1421,   545,   560,   574,   977,  3488,  3488,
     977,  1813,   977,  1197, -1421, -1421, -1421, -1421,  1467,   977,
    1467,   977,   914, -1421,  1389,  3488,   575, -1421,  1743,  1655,
    1742, -1421, -1421,  1878, -1421,  1881,  1842, -1421,  1844, -1421,
    3355, -1421,  1845, -1421,  1882, -1421, -1421, -1421,   977,  1467,
   -1421,   977, -1421,  1467, -1421, -1421, -1421, -1421,  4787, -1421,
   -1421,  1627,   164,  1852,  1848, -1421,  1869, -1421, -1421,   977,
   -1421, -1421,   977,   977,  1851,  1683, -1421, -1421, -1421,  3488,
    1883,  1902,   977, -1421,   576,  1907, -1421,  1249,  1433,  1433,
     774, -1421,  3488, -1421,  1846,  1905,  1349, -1421,  3488,  1909,
   -1421,  4787, -1421, -1421, -1421,   600,   977, -1421, -1421,  3488,
    1549, -1421,  1920,  3934, -1421,  4183, -1421, -1421,  4201,  1914,
    1928,  1931,  3488,  3488, -1421,    68,  4787, -1421,  3488,  1933,
    4236,  4284, -1421,  4323, -1421,  4364,  4406,  1941,  4444, -1421,
    4486, -1421, -1421,   630, -1421,  1006, -1421,   735,  4926, -1421,
    1880,  1006, -1421, -1421,  1937,  3488,  4787,  2340,  1938, -1421,
     831,  4787,  1006, -1421,  1944, -1421,   261,  4858,   838,   915,
   -1421,   977, -1421,  1939,  1934,  1936,  1676,  1942,  1943,  1946,
    3975,  1945, -1421, -1421,  1265,   559,  1837,  3488,   559,  3488,
    3488,   559,   559,   559,   559,   559,   559,   559,   559,  1949,
    1950,  3488,  1958,  1884,   978,   977, -1421, -1421, -1421, -1421,
     602,  4527,  4566,  1968,  1957, -1421,  3056, -1421,   977, -1421,
     977, -1421, -1421,   839, -1421,  1966,   977,  1967,  1887, -1421,
    1888, -1421,  4787,  1977, -1421, -1421,  1006,  1006, -1421,  4787,
    3488, -1421, -1421,   977, -1421, -1421,   103,  1979,  1970,  1952,
   -1421, -1421,   124, -1421, -1421,   679, -1421,   797,  1981, -1421,
   -1421,   296, -1421, -1421, -1421,  4787, -1421, -1421,   603,  1988,
   -1421,   977, -1421,  3488,   977,   611,  1990,   977,   650,  1991,
   -1421, -1421,  1995,   844, -1421, -1421, -1421,  1996, -1421,   393,
   -1421, -1421, -1421,  4787,  4787,  3058, -1421,  3058,  4787, -1421,
    2779,  1814,  3386,  3386,  1006,  1997,  3488,    67,  1006, -1421,
   -1421,   806, -1421,   452, -1421, -1421, -1421, -1421, -1421, -1421,
   -1421, -1421, -1421,  1006,   614,  3488,  4787,  3488,  4787,  2008,
    2010,  3488, -1421,   270, -1421, -1421,  2015,    59,  1006,  1496,
   -1421, -1421, -1421,   977,  1647, -1421,   977,  1676, -1421, -1421,
   -1421, -1421,  1384,  2018, -1421,   325,  1930, -1421,  3488, -1421,
   -1421,  1932,   870,  4787,   880,  1947,  1948,  1951,  1953,  1954,
    1955,  1971,  1972,   977,   977,  1884, -1421,  3488, -1421, -1421,
     631,  3417,  3488,  3488,  1960,  1437, -1421, -1421, -1421,  2021,
    2023, -1421,  3488,  2031, -1421, -1421,  3488, -1421,  2031,   884,
   -1421,   977, -1421,  2026, -1421,   608, -1421, -1421,   124,  1981,
   -1421,   124,  1989,   859, -1421, -1421, -1421,  2025,  4787,   651,
   -1421, -1421,  2040, -1421, -1421, -1421, -1421, -1421, -1421,  1975,
    1976,  1985,    98,  3131, -1421,   142,  3167,  3202, -1421,  2035,
    3681, -1421, -1421, -1421,   977,   674, -1421,  1467,  1549,   726,
   -1421,  4787,  4787, -1421, -1421,  4787, -1421,  1006,   861,    59,
   -1421,   675,  1973, -1421,   950,   888,  1974, -1421,  2062,  1474,
   -1421,  2063,  1474,  1474, -1421, -1421, -1421, -1421, -1421,  1265,
    3488, -1421,  3488,  2069,  3488,  2073,  3488,  3488,  3488,  3488,
    3488,  3488,  3488,  3488,  3488,  2070,  2076,   895, -1421,  2007,
   -1421,   326,  3246, -1421,   259,  3724,  4787, -1421, -1421, -1421,
    3457, -1421, -1421, -1421, -1421, -1421,  2086, -1421,  2081,  2084,
    2090,  2091,  2085, -1421, -1421, -1421, -1421,    67,    67, -1421,
      67, -1421, -1421, -1421,    67, -1421, -1421, -1421,  1349,   684,
   -1421,   977,   977,  1549, -1421,  1006,   343,  2093,  1311,  1467,
     977, -1421,  2042,  4973, -1421,  1974,   102,  2094,  1974,  1973,
    3488,  2092,  3488,  2095, -1421,   903,   910, -1421,  4607, -1421,
     922, -1421,  4787,   934,   953,  2011,  2013,   958,   973,   990,
    2014, -1421,  3488,   631,   631, -1421, -1421, -1421,   631,   977,
   -1421,  4649, -1421, -1421,   418, -1421, -1421, -1421, -1421, -1421,
   -1421,  2097, -1421, -1421,   720,   461, -1421, -1421,  1467,   977,
   -1421, -1421,  2100,  1006,  2101,  2103,  2104,    78,  2098, -1421,
   -1421, -1421, -1421, -1421, -1421, -1421,  2099,  1973,  1195, -1421,
    1006,  1973,  2106,  4787,  3488,  2108,  3488,  2116,  3488,  2117,
    3488,  3488,  2118,  3488,  2119,  3488,  2120,  3488,  3488,  3488,
    2121,  3488,  2122,  3488,  2123,  3488,  3488,   996, -1421, -1421,
   -1421,  2125, -1421, -1421,  2124, -1421, -1421,  1006, -1421, -1421,
     977, -1421,  2060, -1421,  1482,  3488,  1349,  3488,   977, -1421,
    1006,   819, -1421,  3488,  1311,  1467,   977,  1006,  2071, -1421,
    2126, -1421,  2128, -1421,   997, -1421,  1007,  1009, -1421, -1421,
   -1421,  1010, -1421,  1016,  1018,  1035, -1421,  1042, -1421,  1044,
   -1421,  1049,  1051, -1421,  3488,  2055, -1421, -1421, -1421,  2129,
    4687,  4729,  2127,  4770,  1006,   832, -1421,  4787,  1467,   977,
   -1421,  2074, -1421,  2130, -1421,  2138,  2139,  2143,  2144,  2145,
    2146,  3488,  2147,  3488,  2154,  2156,  2157,  2158,  3488,  2041,
    2155, -1421,  1006,  1006,  3488,  1006,  1006,   872, -1421, -1421,
     977, -1421, -1421, -1421, -1421, -1421, -1421, -1421, -1421, -1421,
    1057, -1421,  1060, -1421, -1421, -1421, -1421,  1063,  3488,   977,
    2061, -1421,  2262, -1421,  3747, -1421,   939, -1421, -1421, -1421,
    2161,  2166,  2167,  2082,  1116,  1006, -1421,  1349, -1421, -1421,
   -1421, -1421,  3488,  1459, -1421,  2164,  1070, -1421,  1006, -1421,
    3488, -1421,  2087,  3488,  2088,  3488,  2089,  3488,  2096,  3488,
    2102,  3488,  2165, -1421
};

/* YYPGOTO[NTERM-NUM].  */
static const short int yypgoto[] =
{
   -1421, -1421, -1421, -1421, -1421, -1421, -1421, -1421, -1421, -1421,
   -1421, -1421, -1421,  2068,  1935, -1421, -1421,  1386,  2110, -1421,
    2185, -1421, -1421, -1421, -1421,    28, -1421,    41, -1421, -1421,
   -1421, -1421, -1421,  1014,  2141, -1421,  2151, -1421,  1749,  -182,
   -1421,  -190, -1421,    11,  -421, -1421, -1421, -1421,  2114, -1421,
   -1421, -1421, -1421, -1421,  2131, -1421, -1421, -1421, -1421, -1421,
    2133, -1421, -1421, -1421, -1421, -1421, -1421, -1421, -1421, -1421,
   -1421, -1421,  1499,  -114,   -82, -1421,   -73, -1421,  1230, -1421,
     -69,   -65, -1421, -1421,   -63, -1421,  -337,   567, -1421,  -154,
   -1421, -1421,  -494,  2033, -1421, -1421, -1421,  -901,  -928,  -187,
   -1421,  1644,  1812,  -134,  1011,  -752,  1539,  -554,  -157, -1421,
   -1421, -1421,  2030,  -118, -1421,   828, -1421, -1421, -1421, -1039,
   -1421,  1130,  1359,  -212, -1421,  -396,  -322,  1314,  2003, -1421,
   -1250,  -165,  -853, -1421, -1298,   763, -1421, -1421,  -238,  1699,
    1703,  -117,  -279, -1421, -1421, -1421, -1421, -1421,  1516, -1421,
   -1421, -1421,   917, -1421,  -903,  1520,  -172, -1421, -1421,  1076,
   -1421,  1077, -1421, -1421,  -687,  -675,  -424, -1421, -1421, -1421,
     811, -1421,   727, -1421, -1421, -1421, -1421, -1421, -1421,  1740,
     126,  2163,  -249, -1421,  1490, -1421,  1058, -1113, -1421, -1421,
   -1421,  1061, -1421, -1421,   729, -1085, -1421,  -382,  1526, -1421,
   -1421,  -286,  -478, -1421, -1421, -1421, -1421, -1421, -1421, -1421,
     529, -1421, -1421,  -835, -1421, -1421, -1421, -1421,  -764,   128,
   -1093, -1124, -1421, -1421,  -807, -1421, -1420,   886, -1421,  -253,
   -1421, -1421, -1421, -1421, -1421, -1412,   358,   209, -1421, -1421,
   -1410, -1421, -1421, -1421,  1873, -1421, -1421, -1421,  -378, -1421,
    -309,  -346, -1421,  -300,   935,  1339,  -597,  1151, -1421, -1421,
     986,  -776, -1421, -1421, -1421, -1421, -1421, -1421, -1421, -1421,
   -1421, -1421, -1421, -1421, -1421, -1421, -1421, -1421,  -356,   697,
    -742,  1209,   676,  -523,  1625, -1421, -1421,   867, -1421,  1377,
     989, -1421,  -302, -1421,  1472, -1421,   -37,  1248,  -257,   -57,
     247,   -96,   971,   -53,  1495, -1421,  1530, -1421, -1421,  -138,
    -145,  1371, -1421,   339,    -2,  2142,  2245,   852,     3,  2270
};

/* YYTABLE[YYPACT[STATE-NUM]].  What to do in state STATE-NUM.  If
   positive, shift that token.  If negative, reduce the rule which
   number is the opposite.  If zero, do what YYDEFACT says.
   If YYTABLE_NINF, syntax error.  */
#define YYTABLE_NINF -799
static const short int yytable[] =
{
      17,    17,   569,   695,   319,   943,   693,  1067,   664,    23,
     198,    30,   318,   327,   123,   809,   126,   454,  1095,   200,
     422,   809,   348,   202,   320,   523,   415,   203,   421,   205,
     500,   779,   450,   655,   656,   658,    48,    50,   352,   448,
     423,  1030,  1253,   507,   576,   442,   154,    30,   278,    92,
     100,   312,   425,   330,   332,  1161,   718,   329,   637,   735,
    1085,   581,   582,  1551,   121,   457,   418,   638,   530,   532,
     417,  1553,  1337,  1555,  1225,    57,  1469,   864,   653,   653,
     653,   653,   159,    20,  1199,  1226,    92,   160,  1073,  1077,
    1206,  1209,  1107,  1608,   283,   217,   679,  1335,   227,   164,
      92,   100,  1340,    21,    92,    92,   819,  1096,   864,   361,
       4,  1198,   455,  1460,    20,   321,   163,  1205,  1208,   533,
    -259,   315,   902,   902,   727,   844,   907,   908,    61,   315,
     535,   565,  1180,   151,    21,   152,  1181,  1360,   738,   918,
    -259,    20,   267,   244,  1371,   828,  1489,   248,   250,    30,
    1183,   730,   529,    19,   747,   829,   538,  1464,   873,   874,
    1388,    21,  1609,   548,   880,  1179,  1227,    37,   555,   589,
     228,   313,  1180,    -2,  1534,   561,  1181,   339,   344,   354,
    1182,   519,    20,   491,  1551,    38,   416,     8,   315,   339,
    1183,   430,  1553,   580,  1555,     8,   733,   773,   560,     8,
     563,    58,    21,  1558,   268,   316,     8,   534,   362,   352,
     352,   556,   485,   731,   234,   875,   268,    92,   536,   566,
     446,   626,  1240,  1184,   227,   227,     8,   100,   100,  1174,
    1337,   502,   953,   681,   800,  1557,   458,   876,  1561,  1095,
     268,   461,    92,    92,    92,   146,    92,   633,    92,   781,
    1448,   229,   527,  1451,   583,   164,  1452,   830,   790,   164,
     447,   164,    43,  1184,   674,  1482,   685,   687,   695,  1461,
     945,   693,   469,   693,  1518,   472,   473,   474,   475,  1352,
    1257,   702,     5,     6,   715,     7,   470,   471,   724,   783,
     508,   782,  1551,   504,   816,   509,   511,  1342,   705,   678,
    1553,     8,  1555,  1349,  1180,   785,   358,   354,  1181,   313,
     313,  1241,  1182,   792,   331,   707,   709,  1254,   802,   706,
     708,    46,  1183,  1265,  1133,  -261,   549,   147,  1263,   821,
     885,  -261,  1386,   804,   956,   339,  1428,   339,   736,   886,
     979,  1514,   584,   817,  1408,  -261,    25,   102,  1475,   579,
     354,   354,   675,   103,   919,   566,   931,   268,   795,   796,
     797,   106,   354,   920,  1527,  1528,   631,  1529,    26,   703,
     640,  1530,    60,   818,   823,    84,   725,   536,  1294,   165,
      61,   640,   640,   640,   640,   949,   812,   951,   166,     8,
     929,   689,   690,   536,   748,  1184,   282,   691,     8,   933,
    1240,   793,   774,   775,    64,  1536,   566,   692,    20,    65,
      66,   289,    67,   978,  1393,   234,   947,   788,   416,  1603,
    1442,   566,   155,  1409,   957,   700,  1180,   803,    21,  -710,
    1181,   584,  1593,    73,   321,   339,  1618,   998,   711,  1596,
     354,   446,   352,  -158,  1183,    92,   352,   972,   813,   315,
    1000,   101,  1018,  1019,     8,   227,   833,  1001,   164,  1315,
     737,   584,   793,  -158,    20,   352,   845,   846,    92,    92,
     315,     8,   780,   107,  1040,   728,   877,   322,   675,   889,
    1023,   164,   164,   279,    21,   451,   809,   793,   628,  1379,
      20,  -710,   290,  1661,   108,   934,   935,   936,   742,   743,
      20,   761,   120,   761,   566,  1024,  1082,  1025,  1610,   242,
      21,   576,   725,   766,  1005,    61,   273,  1184,   274,   945,
      21,  1617,   693,  1599,   146,   999,   794,   710,  1211,  1032,
    1688,   354,   313,   316,  1305,  1103,  1393,   313,   764,   313,
     354,   975,   815,   150,  1033,  1002,   -58,   974,   960,   960,
    1034,  1038,  1046,   327,   316,  1137,   799,  1042,  1044,  1713,
     900,  1715,     8,  1718,   339,   494,   452,   161,   536,   339,
    1138,    20,   352,   890,   891,   892,   810,   811,   643,  1444,
    1102,   653,   982,   354,  1139,  1154,  1200,   354,   948,     8,
     950,    21,  1287,   644,   983,  1287,   831,   354,  1287,  1287,
    1297,  1298,  1287,  1287,  1287,  1302,   354,   354,   354,   847,
    1215,  1035,  1309,  1344,  1741,  1686,  1180,   793,   198,  1012,
    1181,  1350,  1240,  1476,   930,  1447,  1148,   200,  1150,   836,
    1109,   202,   793,  1531,  1183,   203,    44,   205,   793,   566,
     584,  1428,   640,   793,   837,   640,   268,   640,   640,   640,
     640,   640,   640,   640,   890,   891,   892,  1173,   793,  1094,
    1353,  1455,   640,   640,   640,   640,   640,    45,  1495,    20,
    1496,  1074,   793,   725,  1201,  1503,  1504,  1505,   416,  1507,
    1508,  1509,  1510,   218,  1470,  1484,  1380,  1180,   740,    21,
     700,  1181,   700,   986,  1532,  1182,   689,   690,   793,   755,
     793,  1201,   691,   217,   833,  1183,   946,  1184,   315,  1201,
    1427,  1535,   692,   954,  1239,     8,  1565,   354,   776,   446,
    1020,   970,   695,   446,   446,   693,  1021,   840,   446,   354,
    1598,   859,   227,  1280,   227,   306,   321,   550,  1336,   162,
     860,   980,     8,   347,   865,    20,    44,  1212,  1201,  1201,
    1140,   315,   635,   636,   761,  1269,  1515,  1240,     8,     8,
     761,   508,    65,    66,  1240,    21,  1006,  1007,  1008,   741,
     346,  1652,  1471,  1485,  1050,   879,  1017,   493,  1184,   322,
     268,   219,  1471,  1611,   438,  1027,    93,   354,  1620,   354,
    1622,  1210,   551,   -69,   552,   555,   -69,   -69,  1474,   777,
     838,   653,    94,   364,  1037,  1180,  1274,  1022,  1112,  1181,
    1113,   230,  1338,  1182,  -259,   839,   579,   -69,  1471,  1242,
    -259,    93,   -69,  1183,  -791,  -791,  1175,  1049,   -69,    65,
      66,   -69,   -69,  1240,  -259,   316,  1634,   245,  1588,  1589,
     991,   992,  1129,  1590,  1642,   354,  1655,   880,  1260,  -259,
    -259,  1078,   -69,  1072,     8,  1266,  1318,   -69,  1081,  -791,
    -791,  1355,  1477,     8,  1204,  1207,  1028,  1180,  1134,  1097,
     100,  1181,   268,  -261,   246,  1182,   239,   240,    41,  -261,
    1094,  1100,   993,   640,   640,  1183,  -791,  1413,   993,   693,
    1373,   945,  1735,  -261,   693,   251,  1184,  1415,  1153,   640,
     254,  1443,   362,  1656,  -259,  1487,  -259,  1478,   231,   232,
     111,     8,  1511,     8,   880,  1587,  1689,   871,  1454,   809,
    1567,  -791,  1716,   872,   270,  1267,    20,  1569,  -259,  1261,
    1402,  1268,   315,   314,     8,  1136,   229,   268,   241,  1572,
     626,   700,   268,  1144,  -130,  1146,    21,     8,     8,   567,
     315,  1574,  1149,   568,  1151,  1152,  1717,  1425,  1184,   626,
       8,   550,   253,   234,  -130,   235,   256,   257,  1414,   527,
    1576,  1213,  1357,  1399,  1358,  1580,   653,  1403,  1416,   231,
     232,  1172,   268,  -791,  -791,  1083,  1488,   236,   169,    20,
    1582,   231,   232,  1512,  1178,   266,  1243,   173,   174,   175,
       8,  1568,   509,   653,  1426,  1192,  1193,  1584,  1570,    21,
     693,   124,   125,  1643,  1665,  1017,   551,    79,   552,   982,
    1573,  1017,  1017,  1728,  1666,   275,  1667,  1668,   353,   354,
     276,   983,  1575,  1669,   316,  1670,   235,  1733,   419,  1216,
      20,  1473,   260,   254,   127,  -791,   234,  1679,   235,  -123,
     287,  1577,  1672,   185,   186,   315,  1581,   305,   236,  1674,
      21,  1675,   271,   272,  1290,   346,  1676,     8,  1677,  -123,
     236,  1583,     8,  1078,  1720,   293,   189,  1721,  1134,  1078,
    1722,   354,  1003,    20,   231,   232,  1374,  1739,  1585,   288,
    1097,   291,   693,   693,  1644,  1573,    51,   693,  1377,   292,
     354,   293,    52,    21,   640,  1573,   111,  1573,  1573,   640,
     277,  1723,   478,  1329,  1573,    53,  1671,   510,   640,   297,
     298,   640,   284,   286,   640,   640,   640,   640,   640,   640,
     640,   640,   294,  1673,     8,  1736,   861,   765,  1308,   316,
    1573,   235,  1573,  1742,   700,   862,  1744,  1573,  1746,  1678,
    1748,  1316,  1750,  1317,  1752,  1573,   353,  1539,  1573,  1320,
    1088,  1573,   433,   236,  1326,  1328,    63,    64,  1740,   544,
     233,    20,    65,    66,   234,    67,  1330,   434,   412,    68,
      69,   689,   690,   435,    70,   453,    20,   691,  1104,    20,
     528,    21,  1105,    71,    72,   315,    73,   692,   459,   353,
     353,  1083,   112,   305,  1347,  1083,    21,  1347,   544,    21,
     344,   627,  1624,   462,  1626,  1627,  1600,   295,   466,  1631,
    1472,  1633,    27,  1480,  1083,  1637,   220,  1639,  -193,  1641,
      20,   113,   296,    20,  -193,  1290,   483,   114,   115,   484,
     284,  1614,   231,   232,     8,  -193,  1378,   252,  -193,    20,
      21,  1078,    61,    21,  1434,   222,   744,  1089,   501,   284,
     297,   298,   689,   690,   109,  1394,  1396,   567,   691,    21,
    1479,  1203,   544,  1282,   849,    20,   640,  1283,   692,   640,
     640,  1147,   467,   303,   477,  -501,   540,  -501,   850,   353,
     479,    74,    75,  1659,    20,    21,   480,   234,   304,   235,
     695,   481,  -501,   693,  -501,  -501,   640,   640,   700,   945,
    -501,   305,   693,   700,    21,  1700,   825,  1702,  -193,   482,
     826,   236,  1707,  -501,   827,     8,   486,    39,   253,   220,
     833,   513,    20,    20,   514,   515,  1690,   488,  -501,  -501,
    -501,  -501,  -501,  -501,  -501,  1556,  -501,  -501,  -501,  -501,
    -501,  -501,    21,    21,  -501,   487,  -501,   851,   865,   112,
    1538,    20,  1368,   231,   232,   865,  1372,  1506,   489,  1083,
      20,   516,   517,   518,   437,  1434,   492,  1378,   869,    61,
     353,    21,  1083,   495,   870,  1078,   346,  1483,   258,   353,
      21,  1083,  1405,  1616,   114,   115,  1406,   544,   544,   544,
    -798,  -501,   513,    63,    64,   514,   515,   586,    20,    65,
      66,  -798,    67,   234,   233,    20,    68,    69,   234,   528,
     235,    70,  1051,   513,   734,   503,   514,   515,    21,   700,
      71,    72,   353,    73,    20,    21,   353,   689,   690,   505,
    1615,   280,   236,   691,    20,    20,   353,   333,   714,   335,
     145,   148,    20,   692,    21,   353,   353,   353,  -205,   346,
      20,   305,   305,   512,    21,    21,  1556,   522,   833,   751,
     340,   354,    21,  1078,  1378,  1378,   867,   868,  -205,   944,
      21,    20,   537,  1540,   355,   315,   354,    65,    66,  1559,
     865,  1052,  1053,   145,    20,  -116,  1658,   539,   145,   559,
       8,    21,   689,   690,   261,   263,   424,  1083,   691,    65,
      66,   700,   700,  1397,    21,  -116,   700,    20,   692,   346,
     148,  1438,  1144,   562,   689,   690,  1635,   564,    74,    75,
     691,   520,   521,   428,   544,   544,   544,    21,   807,   808,
     692,  1604,  1601,  1737,    20,  1078,   571,  1542,   596,   597,
     598,  1543,  1544,  1545,   464,   465,   820,   286,  1483,   606,
    1546,   572,   353,  1547,    21,     8,   353,   567,   431,   654,
     657,  1080,  1463,    20,  1556,  1463,  1463,   786,   353,  -199,
      20,    20,    20,   366,   573,   865,   865,     8,   865,   833,
    1366,  1367,   865,    21,     5,     6,   574,     7,   367,  -199,
      21,    21,    21,  1648,  1083,   926,   927,   354,  1078,   354,
     963,  1654,   888,     8,   585,  1483,  -791,  -791,   586,  1660,
    -791,  -791,  -791,  -791,   588,  -791,   964,    64,  1177,  -791,
    -791,    20,    65,    66,  -791,    67,   353,   590,   353,    20,
     629,  -791,   634,  -791,  -791,   544,  -791,   368,   145,   632,
     544,    21,  1483,   641,   642,   145,    73,   145,   645,    21,
      65,    66,  1691,  1083,  1400,   646,   647,   648,   369,   183,
     370,   371,   372,   373,   374,   375,   376,   649,    20,   650,
    1712,  1604,   714,  1604,  1078,  1604,   659,   377,    20,   660,
     661,   662,  1273,  1719,   353,   378,   379,   663,    21,   667,
     668,   380,   381,   382,   383,   384,   385,   386,    21,    20,
     669,   672,  1724,   345,   220,   354,   670,   221,    20,   673,
     988,   988,   700,  1712,   671,  1647,   305,   677,   680,    21,
     354,   700,   686,   688,   346,   701,  1604,     8,    21,  1083,
     704,  -791,  -791,   222,  1155,    31,   712,    32,   284,    33,
      63,    64,   719,   721,  1156,    20,    65,    66,   723,    67,
     726,   729,   751,    68,    69,  1031,   749,   220,    70,   750,
     763,    20,   753,   767,   770,    21,   973,    71,    72,   771,
      73,   764,   768,  1083,   772,  1043,  1045,   765,   769,   544,
     784,    21,   791,  1048,  1291,   824,   222,  1295,  1296,  1056,
     814,  1299,  1300,  1301,   822,  1060,  1061,   834,  1063,   835,
    1065,   841,  1066,   842,  1068,  1361,   843,   848,   863,  1070,
     884,    63,    64,   887,   880,   899,    20,    65,    66,   909,
      67,   910,   911,   544,    68,    69,   912,   913,  1086,    70,
     914,  1091,   962,   976,  1083,   938,    21,   939,    71,    72,
     940,    73,   958,   901,   145,   145,   905,   906,  1110,   955,
     985,   984,   997,  1009,   987,  1010,  1011,   777,   915,   916,
     917,  1026,   145,  1039,  1057,    74,    75,  1069,   353,  1062,
    1047,  1058,  1064,  1079,  1114,  1087,  1115,  1071,  1101,  1106,
    1108,  1113,  1117,  1130,  1118,  1164,  1362,  1145,  1165,  1171,
    1196,  1059,  1119,  1190,  1120,  1121,  1194,    63,    64,  1141,
    1142,   145,    20,    65,    66,  1122,    67,  1202,  1123,  1197,
      68,    69,   776,  1124,  1220,    70,   284,  1191,  1214,  1162,
     627,  1125,    21,  1126,    71,    72,  1127,    73,  1128,  1218,
    1166,  1169,  1167,  1170,  1028,  1221,    74,    75,  1222,   627,
    1229,  1236,  1252,  1255,  1264,  1259,  1270,   436,  1271,  -105,
    1272,   367,  -105,  -105,  -105,  1278,  1276,  1277,  -105,  -105,
    -105,  1288,  -105,  1303,  1304,  1306,  -105,  -105,  1312,  1313,
    1195,  -105,  1307,  1319,  1321,  1322,  1323,  1324,  -105,  1332,
    -105,  -105,  1333,  -105,  -105,  -105,  -105,  1341,  1345,   284,
    1351,  1354,  -105,  -105,  -105,  -105,  -105,  -105,   883,  -105,
     807,  1334,  1027,  -105,  1369,  1356,  -105,  -105,  1383,  -105,
    1384,  -105,  -105,  1223,  1224,  1387,  1407,  -105,  1410,  1228,
    1412,  1439,    74,    75,  1445,  -105,  -105,  -105,  -105,  1440,
    -105,  -105,  1156,  -105,  1437,  1417,  1418,  1203,  1453,  1419,
    1456,  1420,  1421,  1422,  1457,  1458,  1256,  -105,  1258,  -105,
    -105,  1649,  -105,  -105,  -105,  1459,   593,    63,    64,  1423,
    1424,  1486,    20,    65,    66,  1388,    67,  1490,  1492,  1497,
      68,    69,  -105,  1499,  -105,    70,  1513,  1397,  -105,  -105,
    1293,  1293,    21,  1400,    71,    72,  1522,    73,  1523,  1524,
    1525,  -447,  1526,  1537,  1560,   145,  1541,  1564,  1612,  1578,
    1566,  1579,  1586,    85,  1597,  -791,  1602,  1605,  -791,  1606,
    1607,  1613,   145,  1619,  -791,  1621,  1623,  1625,  1628,  1630,
    1632,  1636,  1638,  1640,  1646,  1662,  1680,  1684,  1692,  1708,
    1725,   284,  1645,  1663,  -791,  1664,  1681,  1693,  1694,  1695,
    -791,  -791,  -791,  1696,  1697,  1698,  1699,  1701,  -791,  -791,
    -791,  -791,  -791,  -791,  1703,   -54,  1704,  1705,  1706,  -791,
    1709,  1729,  -791,  -791,  1348,  -791,  1730,  1731,   145,   145,
    1732,  1738,  1753,   544,   259,  1743,  1745,  1747,    18,   476,
    1331,   145,    74,    75,  1749,   104,  1056,  -791,  1056,  -791,
    1751,   732,   284,   284,   284,   105,   192,  1370,   341,   952,
     805,   365,  1346,  -791,   928,  -791,  -791,  1481,  -791,    85,
    -791,  -791,  1262,   193,  -791,   194,  1381,   676,  1382,   264,
    -791,  1098,  1385,   456,  1533,   789,   959,   787,  -791,  1441,
       8,   961,  1325,  1517,  1327,   762,  1591,   158,  1339,  1343,
    -791,   971,  1004,  1595,  1734,  1467,  -791,  -791,  -791,   145,
    1132,   666,  1281,  1404,  -791,  -791,  -791,  -791,  -791,  -791,
    1629,   904,  1726,  1116,    20,  -791,  1494,  1411,  -791,  -791,
     990,  -791,   284,  1435,  1436,  1041,  1029,  1217,   281,    62,
     883,    36,     0,  1162,    21,     0,     0,  1169,     0,   346,
       0,     0,     0,  -791,     0,  -791,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  -791,
     353,  -791,  -791,     0,  -791,     0,  -791,  1542,   596,   597,
     598,  1543,  1544,  1545,   284,   627,     0,   284,   284,   606,
    1546,     0,     0,  1547,  -791,     0,     8,    63,    64,     0,
       0,     0,    20,    65,    66,     0,    67,     0,     0,   145,
      68,    69,     0,     0,     0,    70,     0,     0,     0,   592,
       0,   593,    21,     0,    71,    72,     0,    73,     0,     0,
       0,  1293,     0,  1293,     0,  1498,     0,  1502,  1293,  1293,
    1293,     0,  1293,  1293,  1293,  1293,     0,     0,     0,     0,
       0,     0,   145,   284,     0,     0,     0,     0,     0,     0,
    1084,  1521,     0,     0,   145,     0,   145,     0,     0,   145,
       0,     0,     0,     0,     0,     0,     0,   145,     0,     0,
       0,   145,   145,     0,   145,     0,   145,   145,     0,   145,
       0,   145,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   854,     0,   627,   145,   353,     0,
       0,  1563,   145,  1563,     0,  -791,     0,  -791,   855,     0,
       0,     0,    74,    75,     0,     0,     0,     0,     0,     0,
       0,   145,  -791,     0,  -791,  -791,     0,     0,     0,     0,
    -791,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  -791,     0,     0,     0,     0,     0,     0,
       0,     0,   145,   145,     0,     0,     0,     0,  -791,  -791,
    -791,  -791,  -791,  -791,  -791,   856,  -791,  -791,  -791,  -791,
    -791,  -791,     0,   145,  -791,  1563,  -791,  1563,     0,  1502,
     145,  1502,  1502,     0,  1502,     0,  1502,     0,  1502,  1293,
       0,     0,  1502,     0,  1502,     0,  1502,  1293,     0,     0,
       0,     0,     0,     0,   627,     0,   145,     0,     0,     0,
       0,     0,   247,  1650,  -791,     0,  1651,  -791,  1653,   353,
       0,     8,     0,  -791,  1657,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   145,   145,     0,     0,     0,   145,
       0,     0,     0,  -791,     0,     0,     0,     0,     0,  -791,
    -791,  -791,     0,     0,     0,     0,     0,  -791,  -791,  -791,
    -791,  -791,  -791,     0,     0,     0,     0,   145,  -791,   145,
       0,  -791,  -791,     0,  -791,     0,     0,     0,     0,     0,
    1398,     0,  1502,     0,  1502,  1401,     0,     0,     0,  1502,
       0,     0,     0,     0,     0,  1714,  -791,     0,  -791,     0,
       0,     0,     0,     0,   145,     0,     0,     0,     0,     0,
       0,     0,  -791,     0,  -791,  -791,   249,  -791,  -791,  -791,
       0,  -791,     0,     0,     0,     0,     0,  -791,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  -791,     0,     8,
       0,     0,     0,     0,     0,     0,     0,  -791,     0,     0,
       0,     0,     0,  -791,  -791,  -791,     0,     0,     0,   145,
       0,  -791,  -791,  -791,  -791,  -791,  -791,     0,     0,     0,
       0,     0,  -791,     0,     0,  -791,  -791,     0,  -791,     0,
       0,   145,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   145,   145,     0,     0,   145,     0,     0,     0,
    -791,     0,  -791,     0,     0,     0,     0,     0,     0,     0,
    1491,     0,     0,  1493,  1401,     0,  -791,     0,  -791,  -791,
    1359,  -791,     0,  -791,     0,     0,     0,     0,     0,   864,
       0,  -791,     0,  -791,     0,     0,     0,     0,     0,     0,
       0,  -791,     0,     8,     0,     0,   145,   145,  -791,     0,
    -791,  -791,     0,     0,     0,     0,  -791,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  -791,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  -791,  -791,  -791,  -791,  -791,  -791,
    -791,     0,  -791,  -791,  -791,  -791,  -791,  -791,     0,     0,
    -791,     0,  -791,   357,     0,     0,     0,     0,     0,   145,
       0,     0,     0,   145,  -791,     0,  -791,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  -791,   145,  -791,  -791,     0,     0,     0,     0,  -791,
       0,     0,     0,     0,     0,     0,     0,     8,     0,     0,
       0,   941,  -791,  -791,     0,     0,  -791,     0,     0,     0,
       0,     0,  -791,     0,     0,   942,     0,  -791,  -791,  -791,
    -791,  -791,  -791,  -791,   145,  -791,  -791,  -791,  -791,  -791,
    -791,     0,  -791,  -791,     0,  -791,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  -791,  -791,  -791,  -791,
    -791,  -791,     0,     0,     0,     0,     0,  -791,     0,     0,
    -791,  -791,     0,  -791,     0,   689,   690,     0,     0,     0,
       0,   691,     0,     0,   426,     0,  -376,     0,     0,  -376,
       8,   692,     0,     0,     0,  -376,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  -791,  -376,     0,     0,  -791,     0,
       0,   145,   145,     0,   145,     0,     0,     0,   145,  -376,
    -376,  -376,  -376,  -376,  -376,     0,  -791,     0,     8,     0,
    -376,     0,     0,  -376,  -376,     0,  -376,     0,  -376,  -376,
       0,     0,     0,     0,  -376,     0,     0,  1314,     0,  -791,
       0,     0,  -791,     0,  -376,    63,    64,     0,  -791,     0,
      20,    65,    66,     0,    67,     0,     0,     0,    68,    69,
       0,     0,     0,    70,     0,   145,     0,  -376,  -791,     0,
      21,  -376,    71,    72,     0,    73,     0,     0,     0,     0,
       0,     0,  -791,  -791,  -791,  -791,  -791,  -791,     0,  -376,
       0,  -376,     0,  -791,     0,     0,  -791,  -791,     0,  -791,
       0,   689,   690,     0,     0,     0,     0,   691,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   692,    63,    64,
       0,     0,     0,    20,    65,    66,     0,    67,     0,     0,
       0,    68,    69,  1052,  1053,     0,    70,     0,     0,     0,
    -791,     0,     0,    21,  -791,    71,    72,     0,    73,     0,
       0,     0,     0,     0,    63,    64,     0,     0,     0,    20,
      65,    66,  -791,    67,     8,     0,     0,    68,    69,     0,
      74,    75,    70,     0,     0,     0,     0,     0,     0,    21,
       0,    71,    72,     0,    73,     0,     0,     0,     0,    63,
      64,  1462,     0,  1362,    20,    65,    66,     0,    67,     0,
       0,     0,    68,    69,     0,     0,     0,    70,     0,     0,
       0,     0,     0,     0,    21,     0,    71,    72,     0,    73,
       0,     0,     0,     0,     0,     0,     0,  1465,     0,  1362,
       0,     0,     0,    63,    64,     0,     0,     0,    20,    65,
      66,     0,    67,    74,    75,     0,    68,    69,     0,     0,
       0,    70,     0,     0,     0,     0,     0,     0,    21,     0,
      71,    72,  1466,    73,  1362,     0,     0,     0,    63,    64,
       0,     0,     0,    20,    65,    66,     0,    67,     0,    74,
      75,    68,    69,     0,     0,     0,    70,     0,     0,     0,
       0,     0,     0,    21,     0,    71,    72,     0,    73,     0,
       0,     0,     0,     0,     0,     0,  1516,     0,  1431,     0,
       0,    63,    64,     0,    74,    75,    20,    65,    66,     0,
      67,     0,   822,     0,    68,    69,     0,     0,     0,    70,
       0,     0,     0,     0,     0,     0,    21,     0,    71,    72,
       0,    73,    63,    64,     0,     0,  1156,    20,    65,    66,
       0,    67,     0,     0,     0,    68,    69,     0,    74,    75,
      70,     0,     0,     0,     0,     0,     0,    21,     0,    71,
      72,     0,    73,    63,    64,     0,     0,     0,    20,    65,
      66,     0,    67,     0,     0,     0,    68,    69,     0,   146,
       0,    70,     0,    74,    75,     0,     0,     0,    21,     0,
      71,    72,     0,    73,    63,    64,     0,     0,     0,    20,
      65,    66,     0,    67,     0,     0,     0,    68,    69,     0,
       0,     0,    70,     0,     0,     0,     0,     0,     0,    21,
       0,    71,    72,     0,    73,     0,    74,    75,     0,     0,
       0,     0,     0,     0,    63,    64,     0,     0,  1362,    20,
      65,    66,     0,    67,  1520,     0,     0,    68,    69,     0,
       0,     0,    70,     0,     0,     0,     0,    74,    75,    21,
       0,    71,    72,     0,    73,    63,    64,     0,     0,  1431,
      20,    65,    66,     0,    67,     0,     0,     0,    68,    69,
       0,     0,     0,    70,     0,     0,     0,     0,    74,    75,
      21,     0,    71,    72,     0,    73,    63,    64,     0,     0,
       0,    20,    65,    66,     0,   525,     0,     0,     0,    68,
      69,     0,     0,     0,    70,     0,     0,     0,     0,    74,
      75,    21,     0,    71,    72,     0,    73,    63,    64,     0,
       0,     0,    20,    65,    66,     0,   921,     0,     0,     0,
      68,    69,     0,     0,     0,    70,     0,     0,     0,     0,
       0,     0,    21,     0,    71,    72,     0,    73,     0,    74,
      75,     0,     0,     0,     0,     0,     0,    63,    64,     0,
       0,     0,    20,    65,    66,     0,  1131,     0,     0,     0,
      68,    69,     0,     0,     0,    70,     0,     0,     0,     0,
      74,    75,    21,     0,    71,    72,     0,    73,     0,     0,
     167,     0,     0,   168,     0,     0,     0,     0,     0,    20,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,    74,    75,     0,     0,     0,     0,     0,     0,    21,
       0,     0,     0,     0,     0,   169,   170,   171,     0,     0,
       0,     0,     0,   172,   173,   174,   175,   176,   177,     0,
       0,     0,    74,    75,   178,     0,     0,   179,   180,     0,
     181,  1468,     0,     0,    65,    66,     0,     0,     0,     0,
       0,   128,   129,   130,   131,   132,   133,   134,   135,   136,
       0,     0,   182,     0,   183,   137,   138,     0,     0,     0,
       0,     0,    74,    75,     0,     0,     0,     0,   184,     0,
     185,   186,     0,   187,  1519,   188,     0,    65,    66,     0,
       0,     0,     0,     0,   128,   129,   130,   131,   132,   133,
     134,   135,   136,   189,     0,     0,     0,  1727,   137,   138,
      65,    66,     0,     0,     0,     0,     0,   128,   129,   130,
     131,   132,   133,   134,   135,   136,     0,     0,     0,     0,
     139,   137,   138,     0,     0,     0,     0,   167,     0,     0,
     168,     0,     0,     0,     0,     0,    20,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   140,   141,   142,   143,     0,    21,     0,     0,     0,
       0,     0,     0,   139,     0,     0,     0,     0,     0,     0,
     172,   173,   174,   175,   176,   177,     0,     0,     0,     0,
       0,   178,     0,     0,   179,   180,   139,   181,     0,     0,
       0,     0,     0,     0,   140,   141,   142,   143,     0,     0,
     496,   497,   498,     0,     0,     0,   499,   128,   129,   130,
     131,   132,   133,   134,   135,   136,     0,   140,   141,   142,
     143,   137,   138,     0,     0,     0,     0,     0,   186,     0,
       0,     0,   188,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   496,   497,   498,     0,     0,
     189,   754,   128,   129,   130,   131,   132,   133,   134,   135,
     136,     0,   496,   497,   498,     0,   137,   138,   977,   128,
     129,   130,   131,   132,   133,   134,   135,   136,     0,     0,
       0,     0,     0,   137,   138,     0,   139,   496,   497,   498,
       0,     0,     0,  1219,   128,   129,   130,   131,   132,   133,
     134,   135,   136,     0,     0,     0,     0,     0,   137,   138,
       0,     0,     0,     0,     0,     0,     0,   140,   141,   142,
     143,     0,     0,     0,     0,     0,     0,     0,   496,   497,
     498,   139,     0,     0,  1279,   128,   129,   130,   131,   132,
     133,   134,   135,   136,     0,    65,    66,   265,   139,   137,
     138,     0,   128,   129,   130,   131,   132,   133,   134,   135,
     136,     0,   140,   141,   142,   143,   137,   138,     0,     0,
       0,     0,     0,   139,     0,     0,     0,     0,     0,   140,
     141,   142,   143,     0,     0,     0,     0,    65,    66,     0,
       0,     0,     0,     0,   128,   129,   130,   131,   132,   133,
     134,   135,   136,     0,   140,   141,   142,   143,   137,   138,
       0,   269,     0,     0,   139,    65,    66,   490,     0,     0,
       0,     0,   128,   129,   130,   131,   132,   133,   134,   135,
     136,   139,     0,     0,     0,     0,   137,   138,     0,     0,
       0,     0,     0,     0,     0,   140,   141,   142,   143,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   140,   141,   142,   143,     0,    65,    66,   746,
       0,     0,     0,   139,   128,   129,   130,   131,   132,   133,
     134,   135,   136,     0,     0,     0,     0,     0,   137,   138,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   139,     0,     0,   140,   141,   142,   143,    65,    66,
       0,     0,  1111,     0,     0,   128,   129,   130,   131,   132,
     133,   134,   135,   136,     0,     0,     0,     0,     0,   137,
     138,     0,   140,   141,   142,   143,   496,   497,   498,     0,
       0,     0,     0,   128,   129,   130,   131,   132,   133,   134,
     135,   136,     0,   139,    65,    66,     0,   137,   138,     0,
     754,   128,   129,   130,   131,   132,   133,   134,   135,   136,
       0,     0,     0,     0,     0,   137,   138,     0,     0,     0,
       0,     0,     0,     0,   140,   141,   142,   143,     0,    65,
      66,     0,     0,  1230,   139,     0,   128,   129,   130,   131,
     132,   133,   134,   135,   136,     0,     0,     0,     0,     0,
     137,   138,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   139,     0,     0,   140,   141,   142,   143,     0,
       0,     0,     0,     0,     0,     0,     0,    65,    66,     0,
     139,  1231,     0,     0,   128,   129,   130,   131,   132,   133,
     134,   135,   136,   140,   141,   142,   143,     0,   137,   138,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   140,   141,   142,   143,   139,    65,    66,     0,     0,
    1232,     0,     0,   128,   129,   130,   131,   132,   133,   134,
     135,   136,     0,     0,     0,     0,     0,   137,   138,     0,
       0,     0,     0,     0,     0,     0,   140,   141,   142,   143,
       0,     0,     0,     0,     0,     0,     0,    65,    66,     0,
       0,  1233,     0,   139,   128,   129,   130,   131,   132,   133,
     134,   135,   136,     0,     0,     0,     0,     0,   137,   138,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   140,   141,   142,   143,     0,    65,
      66,     0,   139,  1234,     0,     0,   128,   129,   130,   131,
     132,   133,   134,   135,   136,     0,     0,     0,     0,     0,
     137,   138,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   140,   141,   142,   143,    65,    66,     0,
       0,  1237,     0,   139,   128,   129,   130,   131,   132,   133,
     134,   135,   136,     0,     0,     0,     0,     0,   137,   138,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   140,   141,   142,   143,     0,    65,
      66,     0,     0,  1238,     0,   139,   128,   129,   130,   131,
     132,   133,   134,   135,   136,     0,     0,     0,     0,     0,
     137,   138,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   140,   141,   142,   143,
      65,    66,     0,   139,  1310,     0,     0,   128,   129,   130,
     131,   132,   133,   134,   135,   136,     0,     0,     0,     0,
       0,   137,   138,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   140,   141,   142,   143,     0,    65,
      66,     0,     0,  1311,     0,   139,   128,   129,   130,   131,
     132,   133,   134,   135,   136,     0,     0,     0,     0,     0,
     137,   138,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   140,   141,   142,   143,
      65,    66,     0,     0,     0,     0,   139,   128,   129,   130,
     131,   132,   133,   134,   135,   136,     0,     0,     0,     0,
       0,   137,   138,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   140,   141,   142,
     143,     0,    65,    66,     0,   139,  1592,     0,     0,   128,
     129,   130,   131,   132,   133,   134,   135,   136,     0,     0,
       0,     0,     0,   137,   138,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   140,   141,   142,   143,
      65,    66,     0,     0,  1682,  1571,   139,   128,   129,   130,
     131,   132,   133,   134,   135,   136,     0,     0,     0,     0,
       0,   137,   138,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   140,   141,   142,
     143,     0,    65,    66,     0,     0,  1683,     0,   139,   128,
     129,   130,   131,   132,   133,   134,   135,   136,     0,     0,
       0,     0,     0,   137,   138,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   367,     0,     0,   140,
     141,   142,   143,    65,    66,     0,   139,  1685,     0,     0,
     128,   129,   130,   131,   132,   133,   134,   135,   136,     0,
      65,    66,     0,     0,   137,   138,     0,   128,   129,   130,
     131,   132,   133,   134,   135,   136,     0,   140,   141,   142,
     143,   137,   138,     0,     0,   368,     0,     0,   139,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   665,   183,   370,   371,
     372,   373,   374,   375,   376,     0,     0,     0,     0,   140,
     141,   142,   143,     0,     0,   377,     0,     0,     0,   139,
      20,     0,   591,   378,   379,     0,     0,     0,     0,   380,
     381,   382,   383,   384,   385,   386,   139,   592,     0,   593,
      21,     0,     0,     0,     0,   346,   169,   239,   240,     0,
     140,   141,   142,   143,  1243,   173,   174,   175,   594,     0,
       0,     0,     0,     0,     0,     0,     0,   140,   141,   142,
     143,     0,     0,   595,   596,   597,   598,   599,   600,   601,
       0,   602,   603,   604,   605,   606,   607,     0,    20,   608,
     591,   609,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   592,     0,   593,    21,   241,
       0,   185,   186,   346,   169,     0,     0,     0,     0,     0,
       0,     0,  1243,   173,   174,   175,   594,     0,     0,     0,
       0,     0,     0,     0,   189,    20,     0,     0,     0,     0,
       0,   595,   596,   597,   598,   599,   600,   601,     0,   602,
     603,   604,   605,   606,   607,    21,     0,   608,     0,   609,
     346,   169,     0,     0,     0,     0,     0,     0,     0,  1243,
     173,   174,   175,     0,     0,     0,     0,     0,     0,   185,
     186,     0,     0,     0,     0,     0,     0,     0,  1542,   596,
     597,   598,  1543,  1544,  1545,     0,     0,    20,     0,   591,
     606,  1546,   189,     0,  1547,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   592,     0,   593,    21,     0,     0,
       0,     0,   346,     0,     0,     0,   185,   186,     0,     0,
       0,     0,     0,     0,     0,   594,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   189,
     595,   596,   597,   598,   599,   600,   601,     0,   602,   603,
     604,   605,   606,   607,     0,     0,   608,     0,   609
};

/* YYCONFLP[YYPACT[STATE-NUM]] -- Pointer into YYCONFL of start of
   list of conflicting reductions corresponding to action entry for
   state STATE-NUM in yytable.  0 means no conflicts.  The list in
   yyconfl is terminated by a rule number of 0.  */
static const unsigned char yyconflp[] =
{
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0
};

/* YYCONFL[I] -- lists of conflicting rule numbers, each terminated by
   0, pointed into by YYCONFLP.  */
static const short int yyconfl[] =
{
       0
};

static const short int yycheck[] =
{
       2,     3,   339,   427,   169,   692,   427,   842,   386,     6,
      92,     8,   169,   170,    67,   569,    73,   229,   871,    92,
     185,   575,   176,    92,   169,   304,   183,    92,   185,    92,
     287,   525,   222,   379,   380,   381,    33,    34,   176,   221,
     185,   793,  1081,   292,   346,   217,    83,    44,   144,    51,
      52,   168,   186,   171,   172,   958,   438,   171,   367,   455,
     867,   347,   348,  1483,    61,   230,   184,   367,   306,   307,
     184,  1483,  1185,  1483,     6,     1,  1374,    10,   378,   379,
     380,   381,    84,    12,  1012,    17,    88,    84,   852,   853,
    1018,  1019,    26,    15,   151,    92,   418,  1182,    95,    88,
     102,   103,  1187,    32,   106,   107,   584,   871,    10,     1,
       0,  1012,   230,    15,    12,     3,    88,  1018,  1019,    10,
      12,    18,   645,   646,   446,   603,   649,   650,    11,    18,
      10,    10,     8,    16,    32,    18,    12,  1230,   460,   662,
      32,    12,    36,   102,  1237,    16,  1396,   106,   107,   146,
      26,    36,   306,    10,    36,    26,   313,    15,    47,    48,
     101,    32,    84,   320,    98,     1,    98,    10,   325,   356,
      17,   168,     8,     0,  1472,   332,    12,   174,   175,   176,
      16,   299,    12,   279,  1604,    10,   183,   128,    18,   186,
      26,   188,  1604,   347,  1604,   128,   453,   519,   332,   128,
     334,   127,    32,   101,    98,   102,   128,    98,   100,   347,
     348,   329,   269,    98,   102,   104,    98,   219,    98,    98,
     217,   359,  1075,    99,   221,   222,   128,   229,   230,   981,
    1343,   288,   710,   420,   556,  1485,   233,   126,  1488,  1092,
      98,   238,   244,   245,   246,   128,   248,   365,   250,   528,
    1335,    98,   305,  1338,    10,   244,  1341,   128,   537,   248,
     219,   250,   129,    99,    10,  1389,   423,    10,   692,  1362,
     694,   692,   244,   694,    15,   247,   248,   249,   250,  1207,
    1087,    10,   109,   110,   438,   112,   245,   246,    10,    10,
     292,   529,  1712,   290,   580,   292,   293,     1,   432,   417,
    1712,   128,  1712,  1204,     8,    10,   178,   304,    12,   306,
     307,  1075,    16,    10,     1,   433,   434,  1081,    10,   433,
     434,    22,    26,    62,   921,    12,   323,    80,  1092,   586,
     639,    18,    62,    10,   716,   332,    10,   334,   456,   639,
     736,    15,    98,    10,    19,    32,     1,    10,  1387,   346,
     347,   348,    98,    16,   663,    98,   678,    98,   545,   546,
     547,    10,   359,   663,  1457,  1458,   363,  1460,    23,    98,
     367,  1464,    24,    10,    10,    16,    98,    98,  1120,     1,
      11,   378,   379,   380,   381,   707,    36,   709,    10,   128,
      10,    65,    66,    98,   490,    99,   149,    71,   128,    10,
    1253,    98,   520,   521,     8,    62,    98,    81,    12,    13,
      14,    17,    16,   735,  1267,   102,    10,   534,   415,  1543,
    1323,    98,    83,    98,    10,   427,     8,   561,    32,    36,
      12,    98,    14,    37,     3,   432,  1560,    10,   435,  1524,
     437,   438,   580,    12,    26,   447,   584,   726,    98,    18,
      10,    16,   774,   775,   128,   452,   594,    10,   447,  1146,
     457,    98,    98,    32,    12,   603,   604,   605,   470,   471,
      18,   128,   525,    10,   811,   447,   633,    46,    98,     1,
      10,   470,   471,   144,    32,    17,  1040,    98,   360,  1253,
      12,    98,    98,  1617,   111,   682,   683,   684,   470,   471,
      12,   503,    10,   505,    98,   784,    72,   786,  1547,     1,
      32,   813,    98,   510,   763,    11,    22,    99,    24,   943,
      32,  1560,   943,    62,   128,    98,    22,    39,  1022,    10,
    1654,   528,   529,   102,  1131,   881,  1389,   534,    98,   536,
     537,   731,   579,     8,    10,    98,    38,   729,   720,   721,
      10,    10,    10,   710,   102,    10,   553,   814,   815,  1683,
       1,  1685,   128,  1687,   561,    17,    98,    10,    98,   566,
      10,    12,   710,    95,    96,    97,   573,   574,     1,  1331,
     880,   881,   739,   580,    10,    10,    10,   584,   706,   128,
     708,    32,  1115,    16,   739,  1118,   593,   594,  1121,  1122,
    1123,  1124,  1125,  1126,  1127,  1128,   603,   604,   605,   606,
      10,   798,    10,    10,  1738,  1654,     8,    98,   700,   773,
      12,    10,  1475,  1387,   677,    17,   948,   700,   950,     1,
     887,   700,    98,  1468,    26,   700,    98,   700,    98,    98,
      98,    10,   639,    98,    16,   642,    98,   644,   645,   646,
     647,   648,   649,   650,    95,    96,    97,   979,    98,   871,
      10,    10,   659,   660,   661,   662,   663,   129,  1410,    12,
    1412,    84,    98,    98,    98,  1417,  1418,  1419,   675,  1421,
    1422,  1423,  1424,    17,    10,    10,    72,     8,    17,    32,
     692,    12,   694,   746,    10,    16,    65,    66,    98,    17,
      98,    98,    71,   700,   842,    26,   703,    99,    18,    98,
    1307,  1475,    81,   710,    84,   128,  1492,   714,    17,   716,
     777,   723,  1146,   720,   721,  1146,    17,   599,   725,   726,
      10,     1,   729,  1111,   731,   168,     3,    47,    59,    53,
      10,   738,   128,   176,   616,    12,    98,  1026,    98,    98,
     937,    18,    95,    96,   756,  1101,  1431,  1610,   128,   128,
     762,   763,    13,    14,  1617,    32,   763,   764,   765,    98,
      37,  1606,    98,    98,   827,    26,   773,   129,    99,    46,
      98,    10,    98,  1547,   217,    17,     1,   784,  1564,   786,
    1566,    17,   102,     8,   104,   952,    11,    12,    72,    98,
       1,  1101,    17,     1,   801,     8,  1106,    98,    17,    12,
      19,    98,    15,    16,    12,    16,   813,    32,    98,    84,
      18,     1,    37,    26,    39,    40,   983,   824,     8,    13,
      14,    11,    12,  1686,    32,   102,  1578,    10,  1513,  1514,
      57,    58,    26,  1518,  1586,   842,  1610,    98,    17,    47,
      48,   853,    32,   850,   128,    17,    17,    37,   855,    39,
      40,    17,     1,   128,  1018,  1019,    98,     8,   921,   871,
     872,    12,    98,    12,    10,    16,    39,    40,    26,    18,
    1092,   878,   756,   880,   881,    26,   101,    17,   762,  1310,
      84,  1315,  1727,    32,  1315,    10,    99,    17,   955,   896,
     116,    17,   100,    84,   102,    17,   104,    46,    47,    48,
      58,   128,    17,   128,    98,  1512,    84,    10,    59,  1473,
      17,   101,  1686,    16,    22,    10,    12,    17,   126,    98,
    1276,    16,    18,     1,   128,   932,    98,    98,   101,    17,
    1078,   943,    98,   940,    12,   942,    32,   128,   128,    18,
      18,    17,   949,    22,   951,   952,    84,  1303,    99,  1097,
     128,    47,   110,   102,    32,   104,   114,   115,    98,  1022,
      17,  1028,  1225,  1273,  1227,    17,  1276,  1277,    98,    47,
      48,   978,    98,    39,    40,   857,    98,   126,    38,    12,
      17,    47,    48,    98,   991,    17,    46,    47,    48,    49,
     128,    98,   999,  1303,  1304,  1002,  1003,    17,    98,    32,
    1431,    20,    21,    17,    17,  1012,   102,    46,   104,  1176,
      98,  1018,  1019,    84,    17,    26,    17,    17,   176,  1026,
      22,  1176,    98,    17,   102,    17,   104,  1724,     1,  1036,
      12,  1378,   115,   116,    73,   101,   102,  1644,   104,    12,
      18,    98,    17,   103,   104,    18,    98,    29,   126,    17,
      32,    17,    22,    23,  1117,    37,    17,   128,    17,    32,
     126,    98,   128,  1075,    17,    39,   126,    17,  1131,  1081,
      17,  1078,    46,    12,    47,    48,  1243,    17,    98,    16,
    1092,    17,  1513,  1514,    98,    98,    10,  1518,  1243,    98,
    1097,    39,    16,    32,  1101,    98,   254,    98,    98,  1106,
     139,  1708,   260,  1170,    98,    29,    98,    46,  1115,    44,
      45,  1118,   151,   152,  1121,  1122,  1123,  1124,  1125,  1126,
    1127,  1128,    10,    98,   128,  1732,     1,   101,  1135,   102,
      98,   104,    98,  1740,  1146,    10,  1743,    98,  1745,    98,
    1747,  1148,  1749,  1150,  1751,    98,   304,  1479,    98,  1156,
       1,    98,    98,   126,  1166,  1167,     7,     8,    98,   317,
      98,    12,    13,    14,   102,    16,  1173,    98,     1,    20,
      21,    65,    66,    98,    25,    18,    12,    71,    22,    12,
      16,    32,    26,    34,    35,    18,    37,    81,    46,   347,
     348,  1073,    82,    29,  1201,  1077,    32,  1204,   356,    32,
    1207,   359,  1568,     3,  1570,  1571,  1538,     1,    17,  1575,
    1377,  1577,     1,  1388,  1096,  1581,     8,  1583,    12,  1585,
      12,   111,    16,    12,    18,  1288,   265,   117,   118,   268,
     269,    46,    47,    48,   128,    29,  1243,    10,    32,    12,
      32,  1253,    11,    32,  1311,    37,    15,    98,   287,   288,
      44,    45,    65,    66,     1,  1267,  1268,    18,    71,    32,
    1388,    22,   420,     8,     1,    12,  1273,    12,    81,  1276,
    1277,    84,    38,     1,    10,    12,   315,    14,    15,   437,
      10,   132,   133,  1615,    12,    32,    10,   102,    16,   104,
    1724,    10,    29,  1724,    31,    32,  1303,  1304,  1310,  1733,
      37,    29,  1733,  1315,    32,  1671,     8,  1673,   102,    10,
      12,   126,  1678,    50,    16,   128,    22,     7,   476,     8,
    1468,     1,    12,    12,     4,     5,  1658,    24,    65,    66,
      67,    68,    69,    70,    71,  1483,    73,    74,    75,    76,
      77,    78,    32,    32,    81,    23,    83,    84,  1230,    82,
    1478,    12,  1234,    47,    48,  1237,  1238,  1420,    22,  1241,
      12,    41,    42,    43,    16,  1432,   129,  1374,    10,    11,
     528,    32,  1254,    19,    16,  1387,    37,  1389,   111,   537,
      32,  1263,     8,  1558,   117,   118,    12,   545,   546,   547,
      11,   128,     1,     7,     8,     4,     5,    18,    12,    13,
      14,    22,    16,   102,    98,    12,    20,    21,   102,    16,
     104,    25,    26,     1,   453,    10,     4,     5,    32,  1431,
      34,    35,   580,    37,    12,    32,   584,    65,    66,    10,
    1558,     1,   126,    71,    12,    12,   594,     1,    16,     1,
      79,    80,    12,    81,    32,   603,   604,   605,    12,    37,
      12,    29,    29,    10,    32,    32,  1604,    10,  1606,   498,
       1,  1468,    32,  1475,  1471,  1472,    22,    23,    32,   107,
      32,    12,    16,  1480,     1,    18,  1483,    13,    14,  1486,
    1362,    95,    96,   122,    12,    12,  1614,    10,   127,    10,
     128,    32,    65,    66,   118,   119,     1,  1379,    71,    13,
      14,  1513,  1514,    17,    32,    32,  1518,    12,    81,    37,
     149,    84,  1519,    10,    65,    66,  1579,    10,   132,   133,
      71,   301,   302,     1,   682,   683,   684,    32,   567,   568,
      81,  1543,  1539,    84,    12,  1547,    10,    65,    66,    67,
      68,    69,    70,    71,   240,   241,   585,   586,  1560,    77,
      78,    10,   710,    81,    32,   128,   714,    18,     1,     1,
       1,     1,  1363,    12,  1712,  1366,  1367,    16,   726,    12,
      12,    12,    12,     1,    98,  1457,  1458,   128,  1460,  1727,
    1232,  1233,  1464,    32,   109,   110,    98,   112,    16,    32,
      32,    32,    32,  1600,  1476,   670,   671,  1604,  1610,  1606,
       1,  1608,   641,   128,    22,  1617,     7,     8,    18,  1616,
      11,    12,    13,    14,    10,    16,    17,     8,     1,    20,
      21,    12,    13,    14,    25,    16,   784,    84,   786,    12,
      62,    32,    86,    34,    35,   793,    37,    65,   277,    64,
     798,    32,  1654,    16,    16,   284,    37,   286,    16,    32,
      13,    14,  1659,  1535,    17,    16,    16,    16,    86,    87,
      88,    89,    90,    91,    92,    93,    94,    16,    12,    16,
    1682,  1683,    16,  1685,  1686,  1687,    16,   105,    12,    16,
      16,    16,    16,  1690,   842,   113,   114,    16,    32,    10,
      22,   119,   120,   121,   122,   123,   124,   125,    32,    12,
      10,    10,  1709,    16,     8,  1712,    22,    11,    12,    10,
     749,   750,  1724,  1725,    22,  1597,    29,    22,    10,    32,
    1727,  1733,    10,   107,    37,    10,  1738,   128,    32,  1611,
      10,   132,   133,    37,     1,    52,    84,    54,   777,    56,
       7,     8,    29,    98,    11,    12,    13,    14,    16,    16,
      16,    16,   791,    20,    21,   794,    15,     8,    25,    15,
      98,    12,    19,    17,    17,    32,    17,    34,    35,    17,
      37,    98,    98,  1655,    17,   814,   815,   101,    98,   937,
      16,    32,    15,   822,  1118,    24,    37,  1121,  1122,   828,
      18,  1125,  1126,  1127,    18,   834,   835,    16,   837,    16,
     839,    16,   841,    16,   843,     1,    16,    16,    10,   848,
      22,     7,     8,    18,    98,    10,    12,    13,    14,    10,
      16,    10,    10,   981,    20,    21,    10,    10,   867,    25,
      10,   870,    10,    19,  1716,    16,    32,    16,    34,    35,
      16,    37,    16,   644,   483,   484,   647,   648,   887,    98,
     110,    38,    10,    22,    36,     5,     4,    98,   659,   660,
     661,    16,   501,    15,    17,   132,   133,    10,  1026,    80,
      19,    22,    80,    72,    18,    22,    98,    84,    24,    24,
      22,    19,   134,    22,    98,    17,    82,    84,    17,    17,
      17,     1,    98,    55,    98,    98,    55,     7,     8,   938,
     939,   540,    12,    13,    14,    98,    16,    10,    98,    17,
      20,    21,    17,    98,    10,    25,   955,    58,    19,   958,
    1078,    98,    32,    98,    34,    35,    98,    37,    98,    19,
      98,   970,    98,    98,    98,    17,   132,   133,    17,  1097,
      17,    10,    72,    16,    10,    17,    17,     1,    24,     3,
      24,    16,     6,     7,     8,    19,    24,    24,    12,    13,
      14,   134,    16,    24,    24,    17,    20,    21,    10,    22,
    1009,    25,    98,    17,    17,    98,    98,    10,    32,    10,
      34,    35,    22,    37,    38,    39,    40,    16,    10,  1028,
      10,    10,    46,    47,    48,    49,    50,    51,   637,    53,
    1039,    59,    17,    57,    17,    19,    60,    61,    10,    63,
      10,    65,    66,  1052,  1053,    10,     8,    71,    98,  1058,
      98,    10,   132,   133,     8,    79,    80,    81,    82,    16,
      84,    85,    11,    87,    84,    98,    98,    22,    59,    98,
      10,    98,    98,    98,    79,    79,  1085,   101,  1087,   103,
     104,     1,   106,   107,   108,    80,    31,     7,     8,    98,
      98,    98,    12,    13,    14,   101,    16,    15,    15,    10,
      20,    21,   126,    10,   128,    25,    79,    17,   132,   133,
    1119,  1120,    32,    17,    34,    35,    10,    37,    17,    15,
      10,    10,    17,    10,    10,   734,    64,    15,    10,    98,
      15,    98,    98,     1,    17,     3,    16,    16,     6,    16,
      16,    22,   751,    17,    12,    17,    10,    10,    10,    10,
      10,    10,    10,    10,    10,    64,    81,    10,    64,    98,
      79,  1170,    17,    17,    32,    17,    17,    17,    10,    10,
      38,    39,    40,    10,    10,    10,    10,    10,    46,    47,
      48,    49,    50,    51,    10,    53,    10,    10,    10,    57,
      15,    10,    60,    61,  1203,    63,    10,    10,   807,   808,
      98,    17,    17,  1331,   116,    98,    98,    98,     3,   254,
    1176,   820,   132,   133,    98,    54,  1225,    85,  1227,    87,
      98,   452,  1231,  1232,  1233,    54,    92,  1236,   175,   710,
     566,   181,  1201,   101,   675,   103,   104,  1389,   106,     1,
     108,     3,  1092,    92,     6,    92,  1255,   415,  1257,   119,
      12,   872,  1261,   230,  1471,   536,   720,   534,   126,  1322,
     128,   721,  1166,  1432,  1167,   505,  1519,    84,  1187,  1191,
      32,   725,   762,  1524,  1725,  1369,    38,    39,    40,   888,
     921,   388,  1111,  1277,    46,    47,    48,    49,    50,    51,
    1573,   646,    10,   896,    12,    57,  1409,  1288,    60,    61,
     750,    63,  1311,  1312,  1313,   813,   791,  1039,   146,    44,
     919,    21,    -1,  1322,    32,    -1,    -1,  1326,    -1,    37,
      -1,    -1,    -1,    85,    -1,    87,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   101,
    1468,   103,   104,    -1,   106,    -1,   108,    65,    66,    67,
      68,    69,    70,    71,  1363,  1483,    -1,  1366,  1367,    77,
      78,    -1,    -1,    81,   126,    -1,   128,     7,     8,    -1,
      -1,    -1,    12,    13,    14,    -1,    16,    -1,    -1,   988,
      20,    21,    -1,    -1,    -1,    25,    -1,    -1,    -1,    29,
      -1,    31,    32,    -1,    34,    35,    -1,    37,    -1,    -1,
      -1,  1410,    -1,  1412,    -1,  1414,    -1,  1416,  1417,  1418,
    1419,    -1,  1421,  1422,  1423,  1424,    -1,    -1,    -1,    -1,
      -1,    -1,  1031,  1432,    -1,    -1,    -1,    -1,    -1,    -1,
      70,  1440,    -1,    -1,  1043,    -1,  1045,    -1,    -1,  1048,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,  1056,    -1,    -1,
      -1,  1060,  1061,    -1,  1063,    -1,  1065,  1066,    -1,  1068,
      -1,  1070,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,     1,    -1,  1604,  1086,  1606,    -1,
      -1,  1490,  1091,  1492,    -1,    12,    -1,    14,    15,    -1,
      -1,    -1,   132,   133,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,  1110,    29,    -1,    31,    32,    -1,    -1,    -1,    -1,
      37,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    50,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,  1141,  1142,    -1,    -1,    -1,    -1,    65,    66,
      67,    68,    69,    70,    71,    72,    73,    74,    75,    76,
      77,    78,    -1,  1162,    81,  1564,    83,  1566,    -1,  1568,
    1169,  1570,  1571,    -1,  1573,    -1,  1575,    -1,  1577,  1578,
      -1,    -1,  1581,    -1,  1583,    -1,  1585,  1586,    -1,    -1,
      -1,    -1,    -1,    -1,  1712,    -1,  1195,    -1,    -1,    -1,
      -1,    -1,     1,  1602,     3,    -1,  1605,     6,  1607,  1727,
      -1,   128,    -1,    12,  1613,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,  1223,  1224,    -1,    -1,    -1,  1228,
      -1,    -1,    -1,    32,    -1,    -1,    -1,    -1,    -1,    38,
      39,    40,    -1,    -1,    -1,    -1,    -1,    46,    47,    48,
      49,    50,    51,    -1,    -1,    -1,    -1,  1256,    57,  1258,
      -1,    60,    61,    -1,    63,    -1,    -1,    -1,    -1,    -1,
    1269,    -1,  1671,    -1,  1673,  1274,    -1,    -1,    -1,  1678,
      -1,    -1,    -1,    -1,    -1,  1684,    85,    -1,    87,    -1,
      -1,    -1,    -1,    -1,  1293,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   101,    -1,   103,   104,     1,   106,     3,   108,
      -1,     6,    -1,    -1,    -1,    -1,    -1,    12,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   126,    -1,   128,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    32,    -1,    -1,
      -1,    -1,    -1,    38,    39,    40,    -1,    -1,    -1,  1348,
      -1,    46,    47,    48,    49,    50,    51,    -1,    -1,    -1,
      -1,    -1,    57,    -1,    -1,    60,    61,    -1,    63,    -1,
      -1,  1370,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,  1381,  1382,    -1,    -1,  1385,    -1,    -1,    -1,
      85,    -1,    87,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    1399,    -1,    -1,  1402,  1403,    -1,   101,    -1,   103,   104,
       1,   106,    -1,   108,    -1,    -1,    -1,    -1,    -1,    10,
      -1,    12,    -1,    14,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   126,    -1,   128,    -1,    -1,  1435,  1436,    29,    -1,
      31,    32,    -1,    -1,    -1,    -1,    37,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    50,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    65,    66,    67,    68,    69,    70,
      71,    -1,    73,    74,    75,    76,    77,    78,    -1,    -1,
      81,    -1,    83,     1,    -1,    -1,    -1,    -1,    -1,  1498,
      -1,    -1,    -1,  1502,    12,    -1,    14,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    29,  1521,    31,    32,    -1,    -1,    -1,    -1,    37,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   128,    -1,    -1,
      -1,     1,    50,     3,    -1,    -1,     6,    -1,    -1,    -1,
      -1,    -1,    12,    -1,    -1,    15,    -1,    65,    66,    67,
      68,    69,    70,    71,  1563,    73,    74,    75,    76,    77,
      78,    -1,    32,    81,    -1,    83,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    46,    47,    48,    49,
      50,    51,    -1,    -1,    -1,    -1,    -1,    57,    -1,    -1,
      60,    61,    -1,    63,    -1,    65,    66,    -1,    -1,    -1,
      -1,    71,    -1,    -1,     1,    -1,     3,    -1,    -1,     6,
     128,    81,    -1,    -1,    -1,    12,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   104,    32,    -1,    -1,   108,    -1,
      -1,  1650,  1651,    -1,  1653,    -1,    -1,    -1,  1657,    46,
      47,    48,    49,    50,    51,    -1,   126,    -1,   128,    -1,
      57,    -1,    -1,    60,    61,    -1,    63,    -1,    65,    66,
      -1,    -1,    -1,    -1,    71,    -1,    -1,     1,    -1,     3,
      -1,    -1,     6,    -1,    81,     7,     8,    -1,    12,    -1,
      12,    13,    14,    -1,    16,    -1,    -1,    -1,    20,    21,
      -1,    -1,    -1,    25,    -1,  1714,    -1,   104,    32,    -1,
      32,   108,    34,    35,    -1,    37,    -1,    -1,    -1,    -1,
      -1,    -1,    46,    47,    48,    49,    50,    51,    -1,   126,
      -1,   128,    -1,    57,    -1,    -1,    60,    61,    -1,    63,
      -1,    65,    66,    -1,    -1,    -1,    -1,    71,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    81,     7,     8,
      -1,    -1,    -1,    12,    13,    14,    -1,    16,    -1,    -1,
      -1,    20,    21,    95,    96,    -1,    25,    -1,    -1,    -1,
     104,    -1,    -1,    32,   108,    34,    35,    -1,    37,    -1,
      -1,    -1,    -1,    -1,     7,     8,    -1,    -1,    -1,    12,
      13,    14,   126,    16,   128,    -1,    -1,    20,    21,    -1,
     132,   133,    25,    -1,    -1,    -1,    -1,    -1,    -1,    32,
      -1,    34,    35,    -1,    37,    -1,    -1,    -1,    -1,     7,
       8,    80,    -1,    82,    12,    13,    14,    -1,    16,    -1,
      -1,    -1,    20,    21,    -1,    -1,    -1,    25,    -1,    -1,
      -1,    -1,    -1,    -1,    32,    -1,    34,    35,    -1,    37,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    80,    -1,    82,
      -1,    -1,    -1,     7,     8,    -1,    -1,    -1,    12,    13,
      14,    -1,    16,   132,   133,    -1,    20,    21,    -1,    -1,
      -1,    25,    -1,    -1,    -1,    -1,    -1,    -1,    32,    -1,
      34,    35,    80,    37,    82,    -1,    -1,    -1,     7,     8,
      -1,    -1,    -1,    12,    13,    14,    -1,    16,    -1,   132,
     133,    20,    21,    -1,    -1,    -1,    25,    -1,    -1,    -1,
      -1,    -1,    -1,    32,    -1,    34,    35,    -1,    37,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    80,    -1,    82,    -1,
      -1,     7,     8,    -1,   132,   133,    12,    13,    14,    -1,
      16,    -1,    18,    -1,    20,    21,    -1,    -1,    -1,    25,
      -1,    -1,    -1,    -1,    -1,    -1,    32,    -1,    34,    35,
      -1,    37,     7,     8,    -1,    -1,    11,    12,    13,    14,
      -1,    16,    -1,    -1,    -1,    20,    21,    -1,   132,   133,
      25,    -1,    -1,    -1,    -1,    -1,    -1,    32,    -1,    34,
      35,    -1,    37,     7,     8,    -1,    -1,    -1,    12,    13,
      14,    -1,    16,    -1,    -1,    -1,    20,    21,    -1,   128,
      -1,    25,    -1,   132,   133,    -1,    -1,    -1,    32,    -1,
      34,    35,    -1,    37,     7,     8,    -1,    -1,    -1,    12,
      13,    14,    -1,    16,    -1,    -1,    -1,    20,    21,    -1,
      -1,    -1,    25,    -1,    -1,    -1,    -1,    -1,    -1,    32,
      -1,    34,    35,    -1,    37,    -1,   132,   133,    -1,    -1,
      -1,    -1,    -1,    -1,     7,     8,    -1,    -1,    82,    12,
      13,    14,    -1,    16,    17,    -1,    -1,    20,    21,    -1,
      -1,    -1,    25,    -1,    -1,    -1,    -1,   132,   133,    32,
      -1,    34,    35,    -1,    37,     7,     8,    -1,    -1,    82,
      12,    13,    14,    -1,    16,    -1,    -1,    -1,    20,    21,
      -1,    -1,    -1,    25,    -1,    -1,    -1,    -1,   132,   133,
      32,    -1,    34,    35,    -1,    37,     7,     8,    -1,    -1,
      -1,    12,    13,    14,    -1,    16,    -1,    -1,    -1,    20,
      21,    -1,    -1,    -1,    25,    -1,    -1,    -1,    -1,   132,
     133,    32,    -1,    34,    35,    -1,    37,     7,     8,    -1,
      -1,    -1,    12,    13,    14,    -1,    16,    -1,    -1,    -1,
      20,    21,    -1,    -1,    -1,    25,    -1,    -1,    -1,    -1,
      -1,    -1,    32,    -1,    34,    35,    -1,    37,    -1,   132,
     133,    -1,    -1,    -1,    -1,    -1,    -1,     7,     8,    -1,
      -1,    -1,    12,    13,    14,    -1,    16,    -1,    -1,    -1,
      20,    21,    -1,    -1,    -1,    25,    -1,    -1,    -1,    -1,
     132,   133,    32,    -1,    34,    35,    -1,    37,    -1,    -1,
       3,    -1,    -1,     6,    -1,    -1,    -1,    -1,    -1,    12,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   132,   133,    -1,    -1,    -1,    -1,    -1,    -1,    32,
      -1,    -1,    -1,    -1,    -1,    38,    39,    40,    -1,    -1,
      -1,    -1,    -1,    46,    47,    48,    49,    50,    51,    -1,
      -1,    -1,   132,   133,    57,    -1,    -1,    60,    61,    -1,
      63,    10,    -1,    -1,    13,    14,    -1,    -1,    -1,    -1,
      -1,    20,    21,    22,    23,    24,    25,    26,    27,    28,
      -1,    -1,    85,    -1,    87,    34,    35,    -1,    -1,    -1,
      -1,    -1,   132,   133,    -1,    -1,    -1,    -1,   101,    -1,
     103,   104,    -1,   106,    10,   108,    -1,    13,    14,    -1,
      -1,    -1,    -1,    -1,    20,    21,    22,    23,    24,    25,
      26,    27,    28,   126,    -1,    -1,    -1,    10,    34,    35,
      13,    14,    -1,    -1,    -1,    -1,    -1,    20,    21,    22,
      23,    24,    25,    26,    27,    28,    -1,    -1,    -1,    -1,
      99,    34,    35,    -1,    -1,    -1,    -1,     3,    -1,    -1,
       6,    -1,    -1,    -1,    -1,    -1,    12,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   130,   131,   132,   133,    -1,    32,    -1,    -1,    -1,
      -1,    -1,    -1,    99,    -1,    -1,    -1,    -1,    -1,    -1,
      46,    47,    48,    49,    50,    51,    -1,    -1,    -1,    -1,
      -1,    57,    -1,    -1,    60,    61,    99,    63,    -1,    -1,
      -1,    -1,    -1,    -1,   130,   131,   132,   133,    -1,    -1,
      13,    14,    15,    -1,    -1,    -1,    19,    20,    21,    22,
      23,    24,    25,    26,    27,    28,    -1,   130,   131,   132,
     133,    34,    35,    -1,    -1,    -1,    -1,    -1,   104,    -1,
      -1,    -1,   108,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    13,    14,    15,    -1,    -1,
     126,    19,    20,    21,    22,    23,    24,    25,    26,    27,
      28,    -1,    13,    14,    15,    -1,    34,    35,    19,    20,
      21,    22,    23,    24,    25,    26,    27,    28,    -1,    -1,
      -1,    -1,    -1,    34,    35,    -1,    99,    13,    14,    15,
      -1,    -1,    -1,    19,    20,    21,    22,    23,    24,    25,
      26,    27,    28,    -1,    -1,    -1,    -1,    -1,    34,    35,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   130,   131,   132,
     133,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    13,    14,
      15,    99,    -1,    -1,    19,    20,    21,    22,    23,    24,
      25,    26,    27,    28,    -1,    13,    14,    15,    99,    34,
      35,    -1,    20,    21,    22,    23,    24,    25,    26,    27,
      28,    -1,   130,   131,   132,   133,    34,    35,    -1,    -1,
      -1,    -1,    -1,    99,    -1,    -1,    -1,    -1,    -1,   130,
     131,   132,   133,    -1,    -1,    -1,    -1,    13,    14,    -1,
      -1,    -1,    -1,    -1,    20,    21,    22,    23,    24,    25,
      26,    27,    28,    -1,   130,   131,   132,   133,    34,    35,
      -1,    37,    -1,    -1,    99,    13,    14,    15,    -1,    -1,
      -1,    -1,    20,    21,    22,    23,    24,    25,    26,    27,
      28,    99,    -1,    -1,    -1,    -1,    34,    35,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   130,   131,   132,   133,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   130,   131,   132,   133,    -1,    13,    14,    15,
      -1,    -1,    -1,    99,    20,    21,    22,    23,    24,    25,
      26,    27,    28,    -1,    -1,    -1,    -1,    -1,    34,    35,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    99,    -1,    -1,   130,   131,   132,   133,    13,    14,
      -1,    -1,    17,    -1,    -1,    20,    21,    22,    23,    24,
      25,    26,    27,    28,    -1,    -1,    -1,    -1,    -1,    34,
      35,    -1,   130,   131,   132,   133,    13,    14,    15,    -1,
      -1,    -1,    -1,    20,    21,    22,    23,    24,    25,    26,
      27,    28,    -1,    99,    13,    14,    -1,    34,    35,    -1,
      19,    20,    21,    22,    23,    24,    25,    26,    27,    28,
      -1,    -1,    -1,    -1,    -1,    34,    35,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   130,   131,   132,   133,    -1,    13,
      14,    -1,    -1,    17,    99,    -1,    20,    21,    22,    23,
      24,    25,    26,    27,    28,    -1,    -1,    -1,    -1,    -1,
      34,    35,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    99,    -1,    -1,   130,   131,   132,   133,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    13,    14,    -1,
      99,    17,    -1,    -1,    20,    21,    22,    23,    24,    25,
      26,    27,    28,   130,   131,   132,   133,    -1,    34,    35,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   130,   131,   132,   133,    99,    13,    14,    -1,    -1,
      17,    -1,    -1,    20,    21,    22,    23,    24,    25,    26,
      27,    28,    -1,    -1,    -1,    -1,    -1,    34,    35,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   130,   131,   132,   133,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    13,    14,    -1,
      -1,    17,    -1,    99,    20,    21,    22,    23,    24,    25,
      26,    27,    28,    -1,    -1,    -1,    -1,    -1,    34,    35,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   130,   131,   132,   133,    -1,    13,
      14,    -1,    99,    17,    -1,    -1,    20,    21,    22,    23,
      24,    25,    26,    27,    28,    -1,    -1,    -1,    -1,    -1,
      34,    35,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   130,   131,   132,   133,    13,    14,    -1,
      -1,    17,    -1,    99,    20,    21,    22,    23,    24,    25,
      26,    27,    28,    -1,    -1,    -1,    -1,    -1,    34,    35,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   130,   131,   132,   133,    -1,    13,
      14,    -1,    -1,    17,    -1,    99,    20,    21,    22,    23,
      24,    25,    26,    27,    28,    -1,    -1,    -1,    -1,    -1,
      34,    35,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   130,   131,   132,   133,
      13,    14,    -1,    99,    17,    -1,    -1,    20,    21,    22,
      23,    24,    25,    26,    27,    28,    -1,    -1,    -1,    -1,
      -1,    34,    35,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   130,   131,   132,   133,    -1,    13,
      14,    -1,    -1,    17,    -1,    99,    20,    21,    22,    23,
      24,    25,    26,    27,    28,    -1,    -1,    -1,    -1,    -1,
      34,    35,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   130,   131,   132,   133,
      13,    14,    -1,    -1,    -1,    -1,    99,    20,    21,    22,
      23,    24,    25,    26,    27,    28,    -1,    -1,    -1,    -1,
      -1,    34,    35,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   130,   131,   132,
     133,    -1,    13,    14,    -1,    99,    17,    -1,    -1,    20,
      21,    22,    23,    24,    25,    26,    27,    28,    -1,    -1,
      -1,    -1,    -1,    34,    35,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   130,   131,   132,   133,
      13,    14,    -1,    -1,    17,    98,    99,    20,    21,    22,
      23,    24,    25,    26,    27,    28,    -1,    -1,    -1,    -1,
      -1,    34,    35,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   130,   131,   132,
     133,    -1,    13,    14,    -1,    -1,    17,    -1,    99,    20,
      21,    22,    23,    24,    25,    26,    27,    28,    -1,    -1,
      -1,    -1,    -1,    34,    35,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    16,    -1,    -1,   130,
     131,   132,   133,    13,    14,    -1,    99,    17,    -1,    -1,
      20,    21,    22,    23,    24,    25,    26,    27,    28,    -1,
      13,    14,    -1,    -1,    34,    35,    -1,    20,    21,    22,
      23,    24,    25,    26,    27,    28,    -1,   130,   131,   132,
     133,    34,    35,    -1,    -1,    65,    -1,    -1,    99,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    86,    87,    88,    89,
      90,    91,    92,    93,    94,    -1,    -1,    -1,    -1,   130,
     131,   132,   133,    -1,    -1,   105,    -1,    -1,    -1,    99,
      12,    -1,    14,   113,   114,    -1,    -1,    -1,    -1,   119,
     120,   121,   122,   123,   124,   125,    99,    29,    -1,    31,
      32,    -1,    -1,    -1,    -1,    37,    38,    39,    40,    -1,
     130,   131,   132,   133,    46,    47,    48,    49,    50,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   130,   131,   132,
     133,    -1,    -1,    65,    66,    67,    68,    69,    70,    71,
      -1,    73,    74,    75,    76,    77,    78,    -1,    12,    81,
      14,    83,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    29,    -1,    31,    32,   101,
      -1,   103,   104,    37,    38,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    46,    47,    48,    49,    50,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   126,    12,    -1,    -1,    -1,    -1,
      -1,    65,    66,    67,    68,    69,    70,    71,    -1,    73,
      74,    75,    76,    77,    78,    32,    -1,    81,    -1,    83,
      37,    38,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    46,
      47,    48,    49,    -1,    -1,    -1,    -1,    -1,    -1,   103,
     104,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    65,    66,
      67,    68,    69,    70,    71,    -1,    -1,    12,    -1,    14,
      77,    78,   126,    -1,    81,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    29,    -1,    31,    32,    -1,    -1,
      -1,    -1,    37,    -1,    -1,    -1,   103,   104,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    50,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   126,
      65,    66,    67,    68,    69,    70,    71,    -1,    73,    74,
      75,    76,    77,    78,    -1,    -1,    81,    -1,    83
};

/* YYSTOS[STATE-NUM] -- The (internal number of the) accessing
   symbol of state STATE-NUM.  */
static const unsigned short int yystos[] =
{
       0,   137,   138,   139,     0,   109,   110,   112,   128,   140,
     141,   142,   144,   145,   156,   157,   310,   450,   156,    10,
      12,    32,   146,   454,   455,     1,    23,     1,   451,   452,
     454,    52,    54,    56,   159,   160,   455,    10,    10,     7,
     143,   453,   454,   129,    98,   129,    22,   311,   454,   158,
     454,    10,    16,    29,   164,   170,   172,     1,   127,   147,
      24,    11,   452,     7,     8,    13,    14,    16,    20,    21,
      25,    34,    35,    37,   132,   133,   427,   436,   437,   438,
     443,   447,   448,   453,    16,     1,   161,   162,   163,   178,
     179,   180,   450,     1,    17,   171,   258,   259,   260,   264,
     450,    16,    10,    16,   170,   172,    10,    10,   111,     1,
     150,   453,    82,   111,   117,   118,   148,   149,   151,   152,
      10,   454,   438,   439,    20,    21,   435,   438,    20,    21,
      22,    23,    24,    25,    26,    27,    28,    34,    35,    99,
     130,   131,   132,   133,   444,   447,   128,   436,   447,   449,
       8,    16,    18,   431,   432,   449,   312,   313,   317,   450,
     454,    10,    53,   161,   179,     1,    10,     3,     6,    38,
      39,    40,    46,    47,    48,    49,    50,    51,    57,    60,
      61,    63,    85,    87,   101,   103,   104,   106,   108,   126,
     181,   182,   184,   190,   196,   197,   200,   203,   210,   211,
     212,   213,   216,   217,   219,   220,   245,   253,   272,   279,
     280,   298,   332,   336,   339,   340,   378,   454,    17,    10,
       8,    11,    37,   173,   174,   175,   177,   454,    17,    98,
      98,    47,    48,    98,   102,   104,   126,   249,   267,    39,
      40,   101,     1,   165,   163,    10,    10,     1,   163,     1,
     163,    10,    10,   453,   116,   153,   453,   453,   111,   149,
     115,   153,   154,   153,   154,    15,    17,    36,    98,    37,
      22,    22,    23,    22,    24,    26,    22,   438,   437,   449,
       1,   451,   436,   435,   438,   434,   438,    18,    16,    17,
      98,    17,    98,    39,    10,     1,    16,    44,    45,   214,
     215,   223,   224,     1,    16,    29,   223,   225,   273,   274,
     275,   276,   277,   454,     1,    18,   102,   191,   244,   267,
     446,     3,    46,   205,   206,   208,   209,   244,   446,   209,
     249,     1,   249,     1,   221,     1,   236,   237,   239,   454,
       1,   229,   230,   231,   454,    16,    37,   223,   225,   337,
     338,   428,   445,   453,   454,     1,   183,     1,   355,   450,
     341,     1,   100,   248,     1,   248,     1,    16,    65,    86,
      88,    89,    90,    91,    92,    93,    94,   105,   113,   114,
     119,   120,   121,   122,   123,   124,   125,   196,   379,   380,
     381,   382,   383,   384,   385,   393,   394,   395,   399,   401,
     402,   403,   404,   405,   406,   407,   408,   409,   410,   411,
     412,   413,     1,   238,   242,   244,   454,   209,   249,     1,
     187,   244,   267,   446,     1,   239,     1,   299,     1,   232,
     454,     1,   218,    98,    98,    98,     1,    16,   223,   281,
     284,   291,   292,   333,   334,   335,   454,   163,   175,   176,
     177,    17,    98,    18,   259,   249,   264,   267,   454,    46,
     261,   454,     3,   263,   263,   263,    17,    38,   166,   161,
     163,   163,   161,   161,   161,   161,   150,    10,   453,    10,
      10,    10,    10,   438,   438,   435,    22,    23,    24,    22,
      15,   437,   129,   129,    17,    19,    13,    14,    15,    19,
     434,   438,   435,    10,   454,    10,   314,   318,   450,   454,
      46,   454,    10,     1,     4,     5,    41,    42,    43,   249,
     214,   214,    10,   278,   445,    16,   228,   439,    16,   225,
     274,   277,   274,    10,    98,    10,    98,    16,   244,    10,
     438,   441,   235,   241,   453,   194,   192,   195,   244,   454,
      47,   102,   104,   204,   207,   244,   249,   244,   262,    10,
     239,   244,    10,   239,    10,    10,    98,    18,    22,   222,
     243,    10,    10,    98,    98,   222,   428,   429,   430,   454,
     225,   337,   337,    10,    98,    22,    18,   432,    10,   235,
      84,    14,    29,    31,    50,    65,    66,    67,    68,    69,
      70,    71,    73,    74,    75,    76,    77,    78,    81,    83,
     342,   343,   344,   350,   351,   359,   360,   362,   363,   364,
     367,   368,   369,   371,   375,   376,   445,   453,   355,    62,
     254,   454,    64,   249,    86,    95,    96,   386,   389,   398,
     454,    16,    16,     1,    16,    16,    16,    16,    16,    16,
      16,   386,   387,   389,     1,   387,   387,     1,   387,    16,
      16,    16,    16,    16,   384,    86,   380,    10,    22,    10,
      22,    22,    10,    10,    10,    98,   238,    22,   249,   262,
      10,   235,   185,   186,   188,   244,    10,    10,   107,    65,
      66,    71,    81,   180,   300,   302,   303,   304,   307,   309,
     450,    10,    10,    98,    10,   239,   209,   249,   209,   249,
      39,   454,    84,   278,    16,   225,   227,   292,   333,    29,
     285,    98,   283,    16,    10,    98,    16,   262,   161,    16,
      36,    98,   174,   434,   438,   261,   249,   454,   262,   167,
      17,    98,   161,   161,    15,   155,    15,    36,   437,    15,
      15,   438,   440,    19,    19,    17,   315,   316,   317,   318,
     319,   450,   315,    98,    98,   101,   454,    17,    98,    98,
      17,    17,    17,   262,   249,   249,    17,    98,   226,   228,
     439,   278,   274,    10,    16,    10,    16,   276,   277,   275,
     278,    15,    10,    98,    22,   235,   235,   235,   193,   454,
     262,   198,    10,   239,    10,   237,   433,   438,   438,   243,
     454,   454,    36,    98,    18,   432,   337,    10,    10,   338,
     438,   434,    18,    10,    24,     8,    12,    16,    16,    26,
     128,   454,   349,   445,    16,    16,     1,    16,     1,    16,
     355,    16,    16,    16,   338,   445,   445,   454,    16,     1,
      15,    84,   352,   353,     1,    15,    72,   354,   355,     1,
      10,     1,    10,    10,    10,   355,   356,    22,    23,    10,
      16,    10,    16,    47,    48,   104,   126,   244,   247,    26,
      98,   388,   400,   447,    22,   386,   389,    18,   438,     1,
      95,    96,    97,   389,   417,   419,   421,   422,   425,    10,
       1,   417,   419,   420,   420,   417,   417,   419,   419,    10,
      10,    10,    10,    10,    10,   417,   417,   417,   419,   386,
     389,    16,   390,   391,   392,   439,   390,   390,   242,    10,
     439,   262,   201,    10,   235,   235,   235,   189,    16,    16,
      16,     1,    15,   300,   107,   302,   454,    10,   249,   262,
     249,   262,   208,   338,   454,    98,   333,    10,    16,   284,
     292,   291,    10,     1,    17,   293,   294,   295,   296,   297,
     450,   334,   278,    17,   175,   177,    19,    19,   262,   261,
     454,   169,   244,   446,    38,   110,   439,    36,   438,   442,
     442,    57,    58,   316,   320,   321,   324,    10,    10,    98,
      10,    10,    98,    46,   320,   318,   454,   454,   454,    22,
       5,     4,   225,   229,   233,   234,   240,   454,   262,   262,
     435,    17,    98,    10,   278,   278,    16,    17,    98,   440,
     241,   438,    10,    10,    10,   235,   199,   454,    10,    15,
     222,   430,   434,   438,   434,   438,    10,    19,   438,   454,
     439,    26,    95,    96,   365,   366,   438,    17,    22,     1,
     438,   438,    80,   438,    80,   438,   438,   349,   438,    10,
     438,    84,   454,   354,    84,   255,   268,   354,   450,    72,
       1,   454,    72,   355,    70,   360,   438,    22,     1,    98,
     377,   438,   256,   257,   259,   268,   354,   450,   258,   246,
     454,    24,   389,   387,    22,    26,    24,    26,    22,   434,
     438,    17,    17,    19,    18,    98,   425,   134,    98,    98,
      98,    98,    98,    98,    98,    98,    98,    98,    98,    26,
      22,    16,   391,   392,   439,   202,   454,    10,    10,    10,
     235,   438,   438,   308,   454,    84,   454,    84,   262,   454,
     262,   454,   454,   435,    10,     1,    11,   286,   287,   288,
     289,   290,   438,   282,    17,    17,    98,    98,   290,   438,
      98,    17,   454,   262,   241,   244,   168,     1,   454,     1,
       8,    12,    16,    26,    99,   322,   323,   326,   327,   331,
      55,    58,   454,   454,    55,   438,    17,    17,   233,   234,
      10,    98,    10,    22,   225,   233,   234,   225,   233,   234,
      17,   228,   278,   435,    19,    10,   454,   433,    19,    19,
      10,    17,    17,   438,   438,     6,    17,    98,   438,    17,
      17,    17,    17,    17,    17,   361,    10,    17,    17,    84,
     268,   354,    84,    46,   184,   190,   210,   212,   216,   217,
     220,   269,    72,   255,   354,    16,   438,   360,   438,    17,
      17,    98,   257,   354,    10,    62,    17,    10,    16,   387,
      17,    24,    24,    16,   389,   396,    24,    24,    19,    19,
     384,   393,     8,    12,   423,   424,   418,   419,   134,   426,
     439,   418,   416,   438,   416,   418,   418,   419,   419,   418,
     418,   418,   419,    24,    24,   392,    17,    98,   454,    10,
      17,    17,    10,    22,     1,   300,   454,   454,    17,    17,
     454,    17,    98,    98,    10,   295,   450,   297,   450,   435,
     454,   169,    10,    22,    59,   331,    59,   323,    15,   327,
     331,    16,     1,   322,    10,    10,   240,   454,   438,   233,
      10,    10,   234,    10,    10,    17,    19,   365,   365,     1,
     356,     1,    82,   372,   373,   435,   372,   372,   355,    17,
     438,   356,   355,    84,   244,   270,   271,   446,   454,   354,
      72,   438,   438,    10,    10,   438,    62,    10,   101,   250,
     251,   265,   266,   268,   450,   252,   450,    17,   447,   389,
      17,   447,   387,   389,   396,     8,    12,     8,    19,    98,
      98,   426,    98,    17,    98,    17,    98,    98,    98,    98,
      98,    98,    98,    98,    98,   387,   389,   392,    10,   301,
     302,    82,   305,   306,   435,   438,   438,    84,    84,    10,
      16,   288,   290,    17,   241,     8,   325,    17,   331,   328,
     330,   331,   331,    59,    59,    10,    10,    79,    79,    80,
      15,   356,    80,   373,    15,    80,    80,   363,    10,   270,
      10,    98,   244,   222,    72,   255,   354,     1,    46,   249,
     267,   251,   357,   450,    10,    98,    98,    17,    98,   266,
      15,   447,    15,   447,   423,   416,   416,    10,   438,    10,
     414,   415,   438,   416,   416,   416,   439,   416,   416,   416,
     416,    17,    98,    79,    15,   301,    80,   306,    15,    10,
      17,   438,    10,    17,    15,    10,    17,   356,   356,   356,
     356,   349,    10,   271,   270,   354,    62,    10,   249,   262,
     454,    64,    65,    69,    70,    71,    78,    81,   345,   347,
     358,   362,   370,   371,   374,   376,   445,   266,   101,   454,
      10,   266,   397,   438,    15,   397,    15,    17,    98,    17,
      98,    98,    17,    98,    17,    98,    17,    98,    98,    98,
      17,    98,    17,    98,    17,    98,    98,   392,   301,   301,
     301,   308,    17,    14,   329,   330,   331,    17,    10,    62,
     262,   454,    16,   357,   450,    16,    16,    16,    15,    84,
     255,   354,    10,    22,    46,   249,   267,   255,   357,    17,
     397,    17,   397,    10,   414,    10,   414,   414,    10,   415,
      10,   414,    10,   414,   416,   439,    10,   414,    10,   414,
      10,   414,   416,    17,    98,    17,    10,   355,   454,     1,
     438,   438,   349,   438,   454,   354,    84,   438,   249,   262,
     454,   357,    64,    17,    17,    17,    17,    17,    17,    17,
      17,    98,    17,    98,    17,    17,    17,    17,    98,   392,
      81,    17,    17,    17,    10,    17,   255,   348,   357,    84,
     262,   454,    64,    17,    10,    10,    10,    10,    10,    10,
     414,    10,   414,    10,    10,    10,    10,   414,    98,    15,
     346,   357,   450,   357,   438,   357,   354,    84,   357,   454,
      17,    17,    17,   392,   454,    79,    10,    10,    84,    10,
      10,    10,    98,   300,   346,   349,   392,    84,    17,    17,
      98,   357,   392,    98,   392,    98,   392,    98,   392,    98,
     392,    98,   392,    17
};


/* Prevent warning if -Wmissing-prototypes.  */
int yyparse (void);

/* Error token number */
#define YYTERROR 1

/* YYLLOC_DEFAULT -- Set CURRENT to span from RHS[1] to RHS[N].
   If N is 0, then set CURRENT to the empty location which ends
   the previous symbol: RHS[0] (always defined).  */


#define YYRHSLOC(Rhs, K) ((Rhs)[K].yystate.yyloc)
#ifndef YYLLOC_DEFAULT
# define YYLLOC_DEFAULT(Current, Rhs, N)				\
    do									\
      if (YYID (N))							\
	{								\
	  (Current).first_line   = YYRHSLOC (Rhs, 1).first_line;	\
	  (Current).first_column = YYRHSLOC (Rhs, 1).first_column;	\
	  (Current).last_line    = YYRHSLOC (Rhs, N).last_line;		\
	  (Current).last_column  = YYRHSLOC (Rhs, N).last_column;	\
	}								\
      else								\
	{								\
	  (Current).first_line   = (Current).last_line   =		\
	    YYRHSLOC (Rhs, 0).last_line;				\
	  (Current).first_column = (Current).last_column =		\
	    YYRHSLOC (Rhs, 0).last_column;				\
	}								\
    while (YYID (0))

/* YY_LOCATION_PRINT -- Print the location on the stream.
   This macro was not mandated originally: define only if we know
   we won't break user code: when these are the locations we know.  */

# define YY_LOCATION_PRINT(File, Loc)			\
    fprintf (File, "%d.%d-%d.%d",			\
	     (Loc).first_line, (Loc).first_column,	\
	     (Loc).last_line,  (Loc).last_column)
#endif


#ifndef YY_LOCATION_PRINT
# define YY_LOCATION_PRINT(File, Loc) ((void) 0)
#endif


/* YYLEX -- calling `yylex' with the right arguments.  */
#define YYLEX yylex ()

YYSTYPE yylval;

YYLTYPE yylloc;

int yynerrs;
int yychar;

static const int YYEOF = 0;
static const int YYEMPTY = -2;

typedef enum { yyok, yyaccept, yyabort, yyerr } YYRESULTTAG;

#define YYCHK(YYE)							     \
   do { YYRESULTTAG yyflag = YYE; if (yyflag != yyok) return yyflag; }	     \
   while (YYID (0))

#if YYDEBUG

# ifndef YYFPRINTF
#  define YYFPRINTF fprintf
# endif

# define YYDPRINTF(Args)			\
do {						\
  if (yydebug)					\
    YYFPRINTF Args;				\
} while (YYID (0))


/*--------------------------------.
| Print this symbol on YYOUTPUT.  |
`--------------------------------*/

/*ARGSUSED*/
static void
yy_symbol_value_print (FILE *yyoutput, int yytype, YYSTYPE const * const yyvaluep, YYLTYPE const * const yylocationp)
{
  if (!yyvaluep)
    return;
  YYUSE (yylocationp);
# ifdef YYPRINT
  if (yytype < YYNTOKENS)
    YYPRINT (yyoutput, yytoknum[yytype], *yyvaluep);
# else
  YYUSE (yyoutput);
# endif
  switch (yytype)
    {
      default:
	break;
    }
}


/*--------------------------------.
| Print this symbol on YYOUTPUT.  |
`--------------------------------*/

static void
yy_symbol_print (FILE *yyoutput, int yytype, YYSTYPE const * const yyvaluep, YYLTYPE const * const yylocationp)
{
  if (yytype < YYNTOKENS)
    YYFPRINTF (yyoutput, "token %s (", yytname[yytype]);
  else
    YYFPRINTF (yyoutput, "nterm %s (", yytname[yytype]);

  YY_LOCATION_PRINT (yyoutput, *yylocationp);
  YYFPRINTF (yyoutput, ": ");
  yy_symbol_value_print (yyoutput, yytype, yyvaluep, yylocationp);
  YYFPRINTF (yyoutput, ")");
}

# define YY_SYMBOL_PRINT(Title, Type, Value, Location)			    \
do {									    \
  if (yydebug)								    \
    {									    \
      YYFPRINTF (stderr, "%s ", Title);					    \
      yy_symbol_print (stderr, Type,					    \
		       Value, Location);  \
      YYFPRINTF (stderr, "\n");						    \
    }									    \
} while (YYID (0))

/* Nonzero means print parse trace.  It is left uninitialized so that
   multiple parsers can coexist.  */
int yydebug;

#else /* !YYDEBUG */

# define YYDPRINTF(Args)
# define YY_SYMBOL_PRINT(Title, Type, Value, Location)

#endif /* !YYDEBUG */

/* YYINITDEPTH -- initial size of the parser's stacks.  */
#ifndef	YYINITDEPTH
# define YYINITDEPTH 200
#endif

/* YYMAXDEPTH -- maximum size the stacks can grow to (effective only
   if the built-in stack extension method is used).

   Do not make this value too large; the results are undefined if
   SIZE_MAX < YYMAXDEPTH * sizeof (GLRStackItem)
   evaluated with infinite-precision integer arithmetic.  */

#ifndef YYMAXDEPTH
# define YYMAXDEPTH 10000
#endif

/* Minimum number of free items on the stack allowed after an
   allocation.  This is to allow allocation and initialization
   to be completed by functions that call yyexpandGLRStack before the
   stack is expanded, thus insuring that all necessary pointers get
   properly redirected to new data.  */
#define YYHEADROOM 2

#ifndef YYSTACKEXPANDABLE
# if (! defined __cplusplus \
      || (defined YYLTYPE_IS_TRIVIAL && YYLTYPE_IS_TRIVIAL \
	  && defined YYSTYPE_IS_TRIVIAL && YYSTYPE_IS_TRIVIAL))
#  define YYSTACKEXPANDABLE 1
# else
#  define YYSTACKEXPANDABLE 0
# endif
#endif

#if YYSTACKEXPANDABLE
# define YY_RESERVE_GLRSTACK(Yystack)			\
  do {							\
    if (Yystack->yyspaceLeft < YYHEADROOM)		\
      yyexpandGLRStack (Yystack);			\
  } while (YYID (0))
#else
# define YY_RESERVE_GLRSTACK(Yystack)			\
  do {							\
    if (Yystack->yyspaceLeft < YYHEADROOM)		\
      yyMemoryExhausted (Yystack);			\
  } while (YYID (0))
#endif


#if YYERROR_VERBOSE

# ifndef yystpcpy
#  if defined __GLIBC__ && defined _STRING_H && defined _GNU_SOURCE
#   define yystpcpy stpcpy
#  else
/* Copy YYSRC to YYDEST, returning the address of the terminating '\0' in
   YYDEST.  */
static char *
yystpcpy (char *yydest, const char *yysrc)
{
  char *yyd = yydest;
  const char *yys = yysrc;

  while ((*yyd++ = *yys++) != '\0')
    continue;

  return yyd - 1;
}
#  endif
# endif

# ifndef yytnamerr
/* Copy to YYRES the contents of YYSTR after stripping away unnecessary
   quotes and backslashes, so that it's suitable for yyerror.  The
   heuristic is that double-quoting is unnecessary unless the string
   contains an apostrophe, a comma, or backslash (other than
   backslash-backslash).  YYSTR is taken from yytname.  If YYRES is
   null, do not copy; instead, return the length of what the result
   would have been.  */
static size_t
yytnamerr (char *yyres, const char *yystr)
{
  if (*yystr == '"')
    {
      size_t yyn = 0;
      char const *yyp = yystr;

      for (;;)
	switch (*++yyp)
	  {
	  case '\'':
	  case ',':
	    goto do_not_strip_quotes;

	  case '\\':
	    if (*++yyp != '\\')
	      goto do_not_strip_quotes;
	    /* Fall through.  */
	  default:
	    if (yyres)
	      yyres[yyn] = *yyp;
	    yyn++;
	    break;

	  case '"':
	    if (yyres)
	      yyres[yyn] = '\0';
	    return yyn;
	  }
    do_not_strip_quotes: ;
    }

  if (! yyres)
    return strlen (yystr);

  return yystpcpy (yyres, yystr) - yyres;
}
# endif

#endif /* !YYERROR_VERBOSE */

/** State numbers, as in LALR(1) machine */
typedef int yyStateNum;

/** Rule numbers, as in LALR(1) machine */
typedef int yyRuleNum;

/** Grammar symbol */
typedef short int yySymbol;

/** Item references, as in LALR(1) machine */
typedef short int yyItemNum;

typedef struct yyGLRState yyGLRState;
typedef struct yyGLRStateSet yyGLRStateSet;
typedef struct yySemanticOption yySemanticOption;
typedef union yyGLRStackItem yyGLRStackItem;
typedef struct yyGLRStack yyGLRStack;

struct yyGLRState {
  /** Type tag: always true.  */
  yybool yyisState;
  /** Type tag for yysemantics.  If true, yysval applies, otherwise
   *  yyfirstVal applies.  */
  yybool yyresolved;
  /** Number of corresponding LALR(1) machine state.  */
  yyStateNum yylrState;
  /** Preceding state in this stack */
  yyGLRState* yypred;
  /** Source position of the first token produced by my symbol */
  size_t yyposn;
  union {
    /** First in a chain of alternative reductions producing the
     *  non-terminal corresponding to this state, threaded through
     *  yynext.  */
    yySemanticOption* yyfirstVal;
    /** Semantic value for this state.  */
    YYSTYPE yysval;
  } yysemantics;
  /** Source location for this state.  */
  YYLTYPE yyloc;
};

struct yyGLRStateSet {
  yyGLRState** yystates;
  /** During nondeterministic operation, yylookaheadNeeds tracks which
   *  stacks have actually needed the current lookahead.  During deterministic
   *  operation, yylookaheadNeeds[0] is not maintained since it would merely
   *  duplicate yychar != YYEMPTY.  */
  yybool* yylookaheadNeeds;
  size_t yysize, yycapacity;
};

struct yySemanticOption {
  /** Type tag: always false.  */
  yybool yyisState;
  /** Rule number for this reduction */
  yyRuleNum yyrule;
  /** The last RHS state in the list of states to be reduced.  */
  yyGLRState* yystate;
  /** The lookahead for this reduction.  */
  int yyrawchar;
  YYSTYPE yyval;
  YYLTYPE yyloc;
  /** Next sibling in chain of options.  To facilitate merging,
   *  options are chained in decreasing order by address.  */
  yySemanticOption* yynext;
};

/** Type of the items in the GLR stack.  The yyisState field
 *  indicates which item of the union is valid.  */
union yyGLRStackItem {
  yyGLRState yystate;
  yySemanticOption yyoption;
};

struct yyGLRStack {
  int yyerrState;
  /* To compute the location of the error token.  */
  yyGLRStackItem yyerror_range[3];

  YYJMP_BUF yyexception_buffer;
  yyGLRStackItem* yyitems;
  yyGLRStackItem* yynextFree;
  size_t yyspaceLeft;
  yyGLRState* yysplitPoint;
  yyGLRState* yylastDeleted;
  yyGLRStateSet yytops;
};

#if YYSTACKEXPANDABLE
static void yyexpandGLRStack (yyGLRStack* yystackp);
#endif

static void yyFail (yyGLRStack* yystackp, const char* yymsg)
  __attribute__ ((__noreturn__));
static void
yyFail (yyGLRStack* yystackp, const char* yymsg)
{
  if (yymsg != NULL)
    yyerror (yymsg);
  YYLONGJMP (yystackp->yyexception_buffer, 1);
}

static void yyMemoryExhausted (yyGLRStack* yystackp)
  __attribute__ ((__noreturn__));
static void
yyMemoryExhausted (yyGLRStack* yystackp)
{
  YYLONGJMP (yystackp->yyexception_buffer, 2);
}

#if YYDEBUG || YYERROR_VERBOSE
/** A printable representation of TOKEN.  */
static inline const char*
yytokenName (yySymbol yytoken)
{
  if (yytoken == YYEMPTY)
    return "";

  return yytname[yytoken];
}
#endif

/** Fill in YYVSP[YYLOW1 .. YYLOW0-1] from the chain of states starting
 *  at YYVSP[YYLOW0].yystate.yypred.  Leaves YYVSP[YYLOW1].yystate.yypred
 *  containing the pointer to the next state in the chain.  */
static void yyfillin (yyGLRStackItem *, int, int) __attribute__ ((__unused__));
static void
yyfillin (yyGLRStackItem *yyvsp, int yylow0, int yylow1)
{
  yyGLRState* s;
  int i;
  s = yyvsp[yylow0].yystate.yypred;
  for (i = yylow0-1; i >= yylow1; i -= 1)
    {
      YYASSERT (s->yyresolved);
      yyvsp[i].yystate.yyresolved = yytrue;
      yyvsp[i].yystate.yysemantics.yysval = s->yysemantics.yysval;
      yyvsp[i].yystate.yyloc = s->yyloc;
      s = yyvsp[i].yystate.yypred = s->yypred;
    }
}

/* Do nothing if YYNORMAL or if *YYLOW <= YYLOW1.  Otherwise, fill in
 * YYVSP[YYLOW1 .. *YYLOW-1] as in yyfillin and set *YYLOW = YYLOW1.
 * For convenience, always return YYLOW1.  */
static inline int yyfill (yyGLRStackItem *, int *, int, yybool)
     __attribute__ ((__unused__));
static inline int
yyfill (yyGLRStackItem *yyvsp, int *yylow, int yylow1, yybool yynormal)
{
  if (!yynormal && yylow1 < *yylow)
    {
      yyfillin (yyvsp, *yylow, yylow1);
      *yylow = yylow1;
    }
  return yylow1;
}

/** Perform user action for rule number YYN, with RHS length YYRHSLEN,
 *  and top stack item YYVSP.  YYLVALP points to place to put semantic
 *  value ($$), and yylocp points to place for location information
 *  (@$).  Returns yyok for normal return, yyaccept for YYACCEPT,
 *  yyerr for YYERROR, yyabort for YYABORT.  */
/*ARGSUSED*/ static YYRESULTTAG
yyuserAction (yyRuleNum yyn, int yyrhslen, yyGLRStackItem* yyvsp,
	      YYSTYPE* yyvalp,
	      YYLTYPE* YYOPTIONAL_LOC (yylocp),
	      yyGLRStack* yystackp
	      )
{
  yybool yynormal __attribute__ ((__unused__)) =
    (yystackp->yysplitPoint == NULL);
  int yylow;
# undef yyerrok
# define yyerrok (yystackp->yyerrState = 0)
# undef YYACCEPT
# define YYACCEPT return yyaccept
# undef YYABORT
# define YYABORT return yyabort
# undef YYERROR
# define YYERROR return yyerrok, yyerr
# undef YYRECOVERING
# define YYRECOVERING() (yystackp->yyerrState != 0)
# undef yyclearin
# define yyclearin (yychar = YYEMPTY)
# undef YYFILL
# define YYFILL(N) yyfill (yyvsp, &yylow, N, yynormal)
# undef YYBACKUP
# define YYBACKUP(Token, Value)						     \
  return yyerror (YY_("syntax error: cannot back up")),     \
	 yyerrok, yyerr

  yylow = 1;
  if (yyrhslen == 0)
    *yyvalp = yyval_default;
  else
    *yyvalp = yyvsp[YYFILL (1-yyrhslen)].yystate.yysemantics.yysval;
  YYLLOC_DEFAULT ((*yylocp), (yyvsp - yyrhslen), yyrhslen);
  yystackp->yyerror_range[1].yystate.yyloc = *yylocp;

  switch (yyn)
    {
        case 3:

/* Line 936 of glr.c  */
#line 140 "c:\\.Trash-1000\\doxygen-svn\\src\\\\..\\src\\verilogparser.y"
    {identVerilog.resize(0);}
    break;

  case 5:

/* Line 936 of glr.c  */
#line 141 "c:\\.Trash-1000\\doxygen-svn\\src\\\\..\\src\\verilogparser.y"
    {identVerilog.resize(0);}
    break;

  case 7:

/* Line 936 of glr.c  */
#line 152 "c:\\.Trash-1000\\doxygen-svn\\src\\\\..\\src\\verilogparser.y"
    {vbufreset();}
    break;

  case 8:

/* Line 936 of glr.c  */
#line 153 "c:\\.Trash-1000\\doxygen-svn\\src\\\\..\\src\\verilogparser.y"
    {vbufreset();}
    break;

  case 9:

/* Line 936 of glr.c  */
#line 154 "c:\\.Trash-1000\\doxygen-svn\\src\\\\..\\src\\verilogparser.y"
    {vbufreset();}
    break;

  case 18:

/* Line 936 of glr.c  */
#line 186 "c:\\.Trash-1000\\doxygen-svn\\src\\\\..\\src\\verilogparser.y"
    {
                                if(!parseCode) 
								{ 
								   QCString confName=(((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (1))].yystate.yysemantics.yysval.cstr);
								   Entry *conf=VerilogDocGen::makeNewEntry(confName.data(),Entry::VARIABLE_SEC,VerilogDocGen::CONFIGURATION,c_lloc.first_line);
                                   conf->type="configuration";
								   addGlobalVerilogMember(conf);
								}          
				            }
    break;

  case 37:

/* Line 936 of glr.c  */
#line 242 "c:\\.Trash-1000\\doxygen-svn\\src\\\\..\\src\\verilogparser.y"
    {}
    break;

  case 53:

/* Line 936 of glr.c  */
#line 271 "c:\\.Trash-1000\\doxygen-svn\\src\\\\..\\src\\verilogparser.y"
    {
                                    yydebug=0; //sets parser in debug mode
                                    if(!parseCode) { 
							              
											 lastModule=VerilogDocGen::makeNewEntry("",Entry::CLASS_SEC,VerilogDocGen::MODULE);
                                            currentVerilog=lastModule;
                                             currentVerilog->protection=Public;
					                         parseModule();
							                 CurrState=VerilogDocGen::STATE_MODULE;
				                             
										    }
                                            else {
											      parseModule();
                                         		  }
                               currVerilogType=0;						       
							   vbufreset();
							 }
    break;

  case 54:

/* Line 936 of glr.c  */
#line 290 "c:\\.Trash-1000\\doxygen-svn\\src\\\\..\\src\\verilogparser.y"
    {
            if(!parseCode){ 
			        int ll=getVerilogLine();
	                currentVerilog->endBodyLine=ll;
			       } 	 
              vbufreset(); 
		   }
    break;

  case 55:

/* Line 936 of glr.c  */
#line 296 "c:\\.Trash-1000\\doxygen-svn\\src\\\\..\\src\\verilogparser.y"
    {currentVerilog=0;vbufreset();}
    break;

  case 58:

/* Line 936 of glr.c  */
#line 306 "c:\\.Trash-1000\\doxygen-svn\\src\\\\..\\src\\verilogparser.y"
    {currVerilogType=VerilogDocGen::PORT;}
    break;

  case 59:

/* Line 936 of glr.c  */
#line 306 "c:\\.Trash-1000\\doxygen-svn\\src\\\\..\\src\\verilogparser.y"
    {currVerilogType=0;vbufreset();}
    break;

  case 60:

/* Line 936 of glr.c  */
#line 307 "c:\\.Trash-1000\\doxygen-svn\\src\\\\..\\src\\verilogparser.y"
    {vbufreset();}
    break;

  case 61:

/* Line 936 of glr.c  */
#line 310 "c:\\.Trash-1000\\doxygen-svn\\src\\\\..\\src\\verilogparser.y"
    { currVerilogType=VerilogDocGen::PARAMETER;}
    break;

  case 62:

/* Line 936 of glr.c  */
#line 310 "c:\\.Trash-1000\\doxygen-svn\\src\\\\..\\src\\verilogparser.y"
    {currVerilogType=0;}
    break;

  case 63:

/* Line 936 of glr.c  */
#line 311 "c:\\.Trash-1000\\doxygen-svn\\src\\\\..\\src\\verilogparser.y"
    { currVerilogType=VerilogDocGen::PARAMETER;}
    break;

  case 64:

/* Line 936 of glr.c  */
#line 311 "c:\\.Trash-1000\\doxygen-svn\\src\\\\..\\src\\verilogparser.y"
    {currVerilogType=0;}
    break;

  case 69:

/* Line 936 of glr.c  */
#line 320 "c:\\.Trash-1000\\doxygen-svn\\src\\\\..\\src\\verilogparser.y"
    {currVerilogType=VerilogDocGen::PORT;}
    break;

  case 70:

/* Line 936 of glr.c  */
#line 320 "c:\\.Trash-1000\\doxygen-svn\\src\\\\..\\src\\verilogparser.y"
    {currVerilogType=0;vbufreset();}
    break;

  case 71:

/* Line 936 of glr.c  */
#line 321 "c:\\.Trash-1000\\doxygen-svn\\src\\\\..\\src\\verilogparser.y"
    {currVerilogType=0;vbufreset();}
    break;

  case 72:

/* Line 936 of glr.c  */
#line 325 "c:\\.Trash-1000\\doxygen-svn\\src\\\\..\\src\\verilogparser.y"
    {currVerilogType=0;vbufreset();}
    break;

  case 73:

/* Line 936 of glr.c  */
#line 329 "c:\\.Trash-1000\\doxygen-svn\\src\\\\..\\src\\verilogparser.y"
    {parseListOfPorts();vbufreset();}
    break;

  case 74:

/* Line 936 of glr.c  */
#line 330 "c:\\.Trash-1000\\doxygen-svn\\src\\\\..\\src\\verilogparser.y"
    {parseListOfPorts();vbufreset();}
    break;

  case 86:

/* Line 936 of glr.c  */
#line 352 "c:\\.Trash-1000\\doxygen-svn\\src\\\\..\\src\\verilogparser.y"
    { currVerilogType=0;vbufreset();}
    break;

  case 87:

/* Line 936 of glr.c  */
#line 353 "c:\\.Trash-1000\\doxygen-svn\\src\\\\..\\src\\verilogparser.y"
    { currVerilogType=0;vbufreset();}
    break;

  case 88:

/* Line 936 of glr.c  */
#line 354 "c:\\.Trash-1000\\doxygen-svn\\src\\\\..\\src\\verilogparser.y"
    { currVerilogType=0;vbufreset();}
    break;

  case 89:

/* Line 936 of glr.c  */
#line 355 "c:\\.Trash-1000\\doxygen-svn\\src\\\\..\\src\\verilogparser.y"
    { vbufreset();}
    break;

  case 92:

/* Line 936 of glr.c  */
#line 364 "c:\\.Trash-1000\\doxygen-svn\\src\\\\..\\src\\verilogparser.y"
    {vbufreset();}
    break;

  case 93:

/* Line 936 of glr.c  */
#line 365 "c:\\.Trash-1000\\doxygen-svn\\src\\\\..\\src\\verilogparser.y"
    {vbufreset();}
    break;

  case 96:

/* Line 936 of glr.c  */
#line 368 "c:\\.Trash-1000\\doxygen-svn\\src\\\\..\\src\\verilogparser.y"
    {vbufreset();}
    break;

  case 98:

/* Line 936 of glr.c  */
#line 373 "c:\\.Trash-1000\\doxygen-svn\\src\\\\..\\src\\verilogparser.y"
    {vbufreset();}
    break;

  case 99:

/* Line 936 of glr.c  */
#line 374 "c:\\.Trash-1000\\doxygen-svn\\src\\\\..\\src\\verilogparser.y"
    {vbufreset();}
    break;

  case 100:

/* Line 936 of glr.c  */
#line 375 "c:\\.Trash-1000\\doxygen-svn\\src\\\\..\\src\\verilogparser.y"
    {vbufreset();}
    break;

  case 101:

/* Line 936 of glr.c  */
#line 376 "c:\\.Trash-1000\\doxygen-svn\\src\\\\..\\src\\verilogparser.y"
    {vbufreset();}
    break;

  case 102:

/* Line 936 of glr.c  */
#line 377 "c:\\.Trash-1000\\doxygen-svn\\src\\\\..\\src\\verilogparser.y"
    {vbufreset();}
    break;

  case 103:

/* Line 936 of glr.c  */
#line 378 "c:\\.Trash-1000\\doxygen-svn\\src\\\\..\\src\\verilogparser.y"
    {vbufreset();}
    break;

  case 104:

/* Line 936 of glr.c  */
#line 379 "c:\\.Trash-1000\\doxygen-svn\\src\\\\..\\src\\verilogparser.y"
    {vbufreset();}
    break;

  case 113:

/* Line 936 of glr.c  */
#line 390 "c:\\.Trash-1000\\doxygen-svn\\src\\\\..\\src\\verilogparser.y"
    {vbufreset();}
    break;

  case 114:

/* Line 936 of glr.c  */
#line 391 "c:\\.Trash-1000\\doxygen-svn\\src\\\\..\\src\\verilogparser.y"
    {}
    break;

  case 115:

/* Line 936 of glr.c  */
#line 392 "c:\\.Trash-1000\\doxygen-svn\\src\\\\..\\src\\verilogparser.y"
    {}
    break;

  case 116:

/* Line 936 of glr.c  */
#line 396 "c:\\.Trash-1000\\doxygen-svn\\src\\\\..\\src\\verilogparser.y"
    { if(parseCode) currVerilogType=VerilogDocGen::DEFPARAM;}
    break;

  case 117:

/* Line 936 of glr.c  */
#line 396 "c:\\.Trash-1000\\doxygen-svn\\src\\\\..\\src\\verilogparser.y"
    {vbufreset(); if(parseCode) currVerilogType=0; }
    break;

  case 118:

/* Line 936 of glr.c  */
#line 397 "c:\\.Trash-1000\\doxygen-svn\\src\\\\..\\src\\verilogparser.y"
    {vbufreset(); if(parseCode) currVerilogType=0;}
    break;

  case 119:

/* Line 936 of glr.c  */
#line 405 "c:\\.Trash-1000\\doxygen-svn\\src\\\\..\\src\\verilogparser.y"
    { currVerilogType=VerilogDocGen::PARAMETER;}
    break;

  case 120:

/* Line 936 of glr.c  */
#line 405 "c:\\.Trash-1000\\doxygen-svn\\src\\\\..\\src\\verilogparser.y"
    {currVerilogType=0;vbufreset();}
    break;

  case 121:

/* Line 936 of glr.c  */
#line 406 "c:\\.Trash-1000\\doxygen-svn\\src\\\\..\\src\\verilogparser.y"
    { currVerilogType=VerilogDocGen::PARAMETER;}
    break;

  case 122:

/* Line 936 of glr.c  */
#line 406 "c:\\.Trash-1000\\doxygen-svn\\src\\\\..\\src\\verilogparser.y"
    {currVerilogType=0;vbufreset();}
    break;

  case 123:

/* Line 936 of glr.c  */
#line 407 "c:\\.Trash-1000\\doxygen-svn\\src\\\\..\\src\\verilogparser.y"
    { currVerilogType=VerilogDocGen::PARAMETER;}
    break;

  case 124:

/* Line 936 of glr.c  */
#line 407 "c:\\.Trash-1000\\doxygen-svn\\src\\\\..\\src\\verilogparser.y"
    {currVerilogType=0;vbufreset();}
    break;

  case 125:

/* Line 936 of glr.c  */
#line 408 "c:\\.Trash-1000\\doxygen-svn\\src\\\\..\\src\\verilogparser.y"
    { currVerilogType=VerilogDocGen::PARAMETER;}
    break;

  case 126:

/* Line 936 of glr.c  */
#line 408 "c:\\.Trash-1000\\doxygen-svn\\src\\\\..\\src\\verilogparser.y"
    {currVerilogType=0;vbufreset();}
    break;

  case 127:

/* Line 936 of glr.c  */
#line 409 "c:\\.Trash-1000\\doxygen-svn\\src\\\\..\\src\\verilogparser.y"
    { currVerilogType=VerilogDocGen::PARAMETER;}
    break;

  case 128:

/* Line 936 of glr.c  */
#line 409 "c:\\.Trash-1000\\doxygen-svn\\src\\\\..\\src\\verilogparser.y"
    {currVerilogType=0;vbufreset();}
    break;

  case 130:

/* Line 936 of glr.c  */
#line 413 "c:\\.Trash-1000\\doxygen-svn\\src\\\\..\\src\\verilogparser.y"
    { currVerilogType=VerilogDocGen::PARAMETER;}
    break;

  case 131:

/* Line 936 of glr.c  */
#line 413 "c:\\.Trash-1000\\doxygen-svn\\src\\\\..\\src\\verilogparser.y"
    {currVerilogType=0;vbufreset();}
    break;

  case 132:

/* Line 936 of glr.c  */
#line 414 "c:\\.Trash-1000\\doxygen-svn\\src\\\\..\\src\\verilogparser.y"
    { currVerilogType=VerilogDocGen::PARAMETER;}
    break;

  case 133:

/* Line 936 of glr.c  */
#line 414 "c:\\.Trash-1000\\doxygen-svn\\src\\\\..\\src\\verilogparser.y"
    {currVerilogType=0;vbufreset();}
    break;

  case 134:

/* Line 936 of glr.c  */
#line 415 "c:\\.Trash-1000\\doxygen-svn\\src\\\\..\\src\\verilogparser.y"
    { currVerilogType=VerilogDocGen::PARAMETER;}
    break;

  case 135:

/* Line 936 of glr.c  */
#line 415 "c:\\.Trash-1000\\doxygen-svn\\src\\\\..\\src\\verilogparser.y"
    {currVerilogType=0;vbufreset();}
    break;

  case 136:

/* Line 936 of glr.c  */
#line 416 "c:\\.Trash-1000\\doxygen-svn\\src\\\\..\\src\\verilogparser.y"
    { currVerilogType=VerilogDocGen::PARAMETER;}
    break;

  case 137:

/* Line 936 of glr.c  */
#line 416 "c:\\.Trash-1000\\doxygen-svn\\src\\\\..\\src\\verilogparser.y"
    {currVerilogType=0;vbufreset();}
    break;

  case 138:

/* Line 936 of glr.c  */
#line 417 "c:\\.Trash-1000\\doxygen-svn\\src\\\\..\\src\\verilogparser.y"
    { currVerilogType=VerilogDocGen::PARAMETER;}
    break;

  case 139:

/* Line 936 of glr.c  */
#line 417 "c:\\.Trash-1000\\doxygen-svn\\src\\\\..\\src\\verilogparser.y"
    {currVerilogType=0;vbufreset();}
    break;

  case 140:

/* Line 936 of glr.c  */
#line 418 "c:\\.Trash-1000\\doxygen-svn\\src\\\\..\\src\\verilogparser.y"
    {currVerilogType=0;vbufreset();}
    break;

  case 141:

/* Line 936 of glr.c  */
#line 421 "c:\\.Trash-1000\\doxygen-svn\\src\\\\..\\src\\verilogparser.y"
    { vbufreset();}
    break;

  case 142:

/* Line 936 of glr.c  */
#line 422 "c:\\.Trash-1000\\doxygen-svn\\src\\\\..\\src\\verilogparser.y"
    { vbufreset();}
    break;

  case 144:

/* Line 936 of glr.c  */
#line 430 "c:\\.Trash-1000\\doxygen-svn\\src\\\\..\\src\\verilogparser.y"
    { currVerilogType=VerilogDocGen::INOUT; }
    break;

  case 145:

/* Line 936 of glr.c  */
#line 430 "c:\\.Trash-1000\\doxygen-svn\\src\\\\..\\src\\verilogparser.y"
    {if(!parseCode)parsePortDir(currentVerilog,3);vbufreset();}
    break;

  case 146:

/* Line 936 of glr.c  */
#line 431 "c:\\.Trash-1000\\doxygen-svn\\src\\\\..\\src\\verilogparser.y"
    { currVerilogType=VerilogDocGen::INOUT; }
    break;

  case 147:

/* Line 936 of glr.c  */
#line 431 "c:\\.Trash-1000\\doxygen-svn\\src\\\\..\\src\\verilogparser.y"
    {if(!parseCode)parsePortDir(currentVerilog,3);vbufreset();}
    break;

  case 148:

/* Line 936 of glr.c  */
#line 432 "c:\\.Trash-1000\\doxygen-svn\\src\\\\..\\src\\verilogparser.y"
    {if(!parseCode)parsePortDir(currentVerilog,3);vbufreset();}
    break;

  case 149:

/* Line 936 of glr.c  */
#line 433 "c:\\.Trash-1000\\doxygen-svn\\src\\\\..\\src\\verilogparser.y"
    {if(!parseCode)parsePortDir(currentVerilog,3);vbufreset();}
    break;

  case 150:

/* Line 936 of glr.c  */
#line 436 "c:\\.Trash-1000\\doxygen-svn\\src\\\\..\\src\\verilogparser.y"
    { currVerilogType=VerilogDocGen::INPUT; }
    break;

  case 151:

/* Line 936 of glr.c  */
#line 436 "c:\\.Trash-1000\\doxygen-svn\\src\\\\..\\src\\verilogparser.y"
    {if(!parseCode)parsePortDir(currentVerilog,3);vbufreset();}
    break;

  case 152:

/* Line 936 of glr.c  */
#line 437 "c:\\.Trash-1000\\doxygen-svn\\src\\\\..\\src\\verilogparser.y"
    { currVerilogType=VerilogDocGen::INPUT; }
    break;

  case 153:

/* Line 936 of glr.c  */
#line 437 "c:\\.Trash-1000\\doxygen-svn\\src\\\\..\\src\\verilogparser.y"
    {if(!parseCode)parsePortDir(currentVerilog,3);vbufreset();}
    break;

  case 154:

/* Line 936 of glr.c  */
#line 438 "c:\\.Trash-1000\\doxygen-svn\\src\\\\..\\src\\verilogparser.y"
    {if(!parseCode)parsePortDir(currentVerilog,3);vbufreset();}
    break;

  case 155:

/* Line 936 of glr.c  */
#line 439 "c:\\.Trash-1000\\doxygen-svn\\src\\\\..\\src\\verilogparser.y"
    {if(!parseCode)parsePortDir(currentVerilog,3);vbufreset();}
    break;

  case 156:

/* Line 936 of glr.c  */
#line 444 "c:\\.Trash-1000\\doxygen-svn\\src\\\\..\\src\\verilogparser.y"
    { currVerilogType=VerilogDocGen::OUTPUT; }
    break;

  case 157:

/* Line 936 of glr.c  */
#line 444 "c:\\.Trash-1000\\doxygen-svn\\src\\\\..\\src\\verilogparser.y"
    {if(!parseCode)parsePortDir(currentVerilog,3);vbufreset();}
    break;

  case 158:

/* Line 936 of glr.c  */
#line 445 "c:\\.Trash-1000\\doxygen-svn\\src\\\\..\\src\\verilogparser.y"
    { currVerilogType=VerilogDocGen::OUTPUT; }
    break;

  case 159:

/* Line 936 of glr.c  */
#line 445 "c:\\.Trash-1000\\doxygen-svn\\src\\\\..\\src\\verilogparser.y"
    {if(!parseCode)parsePortDir(currentVerilog,3);vbufreset();}
    break;

  case 160:

/* Line 936 of glr.c  */
#line 447 "c:\\.Trash-1000\\doxygen-svn\\src\\\\..\\src\\verilogparser.y"
    { currVerilogType=VerilogDocGen::OUTPUT; }
    break;

  case 161:

/* Line 936 of glr.c  */
#line 447 "c:\\.Trash-1000\\doxygen-svn\\src\\\\..\\src\\verilogparser.y"
    {if(!parseCode)parsePortDir(currentVerilog,3);vbufreset();}
    break;

  case 163:

/* Line 936 of glr.c  */
#line 450 "c:\\.Trash-1000\\doxygen-svn\\src\\\\..\\src\\verilogparser.y"
    {if(!parseCode)parsePortDir(currentVerilog,3);vbufreset();}
    break;

  case 164:

/* Line 936 of glr.c  */
#line 451 "c:\\.Trash-1000\\doxygen-svn\\src\\\\..\\src\\verilogparser.y"
    {if(!parseCode)parsePortDir(currentVerilog,3);vbufreset();}
    break;

  case 165:

/* Line 936 of glr.c  */
#line 452 "c:\\.Trash-1000\\doxygen-svn\\src\\\\..\\src\\verilogparser.y"
    {if(!parseCode)parsePortDir(currentVerilog,3);vbufreset();}
    break;

  case 176:

/* Line 936 of glr.c  */
#line 480 "c:\\.Trash-1000\\doxygen-svn\\src\\\\..\\src\\verilogparser.y"
    { vbufreset();}
    break;

  case 177:

/* Line 936 of glr.c  */
#line 481 "c:\\.Trash-1000\\doxygen-svn\\src\\\\..\\src\\verilogparser.y"
    { vbufreset();}
    break;

  case 180:

/* Line 936 of glr.c  */
#line 488 "c:\\.Trash-1000\\doxygen-svn\\src\\\\..\\src\\verilogparser.y"
    {vbufreset();}
    break;

  case 182:

/* Line 936 of glr.c  */
#line 493 "c:\\.Trash-1000\\doxygen-svn\\src\\\\..\\src\\verilogparser.y"
    {vbufreset();}
    break;

  case 183:

/* Line 936 of glr.c  */
#line 494 "c:\\.Trash-1000\\doxygen-svn\\src\\\\..\\src\\verilogparser.y"
    {vbufreset();}
    break;

  case 184:

/* Line 936 of glr.c  */
#line 495 "c:\\.Trash-1000\\doxygen-svn\\src\\\\..\\src\\verilogparser.y"
    {vbufreset();}
    break;

  case 185:

/* Line 936 of glr.c  */
#line 496 "c:\\.Trash-1000\\doxygen-svn\\src\\\\..\\src\\verilogparser.y"
    {vbufreset();}
    break;

  case 186:

/* Line 936 of glr.c  */
#line 497 "c:\\.Trash-1000\\doxygen-svn\\src\\\\..\\src\\verilogparser.y"
    {vbufreset();}
    break;

  case 187:

/* Line 936 of glr.c  */
#line 498 "c:\\.Trash-1000\\doxygen-svn\\src\\\\..\\src\\verilogparser.y"
    {vbufreset();}
    break;

  case 188:

/* Line 936 of glr.c  */
#line 499 "c:\\.Trash-1000\\doxygen-svn\\src\\\\..\\src\\verilogparser.y"
    {vbufreset();}
    break;

  case 189:

/* Line 936 of glr.c  */
#line 500 "c:\\.Trash-1000\\doxygen-svn\\src\\\\..\\src\\verilogparser.y"
    {vbufreset();}
    break;

  case 190:

/* Line 936 of glr.c  */
#line 501 "c:\\.Trash-1000\\doxygen-svn\\src\\\\..\\src\\verilogparser.y"
    {vbufreset();}
    break;

  case 191:

/* Line 936 of glr.c  */
#line 502 "c:\\.Trash-1000\\doxygen-svn\\src\\\\..\\src\\verilogparser.y"
    {vbufreset();}
    break;

  case 192:

/* Line 936 of glr.c  */
#line 503 "c:\\.Trash-1000\\doxygen-svn\\src\\\\..\\src\\verilogparser.y"
    {vbufreset();}
    break;

  case 197:

/* Line 936 of glr.c  */
#line 516 "c:\\.Trash-1000\\doxygen-svn\\src\\\\..\\src\\verilogparser.y"
    {vbufreset();currVerilogType=0;}
    break;

  case 198:

/* Line 936 of glr.c  */
#line 517 "c:\\.Trash-1000\\doxygen-svn\\src\\\\..\\src\\verilogparser.y"
    {vbufreset();}
    break;

  case 199:

/* Line 936 of glr.c  */
#line 519 "c:\\.Trash-1000\\doxygen-svn\\src\\\\..\\src\\verilogparser.y"
    { currVerilogType=VerilogDocGen::TIME; }
    break;

  case 200:

/* Line 936 of glr.c  */
#line 519 "c:\\.Trash-1000\\doxygen-svn\\src\\\\..\\src\\verilogparser.y"
    {vbufreset();currVerilogType=0;}
    break;

  case 201:

/* Line 936 of glr.c  */
#line 520 "c:\\.Trash-1000\\doxygen-svn\\src\\\\..\\src\\verilogparser.y"
    {vbufreset();}
    break;

  case 202:

/* Line 936 of glr.c  */
#line 523 "c:\\.Trash-1000\\doxygen-svn\\src\\\\..\\src\\verilogparser.y"
    {currVerilogType=0;}
    break;

  case 203:

/* Line 936 of glr.c  */
#line 524 "c:\\.Trash-1000\\doxygen-svn\\src\\\\..\\src\\verilogparser.y"
    {currVerilogType=0;}
    break;

  case 204:

/* Line 936 of glr.c  */
#line 525 "c:\\.Trash-1000\\doxygen-svn\\src\\\\..\\src\\verilogparser.y"
    { vbufreset();}
    break;

  case 205:

/* Line 936 of glr.c  */
#line 528 "c:\\.Trash-1000\\doxygen-svn\\src\\\\..\\src\\verilogparser.y"
    { currVerilogType=VerilogDocGen::TIME; }
    break;

  case 206:

/* Line 936 of glr.c  */
#line 528 "c:\\.Trash-1000\\doxygen-svn\\src\\\\..\\src\\verilogparser.y"
    {vbufreset();currVerilogType=0;}
    break;

  case 207:

/* Line 936 of glr.c  */
#line 529 "c:\\.Trash-1000\\doxygen-svn\\src\\\\..\\src\\verilogparser.y"
    {vbufreset();}
    break;

  case 216:

/* Line 936 of glr.c  */
#line 558 "c:\\.Trash-1000\\doxygen-svn\\src\\\\..\\src\\verilogparser.y"
    {}
    break;

  case 223:

/* Line 936 of glr.c  */
#line 577 "c:\\.Trash-1000\\doxygen-svn\\src\\\\..\\src\\verilogparser.y"
    {if(!parseCode) {parseReg(currentVerilog);}vbufreset();}
    break;

  case 224:

/* Line 936 of glr.c  */
#line 580 "c:\\.Trash-1000\\doxygen-svn\\src\\\\..\\src\\verilogparser.y"
    {if(!parseCode) {parseReg(currentVerilog);}vbufreset();}
    break;

  case 225:

/* Line 936 of glr.c  */
#line 581 "c:\\.Trash-1000\\doxygen-svn\\src\\\\..\\src\\verilogparser.y"
    {if(!parseCode) {parseReg(currentVerilog);}vbufreset();}
    break;

  case 241:

/* Line 936 of glr.c  */
#line 620 "c:\\.Trash-1000\\doxygen-svn\\src\\\\..\\src\\verilogparser.y"
    {if(!parseCode) {
                                                                   							parseReg(currentVerilog);}
																							vbufreset();}
    break;

  case 242:

/* Line 936 of glr.c  */
#line 623 "c:\\.Trash-1000\\doxygen-svn\\src\\\\..\\src\\verilogparser.y"
    {if(!parseCode) parseReg(currentVerilog);vbufreset();}
    break;

  case 243:

/* Line 936 of glr.c  */
#line 631 "c:\\.Trash-1000\\doxygen-svn\\src\\\\..\\src\\verilogparser.y"
    {if(!parseCode) {parseReg(currentVerilog);}vbufreset();}
    break;

  case 244:

/* Line 936 of glr.c  */
#line 633 "c:\\.Trash-1000\\doxygen-svn\\src\\\\..\\src\\verilogparser.y"
    {
                          			 if(currVerilogType==VerilogDocGen::PARAMETER && !parseCode)
									 parseParam(currentVerilog);
									 vbufreset();
	                   }
    break;

  case 248:

/* Line 936 of glr.c  */
#line 662 "c:\\.Trash-1000\\doxygen-svn\\src\\\\..\\src\\verilogparser.y"
    {if(!parseCode && currentFunctionVerilog)
						                                {
														  currentFunctionVerilog->endBodyLine=getVerilogPrevLine();
														} vbufreset(); }
    break;

  case 249:

/* Line 936 of glr.c  */
#line 670 "c:\\.Trash-1000\\doxygen-svn\\src\\\\..\\src\\verilogparser.y"
    {if(!parseCode && currentFunctionVerilog){currentFunctionVerilog->endBodyLine=getVerilogPrevLine();} vbufreset(); }
    break;

  case 251:

/* Line 936 of glr.c  */
#line 674 "c:\\.Trash-1000\\doxygen-svn\\src\\\\..\\src\\verilogparser.y"
    { vbufreset(); }
    break;

  case 252:

/* Line 936 of glr.c  */
#line 678 "c:\\.Trash-1000\\doxygen-svn\\src\\\\..\\src\\verilogparser.y"
    {  if(!parseCode){
                             //    printf("\n  funcname [%s] --\n",getVerilogString());
                                 currentFunctionVerilog=VerilogDocGen::makeNewEntry("",Entry::FUNCTION_SEC,VerilogDocGen::FUNCTION);
								 currentFunctionVerilog->fileName=getVerilogParsingFile();
								 parseFunction(currentFunctionVerilog);
								 CurrState=VerilogDocGen::STATE_FUNCTION;
								 }
								 vbufreset();
							   }
    break;

  case 266:

/* Line 936 of glr.c  */
#line 714 "c:\\.Trash-1000\\doxygen-svn\\src\\\\..\\src\\verilogparser.y"
    { currVerilogType=0;}
    break;

  case 269:

/* Line 936 of glr.c  */
#line 728 "c:\\.Trash-1000\\doxygen-svn\\src\\\\..\\src\\verilogparser.y"
    {if(!parseCode && currentFunctionVerilog) { currentFunctionVerilog->endBodyLine=getVerilogPrevLine();} vbufreset();}
    break;

  case 271:

/* Line 936 of glr.c  */
#line 732 "c:\\.Trash-1000\\doxygen-svn\\src\\\\..\\src\\verilogparser.y"
    {if(!parseCode && currentFunctionVerilog) { currentFunctionVerilog->endBodyLine=getVerilogPrevLine();} vbufreset();}
    break;

  case 272:

/* Line 936 of glr.c  */
#line 734 "c:\\.Trash-1000\\doxygen-svn\\src\\\\..\\src\\verilogparser.y"
    {if(!parseCode && currentFunctionVerilog) { currentFunctionVerilog->endBodyLine=getVerilogPrevLine();} vbufreset();}
    break;

  case 273:

/* Line 936 of glr.c  */
#line 735 "c:\\.Trash-1000\\doxygen-svn\\src\\\\..\\src\\verilogparser.y"
    { vbufreset();}
    break;

  case 274:

/* Line 936 of glr.c  */
#line 738 "c:\\.Trash-1000\\doxygen-svn\\src\\\\..\\src\\verilogparser.y"
    {  if(!parseCode){
                             //    printf("\n  funcname [%s] --\n",getVerilogString());
                                 currentFunctionVerilog=VerilogDocGen::makeNewEntry("",Entry::FUNCTION_SEC,VerilogDocGen::TASK);
								 currentFunctionVerilog->fileName=getVerilogParsingFile();
								 parseFunction(currentFunctionVerilog);
								 CurrState=VerilogDocGen::STATE_FUNCTION;
								 }
								 vbufreset();
							   }
    break;

  case 284:

/* Line 936 of glr.c  */
#line 774 "c:\\.Trash-1000\\doxygen-svn\\src\\\\..\\src\\verilogparser.y"
    {
                             if(!parseCode){
							   parsePortDir(currentVerilog,3);}
							   vbufreset();
                     }
    break;

  case 285:

/* Line 936 of glr.c  */
#line 779 "c:\\.Trash-1000\\doxygen-svn\\src\\\\..\\src\\verilogparser.y"
    {if(!parseCode){
							   parsePortDir(currentVerilog,3);}
							   vbufreset();
                      }
    break;

  case 286:

/* Line 936 of glr.c  */
#line 783 "c:\\.Trash-1000\\doxygen-svn\\src\\\\..\\src\\verilogparser.y"
    {if(!parseCode){
							   parsePortDir(currentVerilog,3);}
							   vbufreset();
                       }
    break;

  case 287:

/* Line 936 of glr.c  */
#line 788 "c:\\.Trash-1000\\doxygen-svn\\src\\\\..\\src\\verilogparser.y"
    {
                             if(!parseCode){
							   parsePortDir(currentVerilog,3);}
							   vbufreset();
                   }
    break;

  case 288:

/* Line 936 of glr.c  */
#line 793 "c:\\.Trash-1000\\doxygen-svn\\src\\\\..\\src\\verilogparser.y"
    {
                             if(!parseCode){
							   parsePortDir(currentVerilog,3);}
							   vbufreset();
                    }
    break;

  case 295:

/* Line 936 of glr.c  */
#line 811 "c:\\.Trash-1000\\doxygen-svn\\src\\\\..\\src\\verilogparser.y"
    { if(!parseCode )currVerilogType=VerilogDocGen::INOUT;}
    break;

  case 296:

/* Line 936 of glr.c  */
#line 812 "c:\\.Trash-1000\\doxygen-svn\\src\\\\..\\src\\verilogparser.y"
    { if(!parseCode)currVerilogType=VerilogDocGen::OUTPUT;}
    break;

  case 297:

/* Line 936 of glr.c  */
#line 813 "c:\\.Trash-1000\\doxygen-svn\\src\\\\..\\src\\verilogparser.y"
    { if(!parseCode)currVerilogType=VerilogDocGen::INPUT;}
    break;

  case 298:

/* Line 936 of glr.c  */
#line 814 "c:\\.Trash-1000\\doxygen-svn\\src\\\\..\\src\\verilogparser.y"
    { if(!parseCode){parsePortDir(currentVerilog,3);vbufreset();}}
    break;

  case 301:

/* Line 936 of glr.c  */
#line 822 "c:\\.Trash-1000\\doxygen-svn\\src\\\\..\\src\\verilogparser.y"
    {if(!parseCode){currVerilogType=VerilogDocGen::INPUT;parsePortDir(currentVerilog,3);}vbufreset();}
    break;

  case 302:

/* Line 936 of glr.c  */
#line 823 "c:\\.Trash-1000\\doxygen-svn\\src\\\\..\\src\\verilogparser.y"
    {if(!parseCode){currVerilogType=VerilogDocGen::INPUT;parsePortDir(currentVerilog,3);}vbufreset();}
    break;

  case 303:

/* Line 936 of glr.c  */
#line 824 "c:\\.Trash-1000\\doxygen-svn\\src\\\\..\\src\\verilogparser.y"
    {if(!parseCode){currVerilogType=VerilogDocGen::INPUT;parsePortDir(currentVerilog,3);}vbufreset();}
    break;

  case 304:

/* Line 936 of glr.c  */
#line 825 "c:\\.Trash-1000\\doxygen-svn\\src\\\\..\\src\\verilogparser.y"
    {if(!parseCode){currVerilogType=VerilogDocGen::INPUT;parsePortDir(currentVerilog,3);}vbufreset();}
    break;

  case 305:

/* Line 936 of glr.c  */
#line 826 "c:\\.Trash-1000\\doxygen-svn\\src\\\\..\\src\\verilogparser.y"
    {if(!parseCode){currVerilogType=VerilogDocGen::INPUT;parsePortDir(currentVerilog,3);}vbufreset();}
    break;

  case 306:

/* Line 936 of glr.c  */
#line 827 "c:\\.Trash-1000\\doxygen-svn\\src\\\\..\\src\\verilogparser.y"
    {if(!parseCode){currVerilogType=VerilogDocGen::INPUT;parsePortDir(currentVerilog,3);}vbufreset();}
    break;

  case 307:

/* Line 936 of glr.c  */
#line 828 "c:\\.Trash-1000\\doxygen-svn\\src\\\\..\\src\\verilogparser.y"
    {if(!parseCode){currVerilogType=VerilogDocGen::INPUT;parsePortDir(currentVerilog,3);}vbufreset();}
    break;

  case 308:

/* Line 936 of glr.c  */
#line 829 "c:\\.Trash-1000\\doxygen-svn\\src\\\\..\\src\\verilogparser.y"
    { vbufreset(); }
    break;

  case 321:

/* Line 936 of glr.c  */
#line 853 "c:\\.Trash-1000\\doxygen-svn\\src\\\\..\\src\\verilogparser.y"
    {vbufreset();}
    break;

  case 322:

/* Line 936 of glr.c  */
#line 854 "c:\\.Trash-1000\\doxygen-svn\\src\\\\..\\src\\verilogparser.y"
    {vbufreset();}
    break;

  case 323:

/* Line 936 of glr.c  */
#line 855 "c:\\.Trash-1000\\doxygen-svn\\src\\\\..\\src\\verilogparser.y"
    {vbufreset();}
    break;

  case 333:

/* Line 936 of glr.c  */
#line 876 "c:\\.Trash-1000\\doxygen-svn\\src\\\\..\\src\\verilogparser.y"
    { vbufreset(); }
    break;

  case 346:

/* Line 936 of glr.c  */
#line 918 "c:\\.Trash-1000\\doxygen-svn\\src\\\\..\\src\\verilogparser.y"
    { 
                    						     moduleParamName=prevName;	
                    					         moduleLine=c_lloc.first_line;
                    						}
    break;

  case 347:

/* Line 936 of glr.c  */
#line 921 "c:\\.Trash-1000\\doxygen-svn\\src\\\\..\\src\\verilogparser.y"
    {vbufreset();moduleLine=0;}
    break;

  case 349:

/* Line 936 of glr.c  */
#line 922 "c:\\.Trash-1000\\doxygen-svn\\src\\\\..\\src\\verilogparser.y"
    {vbufreset();}
    break;

  case 357:

/* Line 936 of glr.c  */
#line 937 "c:\\.Trash-1000\\doxygen-svn\\src\\\\..\\src\\verilogparser.y"
    {}
    break;

  case 360:

/* Line 936 of glr.c  */
#line 944 "c:\\.Trash-1000\\doxygen-svn\\src\\\\..\\src\\verilogparser.y"
    { }
    break;

  case 362:

/* Line 936 of glr.c  */
#line 949 "c:\\.Trash-1000\\doxygen-svn\\src\\\\..\\src\\verilogparser.y"
    {vbufreset();}
    break;

  case 363:

/* Line 936 of glr.c  */
#line 950 "c:\\.Trash-1000\\doxygen-svn\\src\\\\..\\src\\verilogparser.y"
    { vbufreset();}
    break;

  case 364:

/* Line 936 of glr.c  */
#line 954 "c:\\.Trash-1000\\doxygen-svn\\src\\\\..\\src\\verilogparser.y"
    {vbufreset(); currVerilogType=0;}
    break;

  case 365:

/* Line 936 of glr.c  */
#line 955 "c:\\.Trash-1000\\doxygen-svn\\src\\\\..\\src\\verilogparser.y"
    {vbufreset(); currVerilogType=0;}
    break;

  case 366:

/* Line 936 of glr.c  */
#line 956 "c:\\.Trash-1000\\doxygen-svn\\src\\\\..\\src\\verilogparser.y"
    {vbufreset(); currVerilogType=0;}
    break;

  case 367:

/* Line 936 of glr.c  */
#line 959 "c:\\.Trash-1000\\doxygen-svn\\src\\\\..\\src\\verilogparser.y"
    { 
                            QCString secName((((yyGLRStackItem const *)yyvsp)[YYFILL ((0) - (2))].yystate.yysemantics.yysval.cstr));
							QCString firstName((((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (2))].yystate.yysemantics.yysval.cstr));;
							 if(moduleParamName.isEmpty()){
							   moduleParamName=secName;
							  moduleLine=c_lloc.last_line;
							   }
							 parseModuleInst(firstName,moduleParamName);
							 moduleParamName.resize(0);
							     if(parseCode){
							  currVerilogType=VerilogDocGen::COMPONENT;
							  vbufreset();
							  }
							  }
    break;

  case 372:

/* Line 936 of glr.c  */
#line 985 "c:\\.Trash-1000\\doxygen-svn\\src\\\\..\\src\\verilogparser.y"
    { vbufreset(); }
    break;

  case 376:

/* Line 936 of glr.c  */
#line 1003 "c:\\.Trash-1000\\doxygen-svn\\src\\\\..\\src\\verilogparser.y"
    {CurrState=VerilogDocGen::STATE_GENERATE;generateItem=true;}
    break;

  case 377:

/* Line 936 of glr.c  */
#line 1003 "c:\\.Trash-1000\\doxygen-svn\\src\\\\..\\src\\verilogparser.y"
    {CurrState=0;generateItem=false;}
    break;

  case 378:

/* Line 936 of glr.c  */
#line 1004 "c:\\.Trash-1000\\doxygen-svn\\src\\\\..\\src\\verilogparser.y"
    {CurrState=0;generateItem=false;}
    break;

  case 383:

/* Line 936 of glr.c  */
#line 1017 "c:\\.Trash-1000\\doxygen-svn\\src\\\\..\\src\\verilogparser.y"
    {vbufreset();}
    break;

  case 384:

/* Line 936 of glr.c  */
#line 1018 "c:\\.Trash-1000\\doxygen-svn\\src\\\\..\\src\\verilogparser.y"
    {vbufreset();}
    break;

  case 385:

/* Line 936 of glr.c  */
#line 1019 "c:\\.Trash-1000\\doxygen-svn\\src\\\\..\\src\\verilogparser.y"
    {vbufreset();}
    break;

  case 386:

/* Line 936 of glr.c  */
#line 1020 "c:\\.Trash-1000\\doxygen-svn\\src\\\\..\\src\\verilogparser.y"
    {vbufreset();}
    break;

  case 387:

/* Line 936 of glr.c  */
#line 1021 "c:\\.Trash-1000\\doxygen-svn\\src\\\\..\\src\\verilogparser.y"
    {vbufreset();}
    break;

  case 400:

/* Line 936 of glr.c  */
#line 1049 "c:\\.Trash-1000\\doxygen-svn\\src\\\\..\\src\\verilogparser.y"
    { vbufreset();}
    break;

  case 401:

/* Line 936 of glr.c  */
#line 1050 "c:\\.Trash-1000\\doxygen-svn\\src\\\\..\\src\\verilogparser.y"
    { vbufreset();}
    break;

  case 402:

/* Line 936 of glr.c  */
#line 1059 "c:\\.Trash-1000\\doxygen-svn\\src\\\\..\\src\\verilogparser.y"
    {vbufreset();currentVerilog=0;}
    break;

  case 404:

/* Line 936 of glr.c  */
#line 1065 "c:\\.Trash-1000\\doxygen-svn\\src\\\\..\\src\\verilogparser.y"
    { if(!parseCode) { 
							               //  printf("\n  name_of_mod [%s] [%d]--\n",getVerilogString(),getVerilogLine());
                                            lastModule=VerilogDocGen::makeNewEntry("",Entry::CLASS_SEC,VerilogDocGen::MODULE);
                                             currentVerilog=lastModule;
                                             currentVerilog->protection=Private;
					                        //  currentVerilog->stat=TRUE;
					                         parseModule();
							                 CurrState=VerilogDocGen::STATE_MODULE;

										    }
                                            else {
											      parseModule();
                                              //    currVerilogType=VerilogDocGen::MODULE;
												  }
						        vbufreset();
							 }
    break;

  case 405:

/* Line 936 of glr.c  */
#line 1087 "c:\\.Trash-1000\\doxygen-svn\\src\\\\..\\src\\verilogparser.y"
    {parseListOfPorts();vbufreset();}
    break;

  case 406:

/* Line 936 of glr.c  */
#line 1088 "c:\\.Trash-1000\\doxygen-svn\\src\\\\..\\src\\verilogparser.y"
    {parseListOfPorts();vbufreset();}
    break;

  case 417:

/* Line 936 of glr.c  */
#line 1109 "c:\\.Trash-1000\\doxygen-svn\\src\\\\..\\src\\verilogparser.y"
    { currVerilogType=VerilogDocGen::OUTPUT;if(!parseCode)parsePortDir(currentVerilog,3);vbufreset();}
    break;

  case 418:

/* Line 936 of glr.c  */
#line 1110 "c:\\.Trash-1000\\doxygen-svn\\src\\\\..\\src\\verilogparser.y"
    { currVerilogType=VerilogDocGen::OUTPUT;if(!parseCode)parsePortDir(currentVerilog,3);vbufreset();}
    break;

  case 419:

/* Line 936 of glr.c  */
#line 1111 "c:\\.Trash-1000\\doxygen-svn\\src\\\\..\\src\\verilogparser.y"
    { currVerilogType=VerilogDocGen::OUTPUT;if(!parseCode)parsePortDir(currentVerilog,3);vbufreset();}
    break;

  case 420:

/* Line 936 of glr.c  */
#line 1112 "c:\\.Trash-1000\\doxygen-svn\\src\\\\..\\src\\verilogparser.y"
    { currVerilogType=VerilogDocGen::OUTPUT;if(!parseCode)parsePortDir(currentVerilog,3);vbufreset();}
    break;

  case 421:

/* Line 936 of glr.c  */
#line 1115 "c:\\.Trash-1000\\doxygen-svn\\src\\\\..\\src\\verilogparser.y"
    { currVerilogType=VerilogDocGen::INPUT;if(!parseCode)parsePortDir(currentVerilog,3);vbufreset();}
    break;

  case 422:

/* Line 936 of glr.c  */
#line 1116 "c:\\.Trash-1000\\doxygen-svn\\src\\\\..\\src\\verilogparser.y"
    { currVerilogType=VerilogDocGen::INPUT;if(!parseCode)parsePortDir(currentVerilog,3);vbufreset();}
    break;

  case 423:

/* Line 936 of glr.c  */
#line 1118 "c:\\.Trash-1000\\doxygen-svn\\src\\\\..\\src\\verilogparser.y"
    {if(!parseCode) parseReg(currentVerilog);vbufreset();}
    break;

  case 424:

/* Line 936 of glr.c  */
#line 1119 "c:\\.Trash-1000\\doxygen-svn\\src\\\\..\\src\\verilogparser.y"
    {if(!parseCode) parseReg(currentVerilog);vbufreset();}
    break;

  case 426:

/* Line 936 of glr.c  */
#line 1129 "c:\\.Trash-1000\\doxygen-svn\\src\\\\..\\src\\verilogparser.y"
    { vbufreset();}
    break;

  case 427:

/* Line 936 of glr.c  */
#line 1130 "c:\\.Trash-1000\\doxygen-svn\\src\\\\..\\src\\verilogparser.y"
    { vbufreset();}
    break;

  case 428:

/* Line 936 of glr.c  */
#line 1131 "c:\\.Trash-1000\\doxygen-svn\\src\\\\..\\src\\verilogparser.y"
    { vbufreset();}
    break;

  case 429:

/* Line 936 of glr.c  */
#line 1132 "c:\\.Trash-1000\\doxygen-svn\\src\\\\..\\src\\verilogparser.y"
    { vbufreset();}
    break;

  case 434:

/* Line 936 of glr.c  */
#line 1146 "c:\\.Trash-1000\\doxygen-svn\\src\\\\..\\src\\verilogparser.y"
    { vbufreset(); }
    break;

  case 435:

/* Line 936 of glr.c  */
#line 1147 "c:\\.Trash-1000\\doxygen-svn\\src\\\\..\\src\\verilogparser.y"
    { vbufreset(); }
    break;

  case 436:

/* Line 936 of glr.c  */
#line 1150 "c:\\.Trash-1000\\doxygen-svn\\src\\\\..\\src\\verilogparser.y"
    { identVerilog+=(((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (1))].yystate.yysemantics.yysval.cstr);writeDigit(); }
    break;

  case 448:

/* Line 936 of glr.c  */
#line 1175 "c:\\.Trash-1000\\doxygen-svn\\src\\\\..\\src\\verilogparser.y"
    { identVerilog+=(((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (1))].yystate.yysemantics.yysval.cstr);writeDigit(); }
    break;

  case 467:

/* Line 936 of glr.c  */
#line 1220 "c:\\.Trash-1000\\doxygen-svn\\src\\\\..\\src\\verilogparser.y"
    { vbufreset(); }
    break;

  case 468:

/* Line 936 of glr.c  */
#line 1221 "c:\\.Trash-1000\\doxygen-svn\\src\\\\..\\src\\verilogparser.y"
    { vbufreset();  }
    break;

  case 469:

/* Line 936 of glr.c  */
#line 1224 "c:\\.Trash-1000\\doxygen-svn\\src\\\\..\\src\\verilogparser.y"
    {
                               currVerilogType=VerilogDocGen::ALWAYS;
                               prevName.resize(0);
                     		   }
    break;

  case 470:

/* Line 936 of glr.c  */
#line 1227 "c:\\.Trash-1000\\doxygen-svn\\src\\\\..\\src\\verilogparser.y"
    {
                                            if(!parseCode && currentFunctionVerilog)
											 {
											  currentFunctionVerilog->endBodyLine=getVerilogEndLine();
											  if( currentFunctionVerilog->endBodyLine<currentFunctionVerilog->startLine || c_lloc.first_line>currentFunctionVerilog->endBodyLine ) // awlays without end
											   currentFunctionVerilog->endBodyLine=c_lloc.first_line;
											  currVerilogType=0;
											  }
											   vbufreset();}
    break;

  case 471:

/* Line 936 of glr.c  */
#line 1236 "c:\\.Trash-1000\\doxygen-svn\\src\\\\..\\src\\verilogparser.y"
    { vbufreset();currVerilogType=0;}
    break;

  case 475:

/* Line 936 of glr.c  */
#line 1243 "c:\\.Trash-1000\\doxygen-svn\\src\\\\..\\src\\verilogparser.y"
    {vbufreset();}
    break;

  case 479:

/* Line 936 of glr.c  */
#line 1249 "c:\\.Trash-1000\\doxygen-svn\\src\\\\..\\src\\verilogparser.y"
    {vbufreset();}
    break;

  case 501:

/* Line 936 of glr.c  */
#line 1301 "c:\\.Trash-1000\\doxygen-svn\\src\\\\..\\src\\verilogparser.y"
    {if(!parseCode && currVerilogType==VerilogDocGen::ALWAYS)parseAlways(true);}
    break;

  case 508:

/* Line 936 of glr.c  */
#line 1310 "c:\\.Trash-1000\\doxygen-svn\\src\\\\..\\src\\verilogparser.y"
    {
                                            if(!parseCode){
                                             if(currentFunctionVerilog && currentFunctionVerilog->spec==VerilogDocGen::ALWAYS){
                                             VerilogDocGen::adjustMemberName(prevName); 
                                             currentFunctionVerilog->name=prevName;
                                            }
                                          }
                                         }
    break;

  case 521:

/* Line 936 of glr.c  */
#line 1338 "c:\\.Trash-1000\\doxygen-svn\\src\\\\..\\src\\verilogparser.y"
    {vbufreset();}
    break;

  case 536:

/* Line 936 of glr.c  */
#line 1365 "c:\\.Trash-1000\\doxygen-svn\\src\\\\..\\src\\verilogparser.y"
    {vbufreset();}
    break;

  case 539:

/* Line 936 of glr.c  */
#line 1370 "c:\\.Trash-1000\\doxygen-svn\\src\\\\..\\src\\verilogparser.y"
    {currVerilogType=0;}
    break;

  case 540:

/* Line 936 of glr.c  */
#line 1370 "c:\\.Trash-1000\\doxygen-svn\\src\\\\..\\src\\verilogparser.y"
    {currVerilogType=0;}
    break;

  case 542:

/* Line 936 of glr.c  */
#line 1376 "c:\\.Trash-1000\\doxygen-svn\\src\\\\..\\src\\verilogparser.y"
    { parseAlways(); vbufreset();currVerilogType=0;}
    break;

  case 543:

/* Line 936 of glr.c  */
#line 1377 "c:\\.Trash-1000\\doxygen-svn\\src\\\\..\\src\\verilogparser.y"
    { parseAlways(); vbufreset();currVerilogType=0;}
    break;

  case 544:

/* Line 936 of glr.c  */
#line 1378 "c:\\.Trash-1000\\doxygen-svn\\src\\\\..\\src\\verilogparser.y"
    { parseAlways(); vbufreset();currVerilogType=0;}
    break;

  case 545:

/* Line 936 of glr.c  */
#line 1379 "c:\\.Trash-1000\\doxygen-svn\\src\\\\..\\src\\verilogparser.y"
    { parseAlways(); vbufreset();currVerilogType=0;}
    break;

  case 546:

/* Line 936 of glr.c  */
#line 1380 "c:\\.Trash-1000\\doxygen-svn\\src\\\\..\\src\\verilogparser.y"
    { parseAlways(); vbufreset();currVerilogType=0;}
    break;

  case 564:

/* Line 936 of glr.c  */
#line 1419 "c:\\.Trash-1000\\doxygen-svn\\src\\\\..\\src\\verilogparser.y"
    { vbufreset();}
    break;

  case 566:

/* Line 936 of glr.c  */
#line 1421 "c:\\.Trash-1000\\doxygen-svn\\src\\\\..\\src\\verilogparser.y"
    { vbufreset();}
    break;

  case 568:

/* Line 936 of glr.c  */
#line 1423 "c:\\.Trash-1000\\doxygen-svn\\src\\\\..\\src\\verilogparser.y"
    { vbufreset();}
    break;

  case 590:

/* Line 936 of glr.c  */
#line 1475 "c:\\.Trash-1000\\doxygen-svn\\src\\\\..\\src\\verilogparser.y"
    { vbufreset(); }
    break;

  case 591:

/* Line 936 of glr.c  */
#line 1476 "c:\\.Trash-1000\\doxygen-svn\\src\\\\..\\src\\verilogparser.y"
    { vbufreset(); }
    break;

  case 592:

/* Line 936 of glr.c  */
#line 1480 "c:\\.Trash-1000\\doxygen-svn\\src\\\\..\\src\\verilogparser.y"
    { vbufreset(); }
    break;

  case 593:

/* Line 936 of glr.c  */
#line 1481 "c:\\.Trash-1000\\doxygen-svn\\src\\\\..\\src\\verilogparser.y"
    { vbufreset(); }
    break;

  case 594:

/* Line 936 of glr.c  */
#line 1485 "c:\\.Trash-1000\\doxygen-svn\\src\\\\..\\src\\verilogparser.y"
    {vbufreset();}
    break;

  case 595:

/* Line 936 of glr.c  */
#line 1486 "c:\\.Trash-1000\\doxygen-svn\\src\\\\..\\src\\verilogparser.y"
    {vbufreset();}
    break;

  case 596:

/* Line 936 of glr.c  */
#line 1487 "c:\\.Trash-1000\\doxygen-svn\\src\\\\..\\src\\verilogparser.y"
    {vbufreset();}
    break;

  case 597:

/* Line 936 of glr.c  */
#line 1488 "c:\\.Trash-1000\\doxygen-svn\\src\\\\..\\src\\verilogparser.y"
    {vbufreset();}
    break;

  case 598:

/* Line 936 of glr.c  */
#line 1489 "c:\\.Trash-1000\\doxygen-svn\\src\\\\..\\src\\verilogparser.y"
    {vbufreset();}
    break;

  case 787:

/* Line 936 of glr.c  */
#line 1902 "c:\\.Trash-1000\\doxygen-svn\\src\\\\..\\src\\verilogparser.y"
    { identVerilog+=(((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (1))].yystate.yysemantics.yysval.cstr);writeDigit(); }
    break;

  case 788:

/* Line 936 of glr.c  */
#line 1903 "c:\\.Trash-1000\\doxygen-svn\\src\\\\..\\src\\verilogparser.y"
    {if(parseCode) {writePrevVerilogWords(identVerilog);writeVerilogFont("vhdllogic",identVerilog.data());identVerilog.resize(0);}}
    break;

  case 789:

/* Line 936 of glr.c  */
#line 1914 "c:\\.Trash-1000\\doxygen-svn\\src\\\\..\\src\\verilogparser.y"
    {vbufreset();}
    break;

  case 790:

/* Line 936 of glr.c  */
#line 1915 "c:\\.Trash-1000\\doxygen-svn\\src\\\\..\\src\\verilogparser.y"
    { vbufreset(); }
    break;

  case 792:

/* Line 936 of glr.c  */
#line 1919 "c:\\.Trash-1000\\doxygen-svn\\src\\\\..\\src\\verilogparser.y"
    { vbufreset(); }
    break;

  case 793:

/* Line 936 of glr.c  */
#line 1920 "c:\\.Trash-1000\\doxygen-svn\\src\\\\..\\src\\verilogparser.y"
    { vbufreset(); }
    break;

  case 799:

/* Line 936 of glr.c  */
#line 1932 "c:\\.Trash-1000\\doxygen-svn\\src\\\\..\\src\\verilogparser.y"
    {
										 }
    break;

  case 800:

/* Line 936 of glr.c  */
#line 1936 "c:\\.Trash-1000\\doxygen-svn\\src\\\\..\\src\\verilogparser.y"
    { parseString(); }
    break;

  case 801:

/* Line 936 of glr.c  */
#line 1939 "c:\\.Trash-1000\\doxygen-svn\\src\\\\..\\src\\verilogparser.y"
    {
                    	//if(parseCode) 
						      identVerilog+=(((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (1))].yystate.yysemantics.yysval.cstr); 
						  //    fprintf(stderr,"\n String: %s",identVerilog.data());
							 }
    break;

  case 802:

/* Line 936 of glr.c  */
#line 1944 "c:\\.Trash-1000\\doxygen-svn\\src\\\\..\\src\\verilogparser.y"
    {}
    break;



/* Line 936 of glr.c  */
#line 5724 "c:\\.Trash-1000\\doxygen-svn\\src\\\\..\\src\\verilogparser.cpp"
      default: break;
    }

  return yyok;
# undef yyerrok
# undef YYABORT
# undef YYACCEPT
# undef YYERROR
# undef YYBACKUP
# undef yyclearin
# undef YYRECOVERING
}


/*ARGSUSED*/ static void
yyuserMerge (int yyn, YYSTYPE* yy0, YYSTYPE* yy1)
{
  YYUSE (yy0);
  YYUSE (yy1);

  switch (yyn)
    {
      
      default: break;
    }
}

			      /* Bison grammar-table manipulation.  */

/*-----------------------------------------------.
| Release the memory associated to this symbol.  |
`-----------------------------------------------*/

/*ARGSUSED*/
static void
yydestruct (const char *yymsg, int yytype, YYSTYPE *yyvaluep, YYLTYPE *yylocationp)
{
  YYUSE (yyvaluep);
  YYUSE (yylocationp);

  if (!yymsg)
    yymsg = "Deleting";
  YY_SYMBOL_PRINT (yymsg, yytype, yyvaluep, yylocationp);

  switch (yytype)
    {

      default:
	break;
    }
}

/** Number of symbols composing the right hand side of rule #RULE.  */
static inline int
yyrhsLength (yyRuleNum yyrule)
{
  return yyr2[yyrule];
}

static void
yydestroyGLRState (char const *yymsg, yyGLRState *yys)
{
  if (yys->yyresolved)
    yydestruct (yymsg, yystos[yys->yylrState],
		&yys->yysemantics.yysval, &yys->yyloc);
  else
    {
#if YYDEBUG
      if (yydebug)
	{
	  if (yys->yysemantics.yyfirstVal)
	    YYFPRINTF (stderr, "%s unresolved ", yymsg);
	  else
	    YYFPRINTF (stderr, "%s incomplete ", yymsg);
	  yy_symbol_print (stderr, yystos[yys->yylrState],
			   NULL, &yys->yyloc);
	  YYFPRINTF (stderr, "\n");
	}
#endif

      if (yys->yysemantics.yyfirstVal)
	{
	  yySemanticOption *yyoption = yys->yysemantics.yyfirstVal;
	  yyGLRState *yyrh;
	  int yyn;
	  for (yyrh = yyoption->yystate, yyn = yyrhsLength (yyoption->yyrule);
	       yyn > 0;
	       yyrh = yyrh->yypred, yyn -= 1)
	    yydestroyGLRState (yymsg, yyrh);
	}
    }
}

/** Left-hand-side symbol for rule #RULE.  */
static inline yySymbol
yylhsNonterm (yyRuleNum yyrule)
{
  return yyr1[yyrule];
}

#define yyis_pact_ninf(yystate) \
  ((yystate) == YYPACT_NINF)

/** True iff LR state STATE has only a default reduction (regardless
 *  of token).  */
static inline yybool
yyisDefaultedState (yyStateNum yystate)
{
  return yyis_pact_ninf (yypact[yystate]);
}

/** The default reduction for STATE, assuming it has one.  */
static inline yyRuleNum
yydefaultAction (yyStateNum yystate)
{
  return yydefact[yystate];
}

#define yyis_table_ninf(yytable_value) \
  YYID (0)

/** Set *YYACTION to the action to take in YYSTATE on seeing YYTOKEN.
 *  Result R means
 *    R < 0:  Reduce on rule -R.
 *    R = 0:  Error.
 *    R > 0:  Shift to state R.
 *  Set *CONFLICTS to a pointer into yyconfl to 0-terminated list of
 *  conflicting reductions.
 */
static inline void
yygetLRActions (yyStateNum yystate, int yytoken,
		int* yyaction, const short int** yyconflicts)
{
  int yyindex = yypact[yystate] + yytoken;
  if (yyindex < 0 || YYLAST < yyindex || yycheck[yyindex] != yytoken)
    {
      *yyaction = -yydefact[yystate];
      *yyconflicts = yyconfl;
    }
  else if (! yyis_table_ninf (yytable[yyindex]))
    {
      *yyaction = yytable[yyindex];
      *yyconflicts = yyconfl + yyconflp[yyindex];
    }
  else
    {
      *yyaction = 0;
      *yyconflicts = yyconfl + yyconflp[yyindex];
    }
}

static inline yyStateNum
yyLRgotoState (yyStateNum yystate, yySymbol yylhs)
{
  int yyr;
  yyr = yypgoto[yylhs - YYNTOKENS] + yystate;
  if (0 <= yyr && yyr <= YYLAST && yycheck[yyr] == yystate)
    return yytable[yyr];
  else
    return yydefgoto[yylhs - YYNTOKENS];
}

static inline yybool
yyisShiftAction (int yyaction)
{
  return 0 < yyaction;
}

static inline yybool
yyisErrorAction (int yyaction)
{
  return yyaction == 0;
}

				/* GLRStates */

/** Return a fresh GLRStackItem.  Callers should call
 * YY_RESERVE_GLRSTACK afterwards to make sure there is sufficient
 * headroom.  */

static inline yyGLRStackItem*
yynewGLRStackItem (yyGLRStack* yystackp, yybool yyisState)
{
  yyGLRStackItem* yynewItem = yystackp->yynextFree;
  yystackp->yyspaceLeft -= 1;
  yystackp->yynextFree += 1;
  yynewItem->yystate.yyisState = yyisState;
  return yynewItem;
}

/** Add a new semantic action that will execute the action for rule
 *  RULENUM on the semantic values in RHS to the list of
 *  alternative actions for STATE.  Assumes that RHS comes from
 *  stack #K of *STACKP. */
static void
yyaddDeferredAction (yyGLRStack* yystackp, size_t yyk, yyGLRState* yystate,
		     yyGLRState* rhs, yyRuleNum yyrule)
{
  yySemanticOption* yynewOption =
    &yynewGLRStackItem (yystackp, yyfalse)->yyoption;
  yynewOption->yystate = rhs;
  yynewOption->yyrule = yyrule;
  if (yystackp->yytops.yylookaheadNeeds[yyk])
    {
      yynewOption->yyrawchar = yychar;
      yynewOption->yyval = yylval;
      yynewOption->yyloc = yylloc;
    }
  else
    yynewOption->yyrawchar = YYEMPTY;
  yynewOption->yynext = yystate->yysemantics.yyfirstVal;
  yystate->yysemantics.yyfirstVal = yynewOption;

  YY_RESERVE_GLRSTACK (yystackp);
}

				/* GLRStacks */

/** Initialize SET to a singleton set containing an empty stack.  */
static yybool
yyinitStateSet (yyGLRStateSet* yyset)
{
  yyset->yysize = 1;
  yyset->yycapacity = 16;
  yyset->yystates = (yyGLRState**) YYMALLOC (16 * sizeof yyset->yystates[0]);
  if (! yyset->yystates)
    return yyfalse;
  yyset->yystates[0] = NULL;
  yyset->yylookaheadNeeds =
    (yybool*) YYMALLOC (16 * sizeof yyset->yylookaheadNeeds[0]);
  if (! yyset->yylookaheadNeeds)
    {
      YYFREE (yyset->yystates);
      return yyfalse;
    }
  return yytrue;
}

static void yyfreeStateSet (yyGLRStateSet* yyset)
{
  YYFREE (yyset->yystates);
  YYFREE (yyset->yylookaheadNeeds);
}

/** Initialize STACK to a single empty stack, with total maximum
 *  capacity for all stacks of SIZE.  */
static yybool
yyinitGLRStack (yyGLRStack* yystackp, size_t yysize)
{
  yystackp->yyerrState = 0;
  yynerrs = 0;
  yystackp->yyspaceLeft = yysize;
  yystackp->yyitems =
    (yyGLRStackItem*) YYMALLOC (yysize * sizeof yystackp->yynextFree[0]);
  if (!yystackp->yyitems)
    return yyfalse;
  yystackp->yynextFree = yystackp->yyitems;
  yystackp->yysplitPoint = NULL;
  yystackp->yylastDeleted = NULL;
  return yyinitStateSet (&yystackp->yytops);
}


#if YYSTACKEXPANDABLE
# define YYRELOC(YYFROMITEMS,YYTOITEMS,YYX,YYTYPE) \
  &((YYTOITEMS) - ((YYFROMITEMS) - (yyGLRStackItem*) (YYX)))->YYTYPE

/** If STACK is expandable, extend it.  WARNING: Pointers into the
    stack from outside should be considered invalid after this call.
    We always expand when there are 1 or fewer items left AFTER an
    allocation, so that we can avoid having external pointers exist
    across an allocation.  */
static void
yyexpandGLRStack (yyGLRStack* yystackp)
{
  yyGLRStackItem* yynewItems;
  yyGLRStackItem* yyp0, *yyp1;
  size_t yysize, yynewSize;
  size_t yyn;
  yysize = yystackp->yynextFree - yystackp->yyitems;
  if (YYMAXDEPTH - YYHEADROOM < yysize)
    yyMemoryExhausted (yystackp);
  yynewSize = 2*yysize;
  if (YYMAXDEPTH < yynewSize)
    yynewSize = YYMAXDEPTH;
  yynewItems = (yyGLRStackItem*) YYMALLOC (yynewSize * sizeof yynewItems[0]);
  if (! yynewItems)
    yyMemoryExhausted (yystackp);
  for (yyp0 = yystackp->yyitems, yyp1 = yynewItems, yyn = yysize;
       0 < yyn;
       yyn -= 1, yyp0 += 1, yyp1 += 1)
    {
      *yyp1 = *yyp0;
      if (*(yybool *) yyp0)
	{
	  yyGLRState* yys0 = &yyp0->yystate;
	  yyGLRState* yys1 = &yyp1->yystate;
	  if (yys0->yypred != NULL)
	    yys1->yypred =
	      YYRELOC (yyp0, yyp1, yys0->yypred, yystate);
	  if (! yys0->yyresolved && yys0->yysemantics.yyfirstVal != NULL)
	    yys1->yysemantics.yyfirstVal =
	      YYRELOC(yyp0, yyp1, yys0->yysemantics.yyfirstVal, yyoption);
	}
      else
	{
	  yySemanticOption* yyv0 = &yyp0->yyoption;
	  yySemanticOption* yyv1 = &yyp1->yyoption;
	  if (yyv0->yystate != NULL)
	    yyv1->yystate = YYRELOC (yyp0, yyp1, yyv0->yystate, yystate);
	  if (yyv0->yynext != NULL)
	    yyv1->yynext = YYRELOC (yyp0, yyp1, yyv0->yynext, yyoption);
	}
    }
  if (yystackp->yysplitPoint != NULL)
    yystackp->yysplitPoint = YYRELOC (yystackp->yyitems, yynewItems,
				 yystackp->yysplitPoint, yystate);

  for (yyn = 0; yyn < yystackp->yytops.yysize; yyn += 1)
    if (yystackp->yytops.yystates[yyn] != NULL)
      yystackp->yytops.yystates[yyn] =
	YYRELOC (yystackp->yyitems, yynewItems,
		 yystackp->yytops.yystates[yyn], yystate);
  YYFREE (yystackp->yyitems);
  yystackp->yyitems = yynewItems;
  yystackp->yynextFree = yynewItems + yysize;
  yystackp->yyspaceLeft = yynewSize - yysize;
}
#endif

static void
yyfreeGLRStack (yyGLRStack* yystackp)
{
  YYFREE (yystackp->yyitems);
  yyfreeStateSet (&yystackp->yytops);
}

/** Assuming that S is a GLRState somewhere on STACK, update the
 *  splitpoint of STACK, if needed, so that it is at least as deep as
 *  S.  */
static inline void
yyupdateSplit (yyGLRStack* yystackp, yyGLRState* yys)
{
  if (yystackp->yysplitPoint != NULL && yystackp->yysplitPoint > yys)
    yystackp->yysplitPoint = yys;
}

/** Invalidate stack #K in STACK.  */
static inline void
yymarkStackDeleted (yyGLRStack* yystackp, size_t yyk)
{
  if (yystackp->yytops.yystates[yyk] != NULL)
    yystackp->yylastDeleted = yystackp->yytops.yystates[yyk];
  yystackp->yytops.yystates[yyk] = NULL;
}

/** Undelete the last stack that was marked as deleted.  Can only be
    done once after a deletion, and only when all other stacks have
    been deleted.  */
static void
yyundeleteLastStack (yyGLRStack* yystackp)
{
  if (yystackp->yylastDeleted == NULL || yystackp->yytops.yysize != 0)
    return;
  yystackp->yytops.yystates[0] = yystackp->yylastDeleted;
  yystackp->yytops.yysize = 1;
  YYDPRINTF ((stderr, "Restoring last deleted stack as stack #0.\n"));
  yystackp->yylastDeleted = NULL;
}

static inline void
yyremoveDeletes (yyGLRStack* yystackp)
{
  size_t yyi, yyj;
  yyi = yyj = 0;
  while (yyj < yystackp->yytops.yysize)
    {
      if (yystackp->yytops.yystates[yyi] == NULL)
	{
	  if (yyi == yyj)
	    {
	      YYDPRINTF ((stderr, "Removing dead stacks.\n"));
	    }
	  yystackp->yytops.yysize -= 1;
	}
      else
	{
	  yystackp->yytops.yystates[yyj] = yystackp->yytops.yystates[yyi];
	  /* In the current implementation, it's unnecessary to copy
	     yystackp->yytops.yylookaheadNeeds[yyi] since, after
	     yyremoveDeletes returns, the parser immediately either enters
	     deterministic operation or shifts a token.  However, it doesn't
	     hurt, and the code might evolve to need it.  */
	  yystackp->yytops.yylookaheadNeeds[yyj] =
	    yystackp->yytops.yylookaheadNeeds[yyi];
	  if (yyj != yyi)
	    {
	      YYDPRINTF ((stderr, "Rename stack %lu -> %lu.\n",
			  (unsigned long int) yyi, (unsigned long int) yyj));
	    }
	  yyj += 1;
	}
      yyi += 1;
    }
}

/** Shift to a new state on stack #K of STACK, corresponding to LR state
 * LRSTATE, at input position POSN, with (resolved) semantic value SVAL.  */
static inline void
yyglrShift (yyGLRStack* yystackp, size_t yyk, yyStateNum yylrState,
	    size_t yyposn,
	    YYSTYPE* yyvalp, YYLTYPE* yylocp)
{
  yyGLRState* yynewState = &yynewGLRStackItem (yystackp, yytrue)->yystate;

  yynewState->yylrState = yylrState;
  yynewState->yyposn = yyposn;
  yynewState->yyresolved = yytrue;
  yynewState->yypred = yystackp->yytops.yystates[yyk];
  yynewState->yysemantics.yysval = *yyvalp;
  yynewState->yyloc = *yylocp;
  yystackp->yytops.yystates[yyk] = yynewState;

  YY_RESERVE_GLRSTACK (yystackp);
}

/** Shift stack #K of YYSTACK, to a new state corresponding to LR
 *  state YYLRSTATE, at input position YYPOSN, with the (unresolved)
 *  semantic value of YYRHS under the action for YYRULE.  */
static inline void
yyglrShiftDefer (yyGLRStack* yystackp, size_t yyk, yyStateNum yylrState,
		 size_t yyposn, yyGLRState* rhs, yyRuleNum yyrule)
{
  yyGLRState* yynewState = &yynewGLRStackItem (yystackp, yytrue)->yystate;

  yynewState->yylrState = yylrState;
  yynewState->yyposn = yyposn;
  yynewState->yyresolved = yyfalse;
  yynewState->yypred = yystackp->yytops.yystates[yyk];
  yynewState->yysemantics.yyfirstVal = NULL;
  yystackp->yytops.yystates[yyk] = yynewState;

  /* Invokes YY_RESERVE_GLRSTACK.  */
  yyaddDeferredAction (yystackp, yyk, yynewState, rhs, yyrule);
}

/** Pop the symbols consumed by reduction #RULE from the top of stack
 *  #K of STACK, and perform the appropriate semantic action on their
 *  semantic values.  Assumes that all ambiguities in semantic values
 *  have been previously resolved.  Set *VALP to the resulting value,
 *  and *LOCP to the computed location (if any).  Return value is as
 *  for userAction.  */
static inline YYRESULTTAG
yydoAction (yyGLRStack* yystackp, size_t yyk, yyRuleNum yyrule,
	    YYSTYPE* yyvalp, YYLTYPE* yylocp)
{
  int yynrhs = yyrhsLength (yyrule);

  if (yystackp->yysplitPoint == NULL)
    {
      /* Standard special case: single stack.  */
      yyGLRStackItem* rhs = (yyGLRStackItem*) yystackp->yytops.yystates[yyk];
      YYASSERT (yyk == 0);
      yystackp->yynextFree -= yynrhs;
      yystackp->yyspaceLeft += yynrhs;
      yystackp->yytops.yystates[0] = & yystackp->yynextFree[-1].yystate;
      return yyuserAction (yyrule, yynrhs, rhs,
			   yyvalp, yylocp, yystackp);
    }
  else
    {
      /* At present, doAction is never called in nondeterministic
       * mode, so this branch is never taken.  It is here in
       * anticipation of a future feature that will allow immediate
       * evaluation of selected actions in nondeterministic mode.  */
      int yyi;
      yyGLRState* yys;
      yyGLRStackItem yyrhsVals[YYMAXRHS + YYMAXLEFT + 1];
      yys = yyrhsVals[YYMAXRHS + YYMAXLEFT].yystate.yypred
	= yystackp->yytops.yystates[yyk];
      if (yynrhs == 0)
	/* Set default location.  */
	yyrhsVals[YYMAXRHS + YYMAXLEFT - 1].yystate.yyloc = yys->yyloc;
      for (yyi = 0; yyi < yynrhs; yyi += 1)
	{
	  yys = yys->yypred;
	  YYASSERT (yys);
	}
      yyupdateSplit (yystackp, yys);
      yystackp->yytops.yystates[yyk] = yys;
      return yyuserAction (yyrule, yynrhs, yyrhsVals + YYMAXRHS + YYMAXLEFT - 1,
			   yyvalp, yylocp, yystackp);
    }
}

#if !YYDEBUG
# define YY_REDUCE_PRINT(Args)
#else
# define YY_REDUCE_PRINT(Args)		\
do {					\
  if (yydebug)				\
    yy_reduce_print Args;		\
} while (YYID (0))

/*----------------------------------------------------------.
| Report that the RULE is going to be reduced on stack #K.  |
`----------------------------------------------------------*/

/*ARGSUSED*/ static inline void
yy_reduce_print (yyGLRStack* yystackp, size_t yyk, yyRuleNum yyrule,
		 YYSTYPE* yyvalp, YYLTYPE* yylocp)
{
  int yynrhs = yyrhsLength (yyrule);
  yybool yynormal __attribute__ ((__unused__)) =
    (yystackp->yysplitPoint == NULL);
  yyGLRStackItem* yyvsp = (yyGLRStackItem*) yystackp->yytops.yystates[yyk];
  int yylow = 1;
  int yyi;
  YYUSE (yyvalp);
  YYUSE (yylocp);
  YYFPRINTF (stderr, "Reducing stack %lu by rule %d (line %lu):\n",
	     (unsigned long int) yyk, yyrule - 1,
	     (unsigned long int) yyrline[yyrule]);
  /* The symbols being reduced.  */
  for (yyi = 0; yyi < yynrhs; yyi++)
    {
      YYFPRINTF (stderr, "   $%d = ", yyi + 1);
      yy_symbol_print (stderr, yyrhs[yyprhs[yyrule] + yyi],
		       &(((yyGLRStackItem const *)yyvsp)[YYFILL ((yyi + 1) - (yynrhs))].yystate.yysemantics.yysval)
		       , &(((yyGLRStackItem const *)yyvsp)[YYFILL ((yyi + 1) - (yynrhs))].yystate.yyloc)		       );
      YYFPRINTF (stderr, "\n");
    }
}
#endif

/** Pop items off stack #K of STACK according to grammar rule RULE,
 *  and push back on the resulting nonterminal symbol.  Perform the
 *  semantic action associated with RULE and store its value with the
 *  newly pushed state, if FORCEEVAL or if STACK is currently
 *  unambiguous.  Otherwise, store the deferred semantic action with
 *  the new state.  If the new state would have an identical input
 *  position, LR state, and predecessor to an existing state on the stack,
 *  it is identified with that existing state, eliminating stack #K from
 *  the STACK.  In this case, the (necessarily deferred) semantic value is
 *  added to the options for the existing state's semantic value.
 */
static inline YYRESULTTAG
yyglrReduce (yyGLRStack* yystackp, size_t yyk, yyRuleNum yyrule,
	     yybool yyforceEval)
{
  size_t yyposn = yystackp->yytops.yystates[yyk]->yyposn;

  if (yyforceEval || yystackp->yysplitPoint == NULL)
    {
      YYSTYPE yysval;
      YYLTYPE yyloc;

      YY_REDUCE_PRINT ((yystackp, yyk, yyrule, &yysval, &yyloc));
      YYCHK (yydoAction (yystackp, yyk, yyrule, &yysval,
			 &yyloc));
      YY_SYMBOL_PRINT ("-> $$ =", yyr1[yyrule], &yysval, &yyloc);
      yyglrShift (yystackp, yyk,
		  yyLRgotoState (yystackp->yytops.yystates[yyk]->yylrState,
				 yylhsNonterm (yyrule)),
		  yyposn, &yysval, &yyloc);
    }
  else
    {
      size_t yyi;
      int yyn;
      yyGLRState* yys, *yys0 = yystackp->yytops.yystates[yyk];
      yyStateNum yynewLRState;

      for (yys = yystackp->yytops.yystates[yyk], yyn = yyrhsLength (yyrule);
	   0 < yyn; yyn -= 1)
	{
	  yys = yys->yypred;
	  YYASSERT (yys);
	}
      yyupdateSplit (yystackp, yys);
      yynewLRState = yyLRgotoState (yys->yylrState, yylhsNonterm (yyrule));
      YYDPRINTF ((stderr,
		  "Reduced stack %lu by rule #%d; action deferred.  Now in state %d.\n",
		  (unsigned long int) yyk, yyrule - 1, yynewLRState));
      for (yyi = 0; yyi < yystackp->yytops.yysize; yyi += 1)
	if (yyi != yyk && yystackp->yytops.yystates[yyi] != NULL)
	  {
	    yyGLRState* yyp, *yysplit = yystackp->yysplitPoint;
	    yyp = yystackp->yytops.yystates[yyi];
	    while (yyp != yys && yyp != yysplit && yyp->yyposn >= yyposn)
	      {
		if (yyp->yylrState == yynewLRState && yyp->yypred == yys)
		  {
		    yyaddDeferredAction (yystackp, yyk, yyp, yys0, yyrule);
		    yymarkStackDeleted (yystackp, yyk);
		    YYDPRINTF ((stderr, "Merging stack %lu into stack %lu.\n",
				(unsigned long int) yyk,
				(unsigned long int) yyi));
		    return yyok;
		  }
		yyp = yyp->yypred;
	      }
	  }
      yystackp->yytops.yystates[yyk] = yys;
      yyglrShiftDefer (yystackp, yyk, yynewLRState, yyposn, yys0, yyrule);
    }
  return yyok;
}

static size_t
yysplitStack (yyGLRStack* yystackp, size_t yyk)
{
  if (yystackp->yysplitPoint == NULL)
    {
      YYASSERT (yyk == 0);
      yystackp->yysplitPoint = yystackp->yytops.yystates[yyk];
    }
  if (yystackp->yytops.yysize >= yystackp->yytops.yycapacity)
    {
      yyGLRState** yynewStates;
      yybool* yynewLookaheadNeeds;

      yynewStates = NULL;

      if (yystackp->yytops.yycapacity
	  > (YYSIZEMAX / (2 * sizeof yynewStates[0])))
	yyMemoryExhausted (yystackp);
      yystackp->yytops.yycapacity *= 2;

      yynewStates =
	(yyGLRState**) YYREALLOC (yystackp->yytops.yystates,
				  (yystackp->yytops.yycapacity
				   * sizeof yynewStates[0]));
      if (yynewStates == NULL)
	yyMemoryExhausted (yystackp);
      yystackp->yytops.yystates = yynewStates;

      yynewLookaheadNeeds =
	(yybool*) YYREALLOC (yystackp->yytops.yylookaheadNeeds,
			     (yystackp->yytops.yycapacity
			      * sizeof yynewLookaheadNeeds[0]));
      if (yynewLookaheadNeeds == NULL)
	yyMemoryExhausted (yystackp);
      yystackp->yytops.yylookaheadNeeds = yynewLookaheadNeeds;
    }
  yystackp->yytops.yystates[yystackp->yytops.yysize]
    = yystackp->yytops.yystates[yyk];
  yystackp->yytops.yylookaheadNeeds[yystackp->yytops.yysize]
    = yystackp->yytops.yylookaheadNeeds[yyk];
  yystackp->yytops.yysize += 1;
  return yystackp->yytops.yysize-1;
}

/** True iff Y0 and Y1 represent identical options at the top level.
 *  That is, they represent the same rule applied to RHS symbols
 *  that produce the same terminal symbols.  */
static yybool
yyidenticalOptions (yySemanticOption* yyy0, yySemanticOption* yyy1)
{
  if (yyy0->yyrule == yyy1->yyrule)
    {
      yyGLRState *yys0, *yys1;
      int yyn;
      for (yys0 = yyy0->yystate, yys1 = yyy1->yystate,
	   yyn = yyrhsLength (yyy0->yyrule);
	   yyn > 0;
	   yys0 = yys0->yypred, yys1 = yys1->yypred, yyn -= 1)
	if (yys0->yyposn != yys1->yyposn)
	  return yyfalse;
      return yytrue;
    }
  else
    return yyfalse;
}

/** Assuming identicalOptions (Y0,Y1), destructively merge the
 *  alternative semantic values for the RHS-symbols of Y1 and Y0.  */
static void
yymergeOptionSets (yySemanticOption* yyy0, yySemanticOption* yyy1)
{
  yyGLRState *yys0, *yys1;
  int yyn;
  for (yys0 = yyy0->yystate, yys1 = yyy1->yystate,
       yyn = yyrhsLength (yyy0->yyrule);
       yyn > 0;
       yys0 = yys0->yypred, yys1 = yys1->yypred, yyn -= 1)
    {
      if (yys0 == yys1)
	break;
      else if (yys0->yyresolved)
	{
	  yys1->yyresolved = yytrue;
	  yys1->yysemantics.yysval = yys0->yysemantics.yysval;
	}
      else if (yys1->yyresolved)
	{
	  yys0->yyresolved = yytrue;
	  yys0->yysemantics.yysval = yys1->yysemantics.yysval;
	}
      else
	{
	  yySemanticOption** yyz0p;
	  yySemanticOption* yyz1;
	  yyz0p = &yys0->yysemantics.yyfirstVal;
	  yyz1 = yys1->yysemantics.yyfirstVal;
	  while (YYID (yytrue))
	    {
	      if (yyz1 == *yyz0p || yyz1 == NULL)
		break;
	      else if (*yyz0p == NULL)
		{
		  *yyz0p = yyz1;
		  break;
		}
	      else if (*yyz0p < yyz1)
		{
		  yySemanticOption* yyz = *yyz0p;
		  *yyz0p = yyz1;
		  yyz1 = yyz1->yynext;
		  (*yyz0p)->yynext = yyz;
		}
	      yyz0p = &(*yyz0p)->yynext;
	    }
	  yys1->yysemantics.yyfirstVal = yys0->yysemantics.yyfirstVal;
	}
    }
}

/** Y0 and Y1 represent two possible actions to take in a given
 *  parsing state; return 0 if no combination is possible,
 *  1 if user-mergeable, 2 if Y0 is preferred, 3 if Y1 is preferred.  */
static int
yypreference (yySemanticOption* y0, yySemanticOption* y1)
{
  yyRuleNum r0 = y0->yyrule, r1 = y1->yyrule;
  int p0 = yydprec[r0], p1 = yydprec[r1];

  if (p0 == p1)
    {
      if (yymerger[r0] == 0 || yymerger[r0] != yymerger[r1])
	return 0;
      else
	return 1;
    }
  if (p0 == 0 || p1 == 0)
    return 0;
  if (p0 < p1)
    return 3;
  if (p1 < p0)
    return 2;
  return 0;
}

static YYRESULTTAG yyresolveValue (yyGLRState* yys,
				   yyGLRStack* yystackp);


/** Resolve the previous N states starting at and including state S.  If result
 *  != yyok, some states may have been left unresolved possibly with empty
 *  semantic option chains.  Regardless of whether result = yyok, each state
 *  has been left with consistent data so that yydestroyGLRState can be invoked
 *  if necessary.  */
static YYRESULTTAG
yyresolveStates (yyGLRState* yys, int yyn,
		 yyGLRStack* yystackp)
{
  if (0 < yyn)
    {
      YYASSERT (yys->yypred);
      YYCHK (yyresolveStates (yys->yypred, yyn-1, yystackp));
      if (! yys->yyresolved)
	YYCHK (yyresolveValue (yys, yystackp));
    }
  return yyok;
}

/** Resolve the states for the RHS of OPT, perform its user action, and return
 *  the semantic value and location.  Regardless of whether result = yyok, all
 *  RHS states have been destroyed (assuming the user action destroys all RHS
 *  semantic values if invoked).  */
static YYRESULTTAG
yyresolveAction (yySemanticOption* yyopt, yyGLRStack* yystackp,
		 YYSTYPE* yyvalp, YYLTYPE* yylocp)
{
  yyGLRStackItem yyrhsVals[YYMAXRHS + YYMAXLEFT + 1];
  int yynrhs;
  int yychar_current;
  YYSTYPE yylval_current;
  YYLTYPE yylloc_current;
  YYRESULTTAG yyflag;

  yynrhs = yyrhsLength (yyopt->yyrule);
  yyflag = yyresolveStates (yyopt->yystate, yynrhs, yystackp);
  if (yyflag != yyok)
    {
      yyGLRState *yys;
      for (yys = yyopt->yystate; yynrhs > 0; yys = yys->yypred, yynrhs -= 1)
	yydestroyGLRState ("Cleanup: popping", yys);
      return yyflag;
    }

  yyrhsVals[YYMAXRHS + YYMAXLEFT].yystate.yypred = yyopt->yystate;
  if (yynrhs == 0)
    /* Set default location.  */
    yyrhsVals[YYMAXRHS + YYMAXLEFT - 1].yystate.yyloc = yyopt->yystate->yyloc;
  yychar_current = yychar;
  yylval_current = yylval;
  yylloc_current = yylloc;
  yychar = yyopt->yyrawchar;
  yylval = yyopt->yyval;
  yylloc = yyopt->yyloc;
  yyflag = yyuserAction (yyopt->yyrule, yynrhs,
			   yyrhsVals + YYMAXRHS + YYMAXLEFT - 1,
			   yyvalp, yylocp, yystackp);
  yychar = yychar_current;
  yylval = yylval_current;
  yylloc = yylloc_current;
  return yyflag;
}

#if YYDEBUG
static void
yyreportTree (yySemanticOption* yyx, int yyindent)
{
  int yynrhs = yyrhsLength (yyx->yyrule);
  int yyi;
  yyGLRState* yys;
  yyGLRState* yystates[1 + YYMAXRHS];
  yyGLRState yyleftmost_state;

  for (yyi = yynrhs, yys = yyx->yystate; 0 < yyi; yyi -= 1, yys = yys->yypred)
    yystates[yyi] = yys;
  if (yys == NULL)
    {
      yyleftmost_state.yyposn = 0;
      yystates[0] = &yyleftmost_state;
    }
  else
    yystates[0] = yys;

  if (yyx->yystate->yyposn < yys->yyposn + 1)
    YYFPRINTF (stderr, "%*s%s -> <Rule %d, empty>\n",
	       yyindent, "", yytokenName (yylhsNonterm (yyx->yyrule)),
	       yyx->yyrule - 1);
  else
    YYFPRINTF (stderr, "%*s%s -> <Rule %d, tokens %lu .. %lu>\n",
	       yyindent, "", yytokenName (yylhsNonterm (yyx->yyrule)),
	       yyx->yyrule - 1, (unsigned long int) (yys->yyposn + 1),
	       (unsigned long int) yyx->yystate->yyposn);
  for (yyi = 1; yyi <= yynrhs; yyi += 1)
    {
      if (yystates[yyi]->yyresolved)
	{
	  if (yystates[yyi-1]->yyposn+1 > yystates[yyi]->yyposn)
	    YYFPRINTF (stderr, "%*s%s <empty>\n", yyindent+2, "",
		       yytokenName (yyrhs[yyprhs[yyx->yyrule]+yyi-1]));
	  else
	    YYFPRINTF (stderr, "%*s%s <tokens %lu .. %lu>\n", yyindent+2, "",
		       yytokenName (yyrhs[yyprhs[yyx->yyrule]+yyi-1]),
		       (unsigned long int) (yystates[yyi - 1]->yyposn + 1),
		       (unsigned long int) yystates[yyi]->yyposn);
	}
      else
	yyreportTree (yystates[yyi]->yysemantics.yyfirstVal, yyindent+2);
    }
}
#endif

/*ARGSUSED*/ static YYRESULTTAG
yyreportAmbiguity (yySemanticOption* yyx0,
		   yySemanticOption* yyx1)
{
  YYUSE (yyx0);
  YYUSE (yyx1);

#if YYDEBUG
  YYFPRINTF (stderr, "Ambiguity detected.\n");
  YYFPRINTF (stderr, "Option 1,\n");
  yyreportTree (yyx0, 2);
  YYFPRINTF (stderr, "\nOption 2,\n");
  yyreportTree (yyx1, 2);
  YYFPRINTF (stderr, "\n");
#endif

  yyerror (YY_("syntax is ambiguous"));
  return yyabort;
}

/** Starting at and including state S1, resolve the location for each of the
 *  previous N1 states that is unresolved.  The first semantic option of a state
 *  is always chosen.  */
static void
yyresolveLocations (yyGLRState* yys1, int yyn1,
		    yyGLRStack *yystackp)
{
  if (0 < yyn1)
    {
      yyresolveLocations (yys1->yypred, yyn1 - 1, yystackp);
      if (!yys1->yyresolved)
	{
	  yySemanticOption *yyoption;
	  yyGLRStackItem yyrhsloc[1 + YYMAXRHS];
	  int yynrhs;
	  int yychar_current;
	  YYSTYPE yylval_current;
	  YYLTYPE yylloc_current;
	  yyoption = yys1->yysemantics.yyfirstVal;
	  YYASSERT (yyoption != NULL);
	  yynrhs = yyrhsLength (yyoption->yyrule);
	  if (yynrhs > 0)
	    {
	      yyGLRState *yys;
	      int yyn;
	      yyresolveLocations (yyoption->yystate, yynrhs,
				  yystackp);
	      for (yys = yyoption->yystate, yyn = yynrhs;
		   yyn > 0;
		   yys = yys->yypred, yyn -= 1)
		yyrhsloc[yyn].yystate.yyloc = yys->yyloc;
	    }
	  else
	    {
	      /* Both yyresolveAction and yyresolveLocations traverse the GSS
		 in reverse rightmost order.  It is only necessary to invoke
		 yyresolveLocations on a subforest for which yyresolveAction
		 would have been invoked next had an ambiguity not been
		 detected.  Thus the location of the previous state (but not
		 necessarily the previous state itself) is guaranteed to be
		 resolved already.  */
	      yyGLRState *yyprevious = yyoption->yystate;
	      yyrhsloc[0].yystate.yyloc = yyprevious->yyloc;
	    }
	  yychar_current = yychar;
	  yylval_current = yylval;
	  yylloc_current = yylloc;
	  yychar = yyoption->yyrawchar;
	  yylval = yyoption->yyval;
	  yylloc = yyoption->yyloc;
	  YYLLOC_DEFAULT ((yys1->yyloc), yyrhsloc, yynrhs);
	  yychar = yychar_current;
	  yylval = yylval_current;
	  yylloc = yylloc_current;
	}
    }
}

/** Resolve the ambiguity represented in state S, perform the indicated
 *  actions, and set the semantic value of S.  If result != yyok, the chain of
 *  semantic options in S has been cleared instead or it has been left
 *  unmodified except that redundant options may have been removed.  Regardless
 *  of whether result = yyok, S has been left with consistent data so that
 *  yydestroyGLRState can be invoked if necessary.  */
static YYRESULTTAG
yyresolveValue (yyGLRState* yys, yyGLRStack* yystackp)
{
  yySemanticOption* yyoptionList = yys->yysemantics.yyfirstVal;
  yySemanticOption* yybest;
  yySemanticOption** yypp;
  yybool yymerge;
  YYSTYPE yysval;
  YYRESULTTAG yyflag;
  YYLTYPE *yylocp = &yys->yyloc;

  yybest = yyoptionList;
  yymerge = yyfalse;
  for (yypp = &yyoptionList->yynext; *yypp != NULL; )
    {
      yySemanticOption* yyp = *yypp;

      if (yyidenticalOptions (yybest, yyp))
	{
	  yymergeOptionSets (yybest, yyp);
	  *yypp = yyp->yynext;
	}
      else
	{
	  switch (yypreference (yybest, yyp))
	    {
	    case 0:
	      yyresolveLocations (yys, 1, yystackp);
	      return yyreportAmbiguity (yybest, yyp);
	      break;
	    case 1:
	      yymerge = yytrue;
	      break;
	    case 2:
	      break;
	    case 3:
	      yybest = yyp;
	      yymerge = yyfalse;
	      break;
	    default:
	      /* This cannot happen so it is not worth a YYASSERT (yyfalse),
		 but some compilers complain if the default case is
		 omitted.  */
	      break;
	    }
	  yypp = &yyp->yynext;
	}
    }

  if (yymerge)
    {
      yySemanticOption* yyp;
      int yyprec = yydprec[yybest->yyrule];
      yyflag = yyresolveAction (yybest, yystackp, &yysval,
				yylocp);
      if (yyflag == yyok)
	for (yyp = yybest->yynext; yyp != NULL; yyp = yyp->yynext)
	  {
	    if (yyprec == yydprec[yyp->yyrule])
	      {
		YYSTYPE yysval_other;
		YYLTYPE yydummy;
		yyflag = yyresolveAction (yyp, yystackp, &yysval_other,
					  &yydummy);
		if (yyflag != yyok)
		  {
		    yydestruct ("Cleanup: discarding incompletely merged value for",
				yystos[yys->yylrState],
				&yysval, yylocp);
		    break;
		  }
		yyuserMerge (yymerger[yyp->yyrule], &yysval, &yysval_other);
	      }
	  }
    }
  else
    yyflag = yyresolveAction (yybest, yystackp, &yysval, yylocp);

  if (yyflag == yyok)
    {
      yys->yyresolved = yytrue;
      yys->yysemantics.yysval = yysval;
    }
  else
    yys->yysemantics.yyfirstVal = NULL;
  return yyflag;
}

static YYRESULTTAG
yyresolveStack (yyGLRStack* yystackp)
{
  if (yystackp->yysplitPoint != NULL)
    {
      yyGLRState* yys;
      int yyn;

      for (yyn = 0, yys = yystackp->yytops.yystates[0];
	   yys != yystackp->yysplitPoint;
	   yys = yys->yypred, yyn += 1)
	continue;
      YYCHK (yyresolveStates (yystackp->yytops.yystates[0], yyn, yystackp
			     ));
    }
  return yyok;
}

static void
yycompressStack (yyGLRStack* yystackp)
{
  yyGLRState* yyp, *yyq, *yyr;

  if (yystackp->yytops.yysize != 1 || yystackp->yysplitPoint == NULL)
    return;

  for (yyp = yystackp->yytops.yystates[0], yyq = yyp->yypred, yyr = NULL;
       yyp != yystackp->yysplitPoint;
       yyr = yyp, yyp = yyq, yyq = yyp->yypred)
    yyp->yypred = yyr;

  yystackp->yyspaceLeft += yystackp->yynextFree - yystackp->yyitems;
  yystackp->yynextFree = ((yyGLRStackItem*) yystackp->yysplitPoint) + 1;
  yystackp->yyspaceLeft -= yystackp->yynextFree - yystackp->yyitems;
  yystackp->yysplitPoint = NULL;
  yystackp->yylastDeleted = NULL;

  while (yyr != NULL)
    {
      yystackp->yynextFree->yystate = *yyr;
      yyr = yyr->yypred;
      yystackp->yynextFree->yystate.yypred = &yystackp->yynextFree[-1].yystate;
      yystackp->yytops.yystates[0] = &yystackp->yynextFree->yystate;
      yystackp->yynextFree += 1;
      yystackp->yyspaceLeft -= 1;
    }
}

static YYRESULTTAG
yyprocessOneStack (yyGLRStack* yystackp, size_t yyk,
		   size_t yyposn)
{
  int yyaction;
  const short int* yyconflicts;
  yyRuleNum yyrule;

  while (yystackp->yytops.yystates[yyk] != NULL)
    {
      yyStateNum yystate = yystackp->yytops.yystates[yyk]->yylrState;
      YYDPRINTF ((stderr, "Stack %lu Entering state %d\n",
		  (unsigned long int) yyk, yystate));

      YYASSERT (yystate != YYFINAL);

      if (yyisDefaultedState (yystate))
	{
	  yyrule = yydefaultAction (yystate);
	  if (yyrule == 0)
	    {
	      YYDPRINTF ((stderr, "Stack %lu dies.\n",
			  (unsigned long int) yyk));
	      yymarkStackDeleted (yystackp, yyk);
	      return yyok;
	    }
	  YYCHK (yyglrReduce (yystackp, yyk, yyrule, yyfalse));
	}
      else
	{
	  yySymbol yytoken;
	  yystackp->yytops.yylookaheadNeeds[yyk] = yytrue;
	  if (yychar == YYEMPTY)
	    {
	      YYDPRINTF ((stderr, "Reading a token: "));
	      yychar = YYLEX;
	    }

	  if (yychar <= YYEOF)
	    {
	      yychar = yytoken = YYEOF;
	      YYDPRINTF ((stderr, "Now at end of input.\n"));
	    }
	  else
	    {
	      yytoken = YYTRANSLATE (yychar);
	      YY_SYMBOL_PRINT ("Next token is", yytoken, &yylval, &yylloc);
	    }

	  yygetLRActions (yystate, yytoken, &yyaction, &yyconflicts);

	  while (*yyconflicts != 0)
	    {
	      size_t yynewStack = yysplitStack (yystackp, yyk);
	      YYDPRINTF ((stderr, "Splitting off stack %lu from %lu.\n",
			  (unsigned long int) yynewStack,
			  (unsigned long int) yyk));
	      YYCHK (yyglrReduce (yystackp, yynewStack,
				  *yyconflicts, yyfalse));
	      YYCHK (yyprocessOneStack (yystackp, yynewStack,
					yyposn));
	      yyconflicts += 1;
	    }

	  if (yyisShiftAction (yyaction))
	    break;
	  else if (yyisErrorAction (yyaction))
	    {
	      YYDPRINTF ((stderr, "Stack %lu dies.\n",
			  (unsigned long int) yyk));
	      yymarkStackDeleted (yystackp, yyk);
	      break;
	    }
	  else
	    YYCHK (yyglrReduce (yystackp, yyk, -yyaction,
				yyfalse));
	}
    }
  return yyok;
}

/*ARGSUSED*/ static void
yyreportSyntaxError (yyGLRStack* yystackp)
{
  if (yystackp->yyerrState == 0)
    {
#if YYERROR_VERBOSE
      int yyn;
      yyn = yypact[yystackp->yytops.yystates[0]->yylrState];
      if (YYPACT_NINF < yyn && yyn <= YYLAST)
	{
	  yySymbol yytoken = YYTRANSLATE (yychar);
	  size_t yysize0 = yytnamerr (NULL, yytokenName (yytoken));
	  size_t yysize = yysize0;
	  size_t yysize1;
	  yybool yysize_overflow = yyfalse;
	  char* yymsg = NULL;
	  enum { YYERROR_VERBOSE_ARGS_MAXIMUM = 5 };
	  char const *yyarg[YYERROR_VERBOSE_ARGS_MAXIMUM];
	  int yyx;
	  char *yyfmt;
	  char const *yyf;
	  static char const yyunexpected[] = "syntax error, unexpected %s";
	  static char const yyexpecting[] = ", expecting %s";
	  static char const yyor[] = " or %s";
	  char yyformat[sizeof yyunexpected
			+ sizeof yyexpecting - 1
			+ ((YYERROR_VERBOSE_ARGS_MAXIMUM - 2)
			   * (sizeof yyor - 1))];
	  char const *yyprefix = yyexpecting;

	  /* Start YYX at -YYN if negative to avoid negative indexes in
	     YYCHECK.  */
	  int yyxbegin = yyn < 0 ? -yyn : 0;

	  /* Stay within bounds of both yycheck and yytname.  */
	  int yychecklim = YYLAST - yyn + 1;
	  int yyxend = yychecklim < YYNTOKENS ? yychecklim : YYNTOKENS;
	  int yycount = 1;

	  yyarg[0] = yytokenName (yytoken);
	  yyfmt = yystpcpy (yyformat, yyunexpected);

	  for (yyx = yyxbegin; yyx < yyxend; ++yyx)
	    if (yycheck[yyx + yyn] == yyx && yyx != YYTERROR)
	      {
		if (yycount == YYERROR_VERBOSE_ARGS_MAXIMUM)
		  {
		    yycount = 1;
		    yysize = yysize0;
		    yyformat[sizeof yyunexpected - 1] = '\0';
		    break;
		  }
		yyarg[yycount++] = yytokenName (yyx);
		yysize1 = yysize + yytnamerr (NULL, yytokenName (yyx));
		yysize_overflow |= yysize1 < yysize;
		yysize = yysize1;
		yyfmt = yystpcpy (yyfmt, yyprefix);
		yyprefix = yyor;
	      }

	  yyf = YY_(yyformat);
	  yysize1 = yysize + strlen (yyf);
	  yysize_overflow |= yysize1 < yysize;
	  yysize = yysize1;

	  if (!yysize_overflow)
	    yymsg = (char *) YYMALLOC (yysize);

	  if (yymsg)
	    {
	      char *yyp = yymsg;
	      int yyi = 0;
	      while ((*yyp = *yyf))
		{
		  if (*yyp == '%' && yyf[1] == 's' && yyi < yycount)
		    {
		      yyp += yytnamerr (yyp, yyarg[yyi++]);
		      yyf += 2;
		    }
		  else
		    {
		      yyp++;
		      yyf++;
		    }
		}
	      yyerror (yymsg);
	      YYFREE (yymsg);
	    }
	  else
	    {
	      yyerror (YY_("syntax error"));
	      yyMemoryExhausted (yystackp);
	    }
	}
      else
#endif /* YYERROR_VERBOSE */
	yyerror (YY_("syntax error"));
      yynerrs += 1;
    }
}

/* Recover from a syntax error on *YYSTACKP, assuming that *YYSTACKP->YYTOKENP,
   yylval, and yylloc are the syntactic category, semantic value, and location
   of the lookahead.  */
/*ARGSUSED*/ static void
yyrecoverSyntaxError (yyGLRStack* yystackp)
{
  size_t yyk;
  int yyj;

  if (yystackp->yyerrState == 3)
    /* We just shifted the error token and (perhaps) took some
       reductions.  Skip tokens until we can proceed.  */
    while (YYID (yytrue))
      {
	yySymbol yytoken;
	if (yychar == YYEOF)
	  yyFail (yystackp, NULL);
	if (yychar != YYEMPTY)
	  {
	    /* We throw away the lookahead, but the error range
	       of the shifted error token must take it into account.  */
	    yyGLRState *yys = yystackp->yytops.yystates[0];
	    yyGLRStackItem yyerror_range[3];
	    yyerror_range[1].yystate.yyloc = yys->yyloc;
	    yyerror_range[2].yystate.yyloc = yylloc;
	    YYLLOC_DEFAULT ((yys->yyloc), yyerror_range, 2);
	    yytoken = YYTRANSLATE (yychar);
	    yydestruct ("Error: discarding",
			yytoken, &yylval, &yylloc);
	  }
	YYDPRINTF ((stderr, "Reading a token: "));
	yychar = YYLEX;
	if (yychar <= YYEOF)
	  {
	    yychar = yytoken = YYEOF;
	    YYDPRINTF ((stderr, "Now at end of input.\n"));
	  }
	else
	  {
	    yytoken = YYTRANSLATE (yychar);
	    YY_SYMBOL_PRINT ("Next token is", yytoken, &yylval, &yylloc);
	  }
	yyj = yypact[yystackp->yytops.yystates[0]->yylrState];
	if (yyis_pact_ninf (yyj))
	  return;
	yyj += yytoken;
	if (yyj < 0 || YYLAST < yyj || yycheck[yyj] != yytoken)
	  {
	    if (yydefact[yystackp->yytops.yystates[0]->yylrState] != 0)
	      return;
	  }
	else if (yytable[yyj] != 0 && ! yyis_table_ninf (yytable[yyj]))
	  return;
      }

  /* Reduce to one stack.  */
  for (yyk = 0; yyk < yystackp->yytops.yysize; yyk += 1)
    if (yystackp->yytops.yystates[yyk] != NULL)
      break;
  if (yyk >= yystackp->yytops.yysize)
    yyFail (yystackp, NULL);
  for (yyk += 1; yyk < yystackp->yytops.yysize; yyk += 1)
    yymarkStackDeleted (yystackp, yyk);
  yyremoveDeletes (yystackp);
  yycompressStack (yystackp);

  /* Now pop stack until we find a state that shifts the error token.  */
  yystackp->yyerrState = 3;
  while (yystackp->yytops.yystates[0] != NULL)
    {
      yyGLRState *yys = yystackp->yytops.yystates[0];
      yyj = yypact[yys->yylrState];
      if (! yyis_pact_ninf (yyj))
	{
	  yyj += YYTERROR;
	  if (0 <= yyj && yyj <= YYLAST && yycheck[yyj] == YYTERROR
	      && yyisShiftAction (yytable[yyj]))
	    {
	      /* Shift the error token having adjusted its location.  */
	      YYLTYPE yyerrloc;
	      yystackp->yyerror_range[2].yystate.yyloc = yylloc;
	      YYLLOC_DEFAULT (yyerrloc, (yystackp->yyerror_range), 2);
	      YY_SYMBOL_PRINT ("Shifting", yystos[yytable[yyj]],
			       &yylval, &yyerrloc);
	      yyglrShift (yystackp, 0, yytable[yyj],
			  yys->yyposn, &yylval, &yyerrloc);
	      yys = yystackp->yytops.yystates[0];
	      break;
	    }
	}
      yystackp->yyerror_range[1].yystate.yyloc = yys->yyloc;
      if (yys->yypred != NULL)
	yydestroyGLRState ("Error: popping", yys);
      yystackp->yytops.yystates[0] = yys->yypred;
      yystackp->yynextFree -= 1;
      yystackp->yyspaceLeft += 1;
    }
  if (yystackp->yytops.yystates[0] == NULL)
    yyFail (yystackp, NULL);
}

#define YYCHK1(YYE)							     \
  do {									     \
    switch (YYE) {							     \
    case yyok:								     \
      break;								     \
    case yyabort:							     \
      goto yyabortlab;							     \
    case yyaccept:							     \
      goto yyacceptlab;							     \
    case yyerr:								     \
      goto yyuser_error;						     \
    default:								     \
      goto yybuglab;							     \
    }									     \
  } while (YYID (0))


/*----------.
| yyparse.  |
`----------*/

int
yyparse (void)
{
  int yyresult;
  yyGLRStack yystack;
  yyGLRStack* const yystackp = &yystack;
  size_t yyposn;

  YYDPRINTF ((stderr, "Starting parse\n"));

  yychar = YYEMPTY;
  yylval = yyval_default;

#if YYLTYPE_IS_TRIVIAL
  yylloc.first_line   = yylloc.last_line   = 1;
  yylloc.first_column = yylloc.last_column = 1;
#endif


  /* User initialization code.  */
  
/* Line 2331 of glr.c  */
#line 134 "c:\\.Trash-1000\\doxygen-svn\\src\\\\..\\src\\verilogparser.y"
{ yydebug=0; }

/* Line 2331 of glr.c  */
#line 7143 "c:\\.Trash-1000\\doxygen-svn\\src\\\\..\\src\\verilogparser.cpp"

  if (! yyinitGLRStack (yystackp, YYINITDEPTH))
    goto yyexhaustedlab;
  switch (YYSETJMP (yystack.yyexception_buffer))
    {
    case 0: break;
    case 1: goto yyabortlab;
    case 2: goto yyexhaustedlab;
    default: goto yybuglab;
    }
  yyglrShift (&yystack, 0, 0, 0, &yylval, &yylloc);
  yyposn = 0;

  while (YYID (yytrue))
    {
      /* For efficiency, we have two loops, the first of which is
	 specialized to deterministic operation (single stack, no
	 potential ambiguity).  */
      /* Standard mode */
      while (YYID (yytrue))
	{
	  yyRuleNum yyrule;
	  int yyaction;
	  const short int* yyconflicts;

	  yyStateNum yystate = yystack.yytops.yystates[0]->yylrState;
	  YYDPRINTF ((stderr, "Entering state %d\n", yystate));
	  if (yystate == YYFINAL)
	    goto yyacceptlab;
	  if (yyisDefaultedState (yystate))
	    {
	      yyrule = yydefaultAction (yystate);
	      if (yyrule == 0)
		{
		  yystack.yyerror_range[1].yystate.yyloc = yylloc;
		  yyreportSyntaxError (&yystack);
		  goto yyuser_error;
		}
	      YYCHK1 (yyglrReduce (&yystack, 0, yyrule, yytrue));
	    }
	  else
	    {
	      yySymbol yytoken;
	      if (yychar == YYEMPTY)
		{
		  YYDPRINTF ((stderr, "Reading a token: "));
		  yychar = YYLEX;
		}

	      if (yychar <= YYEOF)
		{
		  yychar = yytoken = YYEOF;
		  YYDPRINTF ((stderr, "Now at end of input.\n"));
		}
	      else
		{
		  yytoken = YYTRANSLATE (yychar);
		  YY_SYMBOL_PRINT ("Next token is", yytoken, &yylval, &yylloc);
		}

	      yygetLRActions (yystate, yytoken, &yyaction, &yyconflicts);
	      if (*yyconflicts != 0)
		break;
	      if (yyisShiftAction (yyaction))
		{
		  YY_SYMBOL_PRINT ("Shifting", yytoken, &yylval, &yylloc);
		  yychar = YYEMPTY;
		  yyposn += 1;
		  yyglrShift (&yystack, 0, yyaction, yyposn, &yylval, &yylloc);
		  if (0 < yystack.yyerrState)
		    yystack.yyerrState -= 1;
		}
	      else if (yyisErrorAction (yyaction))
		{
		  yystack.yyerror_range[1].yystate.yyloc = yylloc;
		  yyreportSyntaxError (&yystack);
		  goto yyuser_error;
		}
	      else
		YYCHK1 (yyglrReduce (&yystack, 0, -yyaction, yytrue));
	    }
	}

      while (YYID (yytrue))
	{
	  yySymbol yytoken_to_shift;
	  size_t yys;

	  for (yys = 0; yys < yystack.yytops.yysize; yys += 1)
	    yystackp->yytops.yylookaheadNeeds[yys] = yychar != YYEMPTY;

	  /* yyprocessOneStack returns one of three things:

	      - An error flag.  If the caller is yyprocessOneStack, it
		immediately returns as well.  When the caller is finally
		yyparse, it jumps to an error label via YYCHK1.

	      - yyok, but yyprocessOneStack has invoked yymarkStackDeleted
		(&yystack, yys), which sets the top state of yys to NULL.  Thus,
		yyparse's following invocation of yyremoveDeletes will remove
		the stack.

	      - yyok, when ready to shift a token.

	     Except in the first case, yyparse will invoke yyremoveDeletes and
	     then shift the next token onto all remaining stacks.  This
	     synchronization of the shift (that is, after all preceding
	     reductions on all stacks) helps prevent double destructor calls
	     on yylval in the event of memory exhaustion.  */

	  for (yys = 0; yys < yystack.yytops.yysize; yys += 1)
	    YYCHK1 (yyprocessOneStack (&yystack, yys, yyposn));
	  yyremoveDeletes (&yystack);
	  if (yystack.yytops.yysize == 0)
	    {
	      yyundeleteLastStack (&yystack);
	      if (yystack.yytops.yysize == 0)
		yyFail (&yystack, YY_("syntax error"));
	      YYCHK1 (yyresolveStack (&yystack));
	      YYDPRINTF ((stderr, "Returning to deterministic operation.\n"));
	      yystack.yyerror_range[1].yystate.yyloc = yylloc;
	      yyreportSyntaxError (&yystack);
	      goto yyuser_error;
	    }

	  /* If any yyglrShift call fails, it will fail after shifting.  Thus,
	     a copy of yylval will already be on stack 0 in the event of a
	     failure in the following loop.  Thus, yychar is set to YYEMPTY
	     before the loop to make sure the user destructor for yylval isn't
	     called twice.  */
	  yytoken_to_shift = YYTRANSLATE (yychar);
	  yychar = YYEMPTY;
	  yyposn += 1;
	  for (yys = 0; yys < yystack.yytops.yysize; yys += 1)
	    {
	      int yyaction;
	      const short int* yyconflicts;
	      yyStateNum yystate = yystack.yytops.yystates[yys]->yylrState;
	      yygetLRActions (yystate, yytoken_to_shift, &yyaction,
			      &yyconflicts);
	      /* Note that yyconflicts were handled by yyprocessOneStack.  */
	      YYDPRINTF ((stderr, "On stack %lu, ", (unsigned long int) yys));
	      YY_SYMBOL_PRINT ("shifting", yytoken_to_shift, &yylval, &yylloc);
	      yyglrShift (&yystack, yys, yyaction, yyposn,
			  &yylval, &yylloc);
	      YYDPRINTF ((stderr, "Stack %lu now in state #%d\n",
			  (unsigned long int) yys,
			  yystack.yytops.yystates[yys]->yylrState));
	    }

	  if (yystack.yytops.yysize == 1)
	    {
	      YYCHK1 (yyresolveStack (&yystack));
	      YYDPRINTF ((stderr, "Returning to deterministic operation.\n"));
	      yycompressStack (&yystack);
	      break;
	    }
	}
      continue;
    yyuser_error:
      yyrecoverSyntaxError (&yystack);
      yyposn = yystack.yytops.yystates[0]->yyposn;
    }

 yyacceptlab:
  yyresult = 0;
  goto yyreturn;

 yybuglab:
  YYASSERT (yyfalse);
  goto yyabortlab;

 yyabortlab:
  yyresult = 1;
  goto yyreturn;

 yyexhaustedlab:
  yyerror (YY_("memory exhausted"));
  yyresult = 2;
  goto yyreturn;

 yyreturn:
  if (yychar != YYEMPTY)
    yydestruct ("Cleanup: discarding lookahead",
		YYTRANSLATE (yychar),
		&yylval, &yylloc);

  /* If the stack is well-formed, pop the stack until it is empty,
     destroying its entries as we go.  But free the stack regardless
     of whether it is well-formed.  */
  if (yystack.yyitems)
    {
      yyGLRState** yystates = yystack.yytops.yystates;
      if (yystates)
	{
	  size_t yysize = yystack.yytops.yysize;
	  size_t yyk;
	  for (yyk = 0; yyk < yysize; yyk += 1)
	    if (yystates[yyk])
	      {
		while (yystates[yyk])
		  {
		    yyGLRState *yys = yystates[yyk];
		    yystack.yyerror_range[1].yystate.yyloc = yys->yyloc;
		    if (yys->yypred != NULL)
		      yydestroyGLRState ("Cleanup: popping", yys);
		    yystates[yyk] = yys->yypred;
		    yystack.yynextFree -= 1;
		    yystack.yyspaceLeft += 1;
		  }
		break;
	      }
	}
      yyfreeGLRStack (&yystack);
    }

  /* Make sure YYID is used.  */
  return YYID (yyresult);
}

/* DEBUGGING ONLY */
#if YYDEBUG
static void yypstack (yyGLRStack* yystackp, size_t yyk)
  __attribute__ ((__unused__));
static void yypdumpstack (yyGLRStack* yystackp) __attribute__ ((__unused__));

static void
yy_yypstack (yyGLRState* yys)
{
  if (yys->yypred)
    {
      yy_yypstack (yys->yypred);
      YYFPRINTF (stderr, " -> ");
    }
  YYFPRINTF (stderr, "%d@%lu", yys->yylrState,
             (unsigned long int) yys->yyposn);
}

static void
yypstates (yyGLRState* yyst)
{
  if (yyst == NULL)
    YYFPRINTF (stderr, "<null>");
  else
    yy_yypstack (yyst);
  YYFPRINTF (stderr, "\n");
}

static void
yypstack (yyGLRStack* yystackp, size_t yyk)
{
  yypstates (yystackp->yytops.yystates[yyk]);
}

#define YYINDEX(YYX)							     \
    ((YYX) == NULL ? -1 : (yyGLRStackItem*) (YYX) - yystackp->yyitems)


static void
yypdumpstack (yyGLRStack* yystackp)
{
  yyGLRStackItem* yyp;
  size_t yyi;
  for (yyp = yystackp->yyitems; yyp < yystackp->yynextFree; yyp += 1)
    {
      YYFPRINTF (stderr, "%3lu. ",
                 (unsigned long int) (yyp - yystackp->yyitems));
      if (*(yybool *) yyp)
	{
	  YYFPRINTF (stderr, "Res: %d, LR State: %d, posn: %lu, pred: %ld",
		     yyp->yystate.yyresolved, yyp->yystate.yylrState,
		     (unsigned long int) yyp->yystate.yyposn,
		     (long int) YYINDEX (yyp->yystate.yypred));
	  if (! yyp->yystate.yyresolved)
	    YYFPRINTF (stderr, ", firstVal: %ld",
		       (long int) YYINDEX (yyp->yystate
                                             .yysemantics.yyfirstVal));
	}
      else
	{
	  YYFPRINTF (stderr, "Option. rule: %d, state: %ld, next: %ld",
		     yyp->yyoption.yyrule - 1,
		     (long int) YYINDEX (yyp->yyoption.yystate),
		     (long int) YYINDEX (yyp->yyoption.yynext));
	}
      YYFPRINTF (stderr, "\n");
    }
  YYFPRINTF (stderr, "Tops:");
  for (yyi = 0; yyi < yystackp->yytops.yysize; yyi += 1)
    YYFPRINTF (stderr, "%lu: %ld; ", (unsigned long int) yyi,
	       (long int) YYINDEX (yystackp->yytops.yystates[yyi]));
  YYFPRINTF (stderr, "\n");
}
#endif



/* Line 2634 of glr.c  */
#line 1951 "c:\\.Trash-1000\\doxygen-svn\\src\\\\..\\src\\verilogparser.y"

//------ ------------------------------------------------------------------------------------------------

 Entry* getCurrVerilogEntry(){return current;}
 Entry* getCurrVerilog(){return currentVerilog; }
 QCString getCurrVerilogParsingClass(){return currVerilogClass; }

 void initVerilogParser(Entry* ee,bool pc){
  identVerilog.resize(0);
  currVerilogInst.resize(0);
  currVerilogClass.resize(0);
  prevDocEntryVerilog.reset();
  currentVerilog=0;
  generateItem=false;
  currentFunctionVerilog=0;
  parseCode=pc;
  briefString.resize(0);
  briefLine=0;
if(pc) return;
  current_rootVerilog=ee;
  lastModule=0;
  current=new Entry;
  VerilogDocGen::initEntry(current);
  current_rootVerilog->name=QCString("XXX"); // dummy name for root
}

 Entry* VerilogDocGen::makeNewEntry(char* name,int sec,int spec,int line,bool add){
 
  Entry *e=current;
 /*
  if(e->briefLine>0 && e->brief.data())
  {
    briefLine=line;
    briefString=e->brief;
  }

  if(line==briefLine && briefString.data())
  {
   e->brief=briefString;
   briefString.resize(0);
  }  
  */

 if(parseCode) // should not happen!
 assert(0);

if(add)
{ // features like 'include xxx or 'define xxx must not be inserted here
 if(lastModule)
    addSubEntry(lastModule,e); 
  else
    addSubEntry(current_rootVerilog,e); 
}
else
  addSubEntry(current_rootVerilog,e);

if(line){
  	  e->bodyLine=line;
      e->startLine=line;
  }else
   {
     e->bodyLine=getVerilogPrevLine();
     e->startLine=getVerilogPrevLine();
   }
   
  e->section=sec;
  e->spec=spec;
  e->name=name;
  e->name.stripPrefix("\\");// escaped_identifier ??

  current=new Entry;
  VerilogDocGen::initEntry(current);
  
  return e;
 }

void addSubEntry(Entry* root, Entry* e) {
 if(e==NULL || root==NULL) return;
  root->addSubEntry(e);
 } 




//-------------------------------------------------------------------------
  
// extracts module/primitive name

void parseModule(){
 
 QCString mod(getVerilogString());
 VhdlDocGen::deleteAllChars(mod,'\n');
 VhdlDocGen::deleteAllChars(mod,' ');
 VhdlDocGen::deleteAllChars(mod,';');
 VhdlDocGen::deleteAllChars(mod,'(');
 
 QRegExp reg("[^_a-zA-Z0-9$]");

 int ll=mod.find(reg);

 if(ll>-1){
//  char c=mod.at(ll);
  QCString val=mod.remove(ll,1);

 }

//if(mod.len>80)

 if(parseCode) {
 //generateVerilogClassOrGlobalLink(mod.data());
 currVerilogClass=mod;
 return;
 }
  currentVerilog->name=mod;
 }//parseModuleName


// extracts module instances [ module_name name,module_name #(...) name]

void parseModuleInst(QCString& first, QCString& sec) {
 
if(currVerilogType==VerilogDocGen::DEFPARAM ) return; //|| generateItem 



 VhdlDocGen::deleteAllChars(sec,'(');
 VhdlDocGen::deleteAllChars(sec,'\n');
 VhdlDocGen::deleteAllChars(sec,')');
 VhdlDocGen::deleteAllChars(sec,' ');
 VhdlDocGen::deleteAllChars(sec,',');
 VhdlDocGen::deleteAllChars(sec,';');
 QCString temp=sec;
//while(sec.stripPrefix(" "));

if(sec!=first && (sec.contains("#")==0))
{ 
 //QStringList ql=QStringList::split(first.data(),sec,false);
int oo=sec.findRev(first.data());
if(oo>0) 
 sec=sec.left(oo);
}
else
 sec=getLastLetter();

if(temp.contains("#"))
{ 
 int ii=temp.find("#");
 sec=temp.left(ii);
while(sec.stripPrefix(" "));
}


 if(parseCode){
     VhdlDocGen::deleteAllChars(sec,'\t');
   currVerilogInst=sec;
   return;
  }
 else {
  Entry* pTemp=VerilogDocGen::makeNewEntry(sec.data(),Entry::VARIABLE_SEC,VerilogDocGen::COMPONENT,moduleLine);
  pTemp->type=first;
 if(generateItem) 
  pTemp->args="[generate]";
 if(sec==first)return;
if(currentVerilog)
 if(!findExtendsComponent(currentVerilog->extends,sec)){	
  	BaseInfo *bb=new BaseInfo(sec,Private,Normal);
    currentVerilog->extends->append(bb);						
   }
  }
}


void parseListOfPorts() {
 
  QCString type;

 QCString mod(getVerilogString());
 if(Config_getBool("HIDE_PORT")) return;
 VhdlDocGen::deleteAllChars(mod,' ');
 VhdlDocGen::deleteAllChars(mod,'\n');
 VhdlDocGen::deleteAllChars(mod,';');
 VhdlDocGen::deleteAllChars(mod,')');
 VhdlDocGen::deleteAllChars(mod,'(');
  QStringList ql=QStringList::split(",",mod,false);
  QCString name=ql[0].data();
if(!parseCode) {
  for(uint j=0;j<ql.count();j++) {
  QCString name=ql[j].data();
   int i=name.find('[');
  if(i > 0){
    type=mod.right(mod.length()-i);
    name=mod.left(i);
  }
  
 name.prepend(VhdlDocGen::getRecordNumber().data());
 Entry* pTemp=VerilogDocGen::makeNewEntry(name.data(),Entry::VARIABLE_SEC,VerilogDocGen::PORT,c_lloc.first_line);
  pTemp->type=type; 
   }
  return;
 }	

 }//parseListOfPorts



void parseReg(Entry* e){

// "reg"|"integer\real\event"|wire"|"tri"|"tri1"|"supply0"|"wand"|"triand"|"tri0"|"supply1"|"wor"|"trior"|"trireg"

static QCString prevType;
static QCString sigType;
static QRegExp qregg("[ \\[]");
QCString regType;
QCString qcs;

int p,l;
     

 if((generateItem || CurrState==VerilogDocGen::STATE_FUNCTION || CurrState==VerilogDocGen::STATE_TASK )) return;

QCString mod(getVerilogString());

int port_type=0;

VhdlDocGen::deleteAllChars(mod,'(');
VhdlDocGen::deleteAllChars(mod,')');
VhdlDocGen::deleteAllChars(mod,';');
VhdlDocGen::deleteAllChars(mod,'\n');
VhdlDocGen::deleteAllChars(mod,',');

if(mod.contains("="))
{
 int i=mod.find("=");
 //qcs=mod.right(mod.length()-i-1);
 VhdlDocGen::deleteAllChars(qcs,' ');
 mod=mod.left(i);
}
  
 mod=mod.simplifyWhiteSpace(); 
  
//while(mod.stripPrefix(" "));
  p=qregg.match(mod,0,&l);

 if(p>0){
  sigType=mod.left(p);
  prevType.resize(0);
  mod.stripPrefix(sigType.data());
  while(mod.stripPrefix(" "));
  if(!mod.stripPrefix("signed ")){
  if(mod.stripPrefix("signed["))
    {mod.prepend("[");sigType.append(" signed ");}
  if(mod.stripPrefix("scalared "))
   sigType.append(" scalared ");
  if(mod.stripPrefix("vectored "))
    sigType.append(" vectored ");
 }
// else
  
}

 
 while(mod.stripPrefix(" "));
 

VhdlDocGen::deleteAllChars(mod,' ');

  int i=mod.find(']');
  int h=mod.find('[');

  if(h==0){
  	prevType+=mod.left(i+1);
  	mod=mod.right(mod.length()-i-1);
  h=mod.find('[');
  }

  if(h > 0){
   if(port_type!=2){ 
	regType=mod.right(mod.length()-h);
    mod=mod.left(h);
   }
   else {
    int ii=mod.find('[');
	if(ii>0){
  	prevType=mod.mid(ii,mod.length());
   	mod=mod.left(ii);
   }
  }
 }

  QStringList ql=QStringList::split(",",mod,false);
 uint len=ql.count() ;
 for(uint j=0;j<len;j++) {
  QCString name=ql[j].data();
  name.prepend(VhdlDocGen::getRecordNumber().data());
 
  Entry* pTemp=VerilogDocGen::makeNewEntry(name.data(),Entry::VARIABLE_SEC,getVerilogPrevLine());
 // pTemp->type=prevType;
 
  if((prevType.isEmpty() && len==1) || (!regType.isEmpty() && len==1))
     pTemp->type=regType;
 else
  pTemp->args=regType;
    
  pTemp->args+=sigType+prevType; 
 // if(!prevType.isEmpty() && !regType.isEmpty())
 // pTemp->args+=prevType; 

 pTemp->args+=qcs;
  pTemp->spec=VerilogDocGen::SIGNAL;//currVerilogType;
  
  regType=prevType;
  if(getVerilogToken()==SEM_TOK)
   { prevType="";sigType="";}
  
  }
} // parsReg


// extracts function/task prototype 

void parseFunction(Entry* curF)
{
  QCString mod(getVerilogString());
  QCString type; 
 
 VhdlDocGen::deleteAllChars(mod,'\n');
 VhdlDocGen::deleteAllChars(mod,';');
  while(mod.stripPrefix(" "));
 
  int i=mod.findRev(']');
  if(i > 0){
    type=mod.left(i+1);
   	mod=mod.right(mod.length()-i-1);
  }
  else {
  QStringList ql=QStringList::split(" ",mod,false);
  if(ql.count()>1) {
    type=ql[0].data();
	mod=ql[1].data();
  }
  }
 
 VhdlDocGen::deleteAllChars(mod,' ');
 VhdlDocGen::deleteAllChars(type,' ');

  curF->name+=mod;
  if(type.stripPrefix("automatic"))
   curF->type+="automatic "+type; 
   else
  curF->type+=type;
}
							   

// extract (local)parameter declaration 

void parseParam(Entry* e)
{
   QCString prevType,qcs;
  QRegExp regg("[ \t]");

  if((CurrState==VerilogDocGen::STATE_FUNCTION || CurrState==VerilogDocGen::STATE_TASK  || generateItem)) return;
  
  QCString mod(getVerilogString());
  VhdlDocGen::deleteAllChars(mod,';');
  VhdlDocGen::deleteAllChars(mod,'\n');
  VhdlDocGen::deleteAllChars(mod,',');

  mod=mod.simplifyWhiteSpace();

 if(mod.at(mod.length()-1)==')') 
  mod.remove(mod.length()-1,1);

  mod.stripPrefix("#");
  while(mod.stripPrefix(" "));
  mod.stripPrefix("(");



if(mod.contains("="))
{
 int i=mod.find("=");
 qcs=mod.right(mod.length()-i-1);
 while(qcs.stripPrefix(" "));
 mod=mod.left(i);
}

 while(mod.stripPrefix(" "));

 int j=mod.find(regg,0);
			 if(j>0){
			 bool bb=false;
			 QCString sem=mod.mid(0,j);
			 if(sem=="integer"){ prevType=sem;bb=true;}
			 else if(sem=="real"){prevType=sem;bb=true;}
			 else if(sem=="realtime"){prevType=sem;bb=true;}
			 else if(sem=="time"){prevType=sem;bb=true;}
			 else if(sem=="signed"){prevType=sem;bb=true;}
			 else if(sem=="wire"){prevType=sem;bb=true;}
			 if(bb)
			 mod.stripPrefix(sem.data());
			 }

 
 while(mod.stripPrefix(" "));
  
  int i=mod.find(']');
  if(i > 0){
    prevType+=" ";
	prevType+=mod.left(i+1);
   	mod=mod.right(mod.length()-i-1);
  }
 

  VhdlDocGen::deleteAllChars(mod,' ');


// each local member must get its unique number, because in Verilog
// two local variables can have the same identifier.
// ( input Q, reg Q)
  mod.prepend(VhdlDocGen::getRecordNumber().data());
 
  Entry* pTemp=VerilogDocGen::makeNewEntry(mod.data(),Entry::VARIABLE_SEC,VerilogDocGen::PARAMETER,getVerilogPrevLine());
  //pTemp->fileName+=getVerilogParsingFile();
  pTemp->type=prevType;
  pTemp->args=qcs;
  
  
}

// extract  input/output ports

void parsePortDir(Entry* e,int port)
{

static QCString prevType;
static QCString type; 

QCString mod(getVerilogString());
 VhdlDocGen::deleteAllChars(mod,'\n');
 VhdlDocGen::deleteAllChars(mod,')');
 VhdlDocGen::deleteAllChars(mod,'(');
 VhdlDocGen::deleteAllChars(mod,';');
 VhdlDocGen::deleteAllChars(mod,',');

 while(mod.stripPrefix(" "));


if(mod.stripPrefix("input"))
 prevType="";
else if(mod.stripPrefix("output"))
  prevType=""; 
else if(mod.stripPrefix("inout"))
  prevType="";
else {
             QRegExp regg("[ \\[]");
  			 int j=mod.find(regg,0);
			 if(j>0){
			 type=mod.mid(0,j);
			 mod.stripPrefix(type.data());
			 }
	 } 


while(mod.stripPrefix(" "));
 
QRegExp regg("[ \t]");
 int j=mod.find(regg,0);
			 if(j>0){
			 bool bb=false;
			 QCString sem=mod.mid(0,j);
			 if(sem=="integer"){ prevType=sem;bb=true;}
			 else if(sem=="real"){prevType=sem;bb=true;}
			 else if(sem=="realtime"){prevType=sem;bb=true;}
			 else if(sem=="time"){prevType=sem;bb=true;}
			 else if(sem=="signed"){prevType=sem;bb=true;}
			 else if(sem=="wire"){prevType=sem;bb=true;}
			 if(bb)
			 mod.stripPrefix(sem.data());
			 }

while(mod.stripPrefix(" "));
  
  int i=mod.findRev(']');
  if(i > 0){
    prevType+=" ";
	prevType+=mod.left(i+1);
   	mod=mod.right(mod.length()-i-1);
  }
  else{ 
  int j=mod.find(regg,0);
   if(j>0){
    QCString sem=mod.mid(0,j);
	if(sem=="reg"){		
     mod=mod.right(mod.length()-j-1);
     prevType+=" reg";
     }
    }
   }
  
  VhdlDocGen::deleteAllChars(mod,' ');
  mod.prepend(VhdlDocGen::getRecordNumber().data());
  if(CurrState==VerilogDocGen::STATE_MODULE){  
  Entry* pTemp=VerilogDocGen::makeNewEntry(mod.data(),Entry::VARIABLE_SEC,0,c_lloc.first_line);
  pTemp->type=prevType;
  pTemp->args=type;
   assert(currVerilogType!=0);
  pTemp->spec=currVerilogType;
//   VerilogDocGen::addSubEntry(currentVerilog,pTemp);
  }
  else
  { 
   if(CurrState==VerilogDocGen::STATE_FUNCTION){
      Argument *arg=new Argument;
      
      switch(currVerilogType) {
      
      case VerilogDocGen::INPUT: arg->type="Input";break;
      case VerilogDocGen::INOUT:arg->type="Inout";break;         
      case VerilogDocGen::OUTPUT:arg->type="Output";break;         
      default:break;
      }                           
        arg->defval=prevType;                         
        arg->name=mod;//(QCString)ql[j];	
	  currentFunctionVerilog->argList->append(arg);
	  VerilogDocGen::adjustMemberName(mod); 
	  currentFunctionVerilog->args+=mod;//(QCString)ql[j]+",";
  } 
 }
 

  if(getVerilogToken()==SEM_TOK)//end of line
  {prevType="";type="";}
}

void parseAlways(bool bBody)
{

if(currVerilogType!=VerilogDocGen::ALWAYS || generateItem) return ;

QRegExp regg1("[\\s]");

QCString mod(getVerilogString());
QCString type; 
QStringList ql;
bool sem=false;

 VhdlDocGen::deleteAllChars(mod,'@');
 VhdlDocGen::deleteAllChars(mod,'\n');
 VhdlDocGen::deleteAllChars(mod,'(');
 VhdlDocGen::deleteAllChars(mod,')');
 VhdlDocGen::deleteAllChars(mod,';'); 

bool semi=mod.contains(",");

if(semi)
  ql=QStringList::split(",",mod,false);
 else
  ql=QStringList::split(regg1,mod,false);
 

 if(!parseCode) {
 QCString temp;
 currentFunctionVerilog=VerilogDocGen::makeNewEntry(VhdlDocGen::getProcessNumber().data(),Entry::FUNCTION_SEC,VerilogDocGen::ALWAYS);
  currentFunctionVerilog->stat=TRUE;
  currentFunctionVerilog->fileName=getVerilogParsingFile();
  if(!bBody)
  for(uint j=0;j<ql.count();j++) {
  QCString ll=ql[j].data();
  temp+=ll;
  if(ll=="or" || ll=="and" || ll=="xor")
  {

    continue; 
  }

	//  currentFunctionVerilog->args+=',';
	  Argument *arg=new Argument;
      arg->name=ll.simplifyWhiteSpace();	
	  currentFunctionVerilog->argList->append(arg);
       if(!semi)
      {
      arg->name=mod;
      currentFunctionVerilog->args=mod; 
       return;
      }
      currentFunctionVerilog->args+=ll; 

 }
 return;
}


}//parseAlways



 // sets the current parsing module (only for parsing inline_sources)             
 void VerilogDocGen::setCurrVerilogClass(QCString& cl){ currVerilogClass = cl;}
   
 //-------------------------------------------------------------------------------------------  
           
 int MyParserConv::parse(MyParserConv* conv){
  myconv=conv;
  assert(myconv);
  return c_parse();
 } 
        
int c_lex(void){
 return myconv->doLex(); 
}


void c_error(const char * err){
   if(err){// && !parseCode){
 //fprintf(stderr,"\n\nerror  at line [%d]... : in file [%s]\n\n",c_lloc.first_line,getVerilogParsingFile());
  vbufreset();
 // exit(0);
  }
  
   } 
    
int getVerilogToken(){return c_char;}
 //------------------------------------------------------------------------------------------------  

// writes a digit to the source

void writeDigit()
 {
   if(parseCode) {
     writePrevVerilogWords(identVerilog);
	 writeVerilogFont("vhdllogic",identVerilog.data());
	 printVerilogBuffer(true);
	 }
	identVerilog.resize(0);

 }// writeDigit

// prints and links the parsed identifiers  

void parseString(){				
					 				
					if(parseCode ) { 
					 //   printVerilogStringList();
						 identVerilog=identVerilog.stripWhiteSpace();
				   	  writePrevVerilogWords(identVerilog);
						 bool b=false;
					 
					 if(currVerilogType==VerilogDocGen::DEFPARAM){
				       QCString s(getVerilogString());
                       if(s.contains(".")==0)
                           b=generateVerilogMemLink(currVerilogClass,identVerilog,VerilogDocGen::COMPONENT);
				       else if(s.contains("="))
                           b=generateVerilogMemLink(currVerilogClass,identVerilog,-1);
                       else
				         b=generateVerilogMemLink(currVerilogInst,identVerilog,-1);	       
				     }
					 else if(currVerilogType==VerilogDocGen::COMPONENT){
					    QCString tt(getVerilogString());
					    
							
						if(tt.contains('(') || !tt.contains('.'))
					     b=generateVerilogCompMemLink(currVerilogClass,currVerilogInst,identVerilog,false);
				        else if(!b)   
				         b=generateVerilogCompMemLink(currVerilogClass ,currVerilogInst,identVerilog,true);
						
						if(!b){
							  codifyVerilogString(identVerilog.data(),"vhdlchar");
				         b=true;
						 }
						//if(!b)   
				        // b=generateVerilogCompMemLink(currVerilogClass,currVerilogInst,identVerilog,false);    
					   }
				  
				      else if(currVerilogType==VerilogDocGen::PORT)
                        b=generateVerilogMemLink(currVerilogClass,identVerilog,VerilogDocGen::PORT);
				     else if(currVerilogType==VerilogDocGen::PARAMETER)
                        b=generateVerilogMemLink(currVerilogClass,identVerilog,VerilogDocGen::PARAMETER);
				     else if(currVerilogType==VerilogDocGen::SIGNAL)
                        b=generateVerilogMemLink(currVerilogClass,identVerilog,VerilogDocGen::SIGNAL);
				     else if(currVerilogType==VerilogDocGen::INPUT)
                        b=generateVerilogMemLink(currVerilogClass,identVerilog,VerilogDocGen::INPUT);				       
         		     else if(currVerilogType==VerilogDocGen::OUTPUT)
                        b=generateVerilogMemLink(currVerilogClass,identVerilog,VerilogDocGen::OUTPUT);
				     else if(currVerilogType==VerilogDocGen::INOUT)
                        b=generateVerilogMemLink(currVerilogClass,identVerilog,VerilogDocGen::INOUT);
				   
				     else if(currVerilogType==VerilogDocGen::ALWAYS)
                        b=generateVerilogMemLink(currVerilogClass,identVerilog,VerilogDocGen::ALWAYS);
						
				     if(!b){
					   b =  generateVerilogMemLink(currVerilogClass,identVerilog,-1); 
					   if(!b && getClass(identVerilog.data()))
                       b=generateVerilogClassOrGlobalLink(identVerilog.data());
					  if(!b){
					  const QCString*  col=VerilogDocGen::findKeyWord(identVerilog.data());
					  if(col) 
					  codifyVerilogString(identVerilog.data(),col->data());
					  else					  
					  codifyVerilogString(identVerilog.data(),"vhdlchar");
					   }   
					 }
					   printVerilogBuffer(true);
					  }
				    prevName=identVerilog;
				    identVerilog.resize(0);
				 
}// parseString

// inits the parser

 //---------------------------------------------------------------------------------------------------  


// do not include the same class twice 

bool findExtendsComponent(QList<BaseInfo> *extend,QCString& compName)
{
 for(uint j=0;j<extend->count();j++){
  BaseInfo *bb=extend->at(j);
  if(bb->name==compName)
   return true;
 }
 return false;
}// findExtendsComponent

void resetVerilogBrief() {briefString.resize(0); }
